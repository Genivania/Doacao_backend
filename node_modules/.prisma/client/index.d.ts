
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model BloodType
 * 
 */
export type BloodType = $Result.DefaultSelection<Prisma.$BloodTypePayload>
/**
 * Model Sex
 * 
 */
export type Sex = $Result.DefaultSelection<Prisma.$SexPayload>
/**
 * Model Address
 * 
 */
export type Address = $Result.DefaultSelection<Prisma.$AddressPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Hospital
 * 
 */
export type Hospital = $Result.DefaultSelection<Prisma.$HospitalPayload>
/**
 * Model Campaign
 * 
 */
export type Campaign = $Result.DefaultSelection<Prisma.$CampaignPayload>
/**
 * Model DonationBank
 * 
 */
export type DonationBank = $Result.DefaultSelection<Prisma.$DonationBankPayload>
/**
 * Model Site
 * 
 */
export type Site = $Result.DefaultSelection<Prisma.$SitePayload>
/**
 * Model HospitalSite
 * 
 */
export type HospitalSite = $Result.DefaultSelection<Prisma.$HospitalSitePayload>
/**
 * Model Phone
 * 
 */
export type Phone = $Result.DefaultSelection<Prisma.$PhonePayload>
/**
 * Model Photo
 * 
 */
export type Photo = $Result.DefaultSelection<Prisma.$PhotoPayload>
/**
 * Model Star
 * 
 */
export type Star = $Result.DefaultSelection<Prisma.$StarPayload>
/**
 * Model Review
 * 
 */
export type Review = $Result.DefaultSelection<Prisma.$ReviewPayload>
/**
 * Model Status
 * 
 */
export type Status = $Result.DefaultSelection<Prisma.$StatusPayload>
/**
 * Model BookSchedule
 * 
 */
export type BookSchedule = $Result.DefaultSelection<Prisma.$BookSchedulePayload>
/**
 * Model Schedule
 * 
 */
export type Schedule = $Result.DefaultSelection<Prisma.$SchedulePayload>
/**
 * Model ScheduleStatus
 * 
 */
export type ScheduleStatus = $Result.DefaultSelection<Prisma.$ScheduleStatusPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const STATUS: {
  CONCLUDED: 'CONCLUDED',
  SCHEDULED: 'SCHEDULED',
  RESCHEDULED: 'RESCHEDULED',
  PENDING: 'PENDING'
};

export type STATUS = (typeof STATUS)[keyof typeof STATUS]

}

export type STATUS = $Enums.STATUS

export const STATUS: typeof $Enums.STATUS

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more BloodTypes
 * const bloodTypes = await prisma.bloodType.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more BloodTypes
   * const bloodTypes = await prisma.bloodType.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.bloodType`: Exposes CRUD operations for the **BloodType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BloodTypes
    * const bloodTypes = await prisma.bloodType.findMany()
    * ```
    */
  get bloodType(): Prisma.BloodTypeDelegate<ExtArgs>;

  /**
   * `prisma.sex`: Exposes CRUD operations for the **Sex** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sexes
    * const sexes = await prisma.sex.findMany()
    * ```
    */
  get sex(): Prisma.SexDelegate<ExtArgs>;

  /**
   * `prisma.address`: Exposes CRUD operations for the **Address** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Addresses
    * const addresses = await prisma.address.findMany()
    * ```
    */
  get address(): Prisma.AddressDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.hospital`: Exposes CRUD operations for the **Hospital** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Hospitals
    * const hospitals = await prisma.hospital.findMany()
    * ```
    */
  get hospital(): Prisma.HospitalDelegate<ExtArgs>;

  /**
   * `prisma.campaign`: Exposes CRUD operations for the **Campaign** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Campaigns
    * const campaigns = await prisma.campaign.findMany()
    * ```
    */
  get campaign(): Prisma.CampaignDelegate<ExtArgs>;

  /**
   * `prisma.donationBank`: Exposes CRUD operations for the **DonationBank** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DonationBanks
    * const donationBanks = await prisma.donationBank.findMany()
    * ```
    */
  get donationBank(): Prisma.DonationBankDelegate<ExtArgs>;

  /**
   * `prisma.site`: Exposes CRUD operations for the **Site** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sites
    * const sites = await prisma.site.findMany()
    * ```
    */
  get site(): Prisma.SiteDelegate<ExtArgs>;

  /**
   * `prisma.hospitalSite`: Exposes CRUD operations for the **HospitalSite** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HospitalSites
    * const hospitalSites = await prisma.hospitalSite.findMany()
    * ```
    */
  get hospitalSite(): Prisma.HospitalSiteDelegate<ExtArgs>;

  /**
   * `prisma.phone`: Exposes CRUD operations for the **Phone** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Phones
    * const phones = await prisma.phone.findMany()
    * ```
    */
  get phone(): Prisma.PhoneDelegate<ExtArgs>;

  /**
   * `prisma.photo`: Exposes CRUD operations for the **Photo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Photos
    * const photos = await prisma.photo.findMany()
    * ```
    */
  get photo(): Prisma.PhotoDelegate<ExtArgs>;

  /**
   * `prisma.star`: Exposes CRUD operations for the **Star** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stars
    * const stars = await prisma.star.findMany()
    * ```
    */
  get star(): Prisma.StarDelegate<ExtArgs>;

  /**
   * `prisma.review`: Exposes CRUD operations for the **Review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.review.findMany()
    * ```
    */
  get review(): Prisma.ReviewDelegate<ExtArgs>;

  /**
   * `prisma.status`: Exposes CRUD operations for the **Status** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Statuses
    * const statuses = await prisma.status.findMany()
    * ```
    */
  get status(): Prisma.StatusDelegate<ExtArgs>;

  /**
   * `prisma.bookSchedule`: Exposes CRUD operations for the **BookSchedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BookSchedules
    * const bookSchedules = await prisma.bookSchedule.findMany()
    * ```
    */
  get bookSchedule(): Prisma.BookScheduleDelegate<ExtArgs>;

  /**
   * `prisma.schedule`: Exposes CRUD operations for the **Schedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Schedules
    * const schedules = await prisma.schedule.findMany()
    * ```
    */
  get schedule(): Prisma.ScheduleDelegate<ExtArgs>;

  /**
   * `prisma.scheduleStatus`: Exposes CRUD operations for the **ScheduleStatus** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScheduleStatuses
    * const scheduleStatuses = await prisma.scheduleStatus.findMany()
    * ```
    */
  get scheduleStatus(): Prisma.ScheduleStatusDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.6.0
   * Query Engine version: 2804dc98259d2ea960602aca6b8e7fdc03c1758f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    BloodType: 'BloodType',
    Sex: 'Sex',
    Address: 'Address',
    User: 'User',
    Hospital: 'Hospital',
    Campaign: 'Campaign',
    DonationBank: 'DonationBank',
    Site: 'Site',
    HospitalSite: 'HospitalSite',
    Phone: 'Phone',
    Photo: 'Photo',
    Star: 'Star',
    Review: 'Review',
    Status: 'Status',
    BookSchedule: 'BookSchedule',
    Schedule: 'Schedule',
    ScheduleStatus: 'ScheduleStatus'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'bloodType' | 'sex' | 'address' | 'user' | 'hospital' | 'campaign' | 'donationBank' | 'site' | 'hospitalSite' | 'phone' | 'photo' | 'star' | 'review' | 'status' | 'bookSchedule' | 'schedule' | 'scheduleStatus'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      BloodType: {
        payload: Prisma.$BloodTypePayload<ExtArgs>
        fields: Prisma.BloodTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BloodTypeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BloodTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BloodTypeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BloodTypePayload>
          }
          findFirst: {
            args: Prisma.BloodTypeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BloodTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BloodTypeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BloodTypePayload>
          }
          findMany: {
            args: Prisma.BloodTypeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BloodTypePayload>[]
          }
          create: {
            args: Prisma.BloodTypeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BloodTypePayload>
          }
          createMany: {
            args: Prisma.BloodTypeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BloodTypeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BloodTypePayload>
          }
          update: {
            args: Prisma.BloodTypeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BloodTypePayload>
          }
          deleteMany: {
            args: Prisma.BloodTypeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BloodTypeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BloodTypeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BloodTypePayload>
          }
          aggregate: {
            args: Prisma.BloodTypeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBloodType>
          }
          groupBy: {
            args: Prisma.BloodTypeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BloodTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.BloodTypeCountArgs<ExtArgs>,
            result: $Utils.Optional<BloodTypeCountAggregateOutputType> | number
          }
        }
      }
      Sex: {
        payload: Prisma.$SexPayload<ExtArgs>
        fields: Prisma.SexFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SexFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SexPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SexFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SexPayload>
          }
          findFirst: {
            args: Prisma.SexFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SexPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SexFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SexPayload>
          }
          findMany: {
            args: Prisma.SexFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SexPayload>[]
          }
          create: {
            args: Prisma.SexCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SexPayload>
          }
          createMany: {
            args: Prisma.SexCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SexDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SexPayload>
          }
          update: {
            args: Prisma.SexUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SexPayload>
          }
          deleteMany: {
            args: Prisma.SexDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SexUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SexUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SexPayload>
          }
          aggregate: {
            args: Prisma.SexAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSex>
          }
          groupBy: {
            args: Prisma.SexGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SexGroupByOutputType>[]
          }
          count: {
            args: Prisma.SexCountArgs<ExtArgs>,
            result: $Utils.Optional<SexCountAggregateOutputType> | number
          }
        }
      }
      Address: {
        payload: Prisma.$AddressPayload<ExtArgs>
        fields: Prisma.AddressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AddressFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AddressFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findFirst: {
            args: Prisma.AddressFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AddressFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findMany: {
            args: Prisma.AddressFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>[]
          }
          create: {
            args: Prisma.AddressCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          createMany: {
            args: Prisma.AddressCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AddressDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          update: {
            args: Prisma.AddressUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          deleteMany: {
            args: Prisma.AddressDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AddressUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AddressUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          aggregate: {
            args: Prisma.AddressAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAddress>
          }
          groupBy: {
            args: Prisma.AddressGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AddressGroupByOutputType>[]
          }
          count: {
            args: Prisma.AddressCountArgs<ExtArgs>,
            result: $Utils.Optional<AddressCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Hospital: {
        payload: Prisma.$HospitalPayload<ExtArgs>
        fields: Prisma.HospitalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HospitalFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HospitalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HospitalFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HospitalPayload>
          }
          findFirst: {
            args: Prisma.HospitalFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HospitalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HospitalFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HospitalPayload>
          }
          findMany: {
            args: Prisma.HospitalFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HospitalPayload>[]
          }
          create: {
            args: Prisma.HospitalCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HospitalPayload>
          }
          createMany: {
            args: Prisma.HospitalCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.HospitalDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HospitalPayload>
          }
          update: {
            args: Prisma.HospitalUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HospitalPayload>
          }
          deleteMany: {
            args: Prisma.HospitalDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.HospitalUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.HospitalUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HospitalPayload>
          }
          aggregate: {
            args: Prisma.HospitalAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHospital>
          }
          groupBy: {
            args: Prisma.HospitalGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HospitalGroupByOutputType>[]
          }
          count: {
            args: Prisma.HospitalCountArgs<ExtArgs>,
            result: $Utils.Optional<HospitalCountAggregateOutputType> | number
          }
        }
      }
      Campaign: {
        payload: Prisma.$CampaignPayload<ExtArgs>
        fields: Prisma.CampaignFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CampaignFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CampaignFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          findFirst: {
            args: Prisma.CampaignFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CampaignFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          findMany: {
            args: Prisma.CampaignFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>[]
          }
          create: {
            args: Prisma.CampaignCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          createMany: {
            args: Prisma.CampaignCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CampaignDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          update: {
            args: Prisma.CampaignUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          deleteMany: {
            args: Prisma.CampaignDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CampaignUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CampaignUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          aggregate: {
            args: Prisma.CampaignAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCampaign>
          }
          groupBy: {
            args: Prisma.CampaignGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CampaignGroupByOutputType>[]
          }
          count: {
            args: Prisma.CampaignCountArgs<ExtArgs>,
            result: $Utils.Optional<CampaignCountAggregateOutputType> | number
          }
        }
      }
      DonationBank: {
        payload: Prisma.$DonationBankPayload<ExtArgs>
        fields: Prisma.DonationBankFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DonationBankFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DonationBankPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DonationBankFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DonationBankPayload>
          }
          findFirst: {
            args: Prisma.DonationBankFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DonationBankPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DonationBankFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DonationBankPayload>
          }
          findMany: {
            args: Prisma.DonationBankFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DonationBankPayload>[]
          }
          create: {
            args: Prisma.DonationBankCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DonationBankPayload>
          }
          createMany: {
            args: Prisma.DonationBankCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DonationBankDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DonationBankPayload>
          }
          update: {
            args: Prisma.DonationBankUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DonationBankPayload>
          }
          deleteMany: {
            args: Prisma.DonationBankDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DonationBankUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DonationBankUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DonationBankPayload>
          }
          aggregate: {
            args: Prisma.DonationBankAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDonationBank>
          }
          groupBy: {
            args: Prisma.DonationBankGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DonationBankGroupByOutputType>[]
          }
          count: {
            args: Prisma.DonationBankCountArgs<ExtArgs>,
            result: $Utils.Optional<DonationBankCountAggregateOutputType> | number
          }
        }
      }
      Site: {
        payload: Prisma.$SitePayload<ExtArgs>
        fields: Prisma.SiteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SiteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SitePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SiteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SitePayload>
          }
          findFirst: {
            args: Prisma.SiteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SitePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SiteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SitePayload>
          }
          findMany: {
            args: Prisma.SiteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SitePayload>[]
          }
          create: {
            args: Prisma.SiteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SitePayload>
          }
          createMany: {
            args: Prisma.SiteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SiteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SitePayload>
          }
          update: {
            args: Prisma.SiteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SitePayload>
          }
          deleteMany: {
            args: Prisma.SiteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SiteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SiteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SitePayload>
          }
          aggregate: {
            args: Prisma.SiteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSite>
          }
          groupBy: {
            args: Prisma.SiteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SiteGroupByOutputType>[]
          }
          count: {
            args: Prisma.SiteCountArgs<ExtArgs>,
            result: $Utils.Optional<SiteCountAggregateOutputType> | number
          }
        }
      }
      HospitalSite: {
        payload: Prisma.$HospitalSitePayload<ExtArgs>
        fields: Prisma.HospitalSiteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HospitalSiteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HospitalSitePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HospitalSiteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HospitalSitePayload>
          }
          findFirst: {
            args: Prisma.HospitalSiteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HospitalSitePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HospitalSiteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HospitalSitePayload>
          }
          findMany: {
            args: Prisma.HospitalSiteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HospitalSitePayload>[]
          }
          create: {
            args: Prisma.HospitalSiteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HospitalSitePayload>
          }
          createMany: {
            args: Prisma.HospitalSiteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.HospitalSiteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HospitalSitePayload>
          }
          update: {
            args: Prisma.HospitalSiteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HospitalSitePayload>
          }
          deleteMany: {
            args: Prisma.HospitalSiteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.HospitalSiteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.HospitalSiteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HospitalSitePayload>
          }
          aggregate: {
            args: Prisma.HospitalSiteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHospitalSite>
          }
          groupBy: {
            args: Prisma.HospitalSiteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HospitalSiteGroupByOutputType>[]
          }
          count: {
            args: Prisma.HospitalSiteCountArgs<ExtArgs>,
            result: $Utils.Optional<HospitalSiteCountAggregateOutputType> | number
          }
        }
      }
      Phone: {
        payload: Prisma.$PhonePayload<ExtArgs>
        fields: Prisma.PhoneFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PhoneFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PhonePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PhoneFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PhonePayload>
          }
          findFirst: {
            args: Prisma.PhoneFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PhonePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PhoneFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PhonePayload>
          }
          findMany: {
            args: Prisma.PhoneFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PhonePayload>[]
          }
          create: {
            args: Prisma.PhoneCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PhonePayload>
          }
          createMany: {
            args: Prisma.PhoneCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PhoneDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PhonePayload>
          }
          update: {
            args: Prisma.PhoneUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PhonePayload>
          }
          deleteMany: {
            args: Prisma.PhoneDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PhoneUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PhoneUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PhonePayload>
          }
          aggregate: {
            args: Prisma.PhoneAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePhone>
          }
          groupBy: {
            args: Prisma.PhoneGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PhoneGroupByOutputType>[]
          }
          count: {
            args: Prisma.PhoneCountArgs<ExtArgs>,
            result: $Utils.Optional<PhoneCountAggregateOutputType> | number
          }
        }
      }
      Photo: {
        payload: Prisma.$PhotoPayload<ExtArgs>
        fields: Prisma.PhotoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PhotoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PhotoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload>
          }
          findFirst: {
            args: Prisma.PhotoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PhotoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload>
          }
          findMany: {
            args: Prisma.PhotoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload>[]
          }
          create: {
            args: Prisma.PhotoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload>
          }
          createMany: {
            args: Prisma.PhotoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PhotoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload>
          }
          update: {
            args: Prisma.PhotoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload>
          }
          deleteMany: {
            args: Prisma.PhotoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PhotoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PhotoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload>
          }
          aggregate: {
            args: Prisma.PhotoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePhoto>
          }
          groupBy: {
            args: Prisma.PhotoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PhotoGroupByOutputType>[]
          }
          count: {
            args: Prisma.PhotoCountArgs<ExtArgs>,
            result: $Utils.Optional<PhotoCountAggregateOutputType> | number
          }
        }
      }
      Star: {
        payload: Prisma.$StarPayload<ExtArgs>
        fields: Prisma.StarFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StarFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StarPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StarFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StarPayload>
          }
          findFirst: {
            args: Prisma.StarFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StarPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StarFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StarPayload>
          }
          findMany: {
            args: Prisma.StarFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StarPayload>[]
          }
          create: {
            args: Prisma.StarCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StarPayload>
          }
          createMany: {
            args: Prisma.StarCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StarDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StarPayload>
          }
          update: {
            args: Prisma.StarUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StarPayload>
          }
          deleteMany: {
            args: Prisma.StarDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StarUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StarUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StarPayload>
          }
          aggregate: {
            args: Prisma.StarAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStar>
          }
          groupBy: {
            args: Prisma.StarGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StarGroupByOutputType>[]
          }
          count: {
            args: Prisma.StarCountArgs<ExtArgs>,
            result: $Utils.Optional<StarCountAggregateOutputType> | number
          }
        }
      }
      Review: {
        payload: Prisma.$ReviewPayload<ExtArgs>
        fields: Prisma.ReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findFirst: {
            args: Prisma.ReviewFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findMany: {
            args: Prisma.ReviewFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          create: {
            args: Prisma.ReviewCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          createMany: {
            args: Prisma.ReviewCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ReviewDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          update: {
            args: Prisma.ReviewUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          deleteMany: {
            args: Prisma.ReviewDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ReviewUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          aggregate: {
            args: Prisma.ReviewAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReview>
          }
          groupBy: {
            args: Prisma.ReviewGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReviewCountArgs<ExtArgs>,
            result: $Utils.Optional<ReviewCountAggregateOutputType> | number
          }
        }
      }
      Status: {
        payload: Prisma.$StatusPayload<ExtArgs>
        fields: Prisma.StatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StatusFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StatusFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          findFirst: {
            args: Prisma.StatusFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StatusFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          findMany: {
            args: Prisma.StatusFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>[]
          }
          create: {
            args: Prisma.StatusCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          createMany: {
            args: Prisma.StatusCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StatusDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          update: {
            args: Prisma.StatusUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          deleteMany: {
            args: Prisma.StatusDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StatusUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StatusUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          aggregate: {
            args: Prisma.StatusAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStatus>
          }
          groupBy: {
            args: Prisma.StatusGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.StatusCountArgs<ExtArgs>,
            result: $Utils.Optional<StatusCountAggregateOutputType> | number
          }
        }
      }
      BookSchedule: {
        payload: Prisma.$BookSchedulePayload<ExtArgs>
        fields: Prisma.BookScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookScheduleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookSchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookScheduleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookSchedulePayload>
          }
          findFirst: {
            args: Prisma.BookScheduleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookSchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookScheduleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookSchedulePayload>
          }
          findMany: {
            args: Prisma.BookScheduleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookSchedulePayload>[]
          }
          create: {
            args: Prisma.BookScheduleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookSchedulePayload>
          }
          createMany: {
            args: Prisma.BookScheduleCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BookScheduleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookSchedulePayload>
          }
          update: {
            args: Prisma.BookScheduleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookSchedulePayload>
          }
          deleteMany: {
            args: Prisma.BookScheduleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BookScheduleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BookScheduleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookSchedulePayload>
          }
          aggregate: {
            args: Prisma.BookScheduleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBookSchedule>
          }
          groupBy: {
            args: Prisma.BookScheduleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BookScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookScheduleCountArgs<ExtArgs>,
            result: $Utils.Optional<BookScheduleCountAggregateOutputType> | number
          }
        }
      }
      Schedule: {
        payload: Prisma.$SchedulePayload<ExtArgs>
        fields: Prisma.ScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScheduleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScheduleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          findFirst: {
            args: Prisma.ScheduleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScheduleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          findMany: {
            args: Prisma.ScheduleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>[]
          }
          create: {
            args: Prisma.ScheduleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          createMany: {
            args: Prisma.ScheduleCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ScheduleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          update: {
            args: Prisma.ScheduleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          deleteMany: {
            args: Prisma.ScheduleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ScheduleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ScheduleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          aggregate: {
            args: Prisma.ScheduleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSchedule>
          }
          groupBy: {
            args: Prisma.ScheduleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScheduleCountArgs<ExtArgs>,
            result: $Utils.Optional<ScheduleCountAggregateOutputType> | number
          }
        }
      }
      ScheduleStatus: {
        payload: Prisma.$ScheduleStatusPayload<ExtArgs>
        fields: Prisma.ScheduleStatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScheduleStatusFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ScheduleStatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScheduleStatusFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ScheduleStatusPayload>
          }
          findFirst: {
            args: Prisma.ScheduleStatusFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ScheduleStatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScheduleStatusFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ScheduleStatusPayload>
          }
          findMany: {
            args: Prisma.ScheduleStatusFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ScheduleStatusPayload>[]
          }
          create: {
            args: Prisma.ScheduleStatusCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ScheduleStatusPayload>
          }
          createMany: {
            args: Prisma.ScheduleStatusCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ScheduleStatusDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ScheduleStatusPayload>
          }
          update: {
            args: Prisma.ScheduleStatusUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ScheduleStatusPayload>
          }
          deleteMany: {
            args: Prisma.ScheduleStatusDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ScheduleStatusUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ScheduleStatusUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ScheduleStatusPayload>
          }
          aggregate: {
            args: Prisma.ScheduleStatusAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateScheduleStatus>
          }
          groupBy: {
            args: Prisma.ScheduleStatusGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ScheduleStatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScheduleStatusCountArgs<ExtArgs>,
            result: $Utils.Optional<ScheduleStatusCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type BloodTypeCountOutputType
   */

  export type BloodTypeCountOutputType = {
    User: number
    DonationBank: number
  }

  export type BloodTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | BloodTypeCountOutputTypeCountUserArgs
    DonationBank?: boolean | BloodTypeCountOutputTypeCountDonationBankArgs
  }

  // Custom InputTypes

  /**
   * BloodTypeCountOutputType without action
   */
  export type BloodTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BloodTypeCountOutputType
     */
    select?: BloodTypeCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * BloodTypeCountOutputType without action
   */
  export type BloodTypeCountOutputTypeCountUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * BloodTypeCountOutputType without action
   */
  export type BloodTypeCountOutputTypeCountDonationBankArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DonationBankWhereInput
  }



  /**
   * Count Type SexCountOutputType
   */

  export type SexCountOutputType = {
    User: number
  }

  export type SexCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | SexCountOutputTypeCountUserArgs
  }

  // Custom InputTypes

  /**
   * SexCountOutputType without action
   */
  export type SexCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SexCountOutputType
     */
    select?: SexCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SexCountOutputType without action
   */
  export type SexCountOutputTypeCountUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }



  /**
   * Count Type AddressCountOutputType
   */

  export type AddressCountOutputType = {
    Hospital: number
    User: number
  }

  export type AddressCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Hospital?: boolean | AddressCountOutputTypeCountHospitalArgs
    User?: boolean | AddressCountOutputTypeCountUserArgs
  }

  // Custom InputTypes

  /**
   * AddressCountOutputType without action
   */
  export type AddressCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddressCountOutputType
     */
    select?: AddressCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AddressCountOutputType without action
   */
  export type AddressCountOutputTypeCountHospitalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HospitalWhereInput
  }


  /**
   * AddressCountOutputType without action
   */
  export type AddressCountOutputTypeCountUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }



  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    Review: number
    Schedule: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Review?: boolean | UserCountOutputTypeCountReviewArgs
    Schedule?: boolean | UserCountOutputTypeCountScheduleArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountScheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
  }



  /**
   * Count Type HospitalCountOutputType
   */

  export type HospitalCountOutputType = {
    HospitalSite: number
    Phone: number
    Photo: number
    Review: number
    Campaign: number
    DonationBank: number
  }

  export type HospitalCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    HospitalSite?: boolean | HospitalCountOutputTypeCountHospitalSiteArgs
    Phone?: boolean | HospitalCountOutputTypeCountPhoneArgs
    Photo?: boolean | HospitalCountOutputTypeCountPhotoArgs
    Review?: boolean | HospitalCountOutputTypeCountReviewArgs
    Campaign?: boolean | HospitalCountOutputTypeCountCampaignArgs
    DonationBank?: boolean | HospitalCountOutputTypeCountDonationBankArgs
  }

  // Custom InputTypes

  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HospitalCountOutputType
     */
    select?: HospitalCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeCountHospitalSiteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HospitalSiteWhereInput
  }


  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeCountPhoneArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PhoneWhereInput
  }


  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeCountPhotoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PhotoWhereInput
  }


  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeCountReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }


  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeCountCampaignArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CampaignWhereInput
  }


  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeCountDonationBankArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DonationBankWhereInput
  }



  /**
   * Count Type SiteCountOutputType
   */

  export type SiteCountOutputType = {
    HospitalSite: number
  }

  export type SiteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    HospitalSite?: boolean | SiteCountOutputTypeCountHospitalSiteArgs
  }

  // Custom InputTypes

  /**
   * SiteCountOutputType without action
   */
  export type SiteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteCountOutputType
     */
    select?: SiteCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SiteCountOutputType without action
   */
  export type SiteCountOutputTypeCountHospitalSiteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HospitalSiteWhereInput
  }



  /**
   * Count Type HospitalSiteCountOutputType
   */

  export type HospitalSiteCountOutputType = {
    BookSchedule: number
  }

  export type HospitalSiteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    BookSchedule?: boolean | HospitalSiteCountOutputTypeCountBookScheduleArgs
  }

  // Custom InputTypes

  /**
   * HospitalSiteCountOutputType without action
   */
  export type HospitalSiteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HospitalSiteCountOutputType
     */
    select?: HospitalSiteCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * HospitalSiteCountOutputType without action
   */
  export type HospitalSiteCountOutputTypeCountBookScheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookScheduleWhereInput
  }



  /**
   * Count Type StarCountOutputType
   */

  export type StarCountOutputType = {
    Review: number
  }

  export type StarCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Review?: boolean | StarCountOutputTypeCountReviewArgs
  }

  // Custom InputTypes

  /**
   * StarCountOutputType without action
   */
  export type StarCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StarCountOutputType
     */
    select?: StarCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * StarCountOutputType without action
   */
  export type StarCountOutputTypeCountReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }



  /**
   * Count Type StatusCountOutputType
   */

  export type StatusCountOutputType = {
    ScheduleStatus: number
  }

  export type StatusCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ScheduleStatus?: boolean | StatusCountOutputTypeCountScheduleStatusArgs
  }

  // Custom InputTypes

  /**
   * StatusCountOutputType without action
   */
  export type StatusCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusCountOutputType
     */
    select?: StatusCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * StatusCountOutputType without action
   */
  export type StatusCountOutputTypeCountScheduleStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleStatusWhereInput
  }



  /**
   * Count Type BookScheduleCountOutputType
   */

  export type BookScheduleCountOutputType = {
    Schedule: number
  }

  export type BookScheduleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Schedule?: boolean | BookScheduleCountOutputTypeCountScheduleArgs
  }

  // Custom InputTypes

  /**
   * BookScheduleCountOutputType without action
   */
  export type BookScheduleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookScheduleCountOutputType
     */
    select?: BookScheduleCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * BookScheduleCountOutputType without action
   */
  export type BookScheduleCountOutputTypeCountScheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
  }



  /**
   * Count Type ScheduleCountOutputType
   */

  export type ScheduleCountOutputType = {
    ScheduleStatus: number
  }

  export type ScheduleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ScheduleStatus?: boolean | ScheduleCountOutputTypeCountScheduleStatusArgs
  }

  // Custom InputTypes

  /**
   * ScheduleCountOutputType without action
   */
  export type ScheduleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleCountOutputType
     */
    select?: ScheduleCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ScheduleCountOutputType without action
   */
  export type ScheduleCountOutputTypeCountScheduleStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleStatusWhereInput
  }



  /**
   * Models
   */

  /**
   * Model BloodType
   */

  export type AggregateBloodType = {
    _count: BloodTypeCountAggregateOutputType | null
    _avg: BloodTypeAvgAggregateOutputType | null
    _sum: BloodTypeSumAggregateOutputType | null
    _min: BloodTypeMinAggregateOutputType | null
    _max: BloodTypeMaxAggregateOutputType | null
  }

  export type BloodTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type BloodTypeSumAggregateOutputType = {
    id: number | null
  }

  export type BloodTypeMinAggregateOutputType = {
    id: number | null
    type: string | null
  }

  export type BloodTypeMaxAggregateOutputType = {
    id: number | null
    type: string | null
  }

  export type BloodTypeCountAggregateOutputType = {
    id: number
    type: number
    _all: number
  }


  export type BloodTypeAvgAggregateInputType = {
    id?: true
  }

  export type BloodTypeSumAggregateInputType = {
    id?: true
  }

  export type BloodTypeMinAggregateInputType = {
    id?: true
    type?: true
  }

  export type BloodTypeMaxAggregateInputType = {
    id?: true
    type?: true
  }

  export type BloodTypeCountAggregateInputType = {
    id?: true
    type?: true
    _all?: true
  }

  export type BloodTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BloodType to aggregate.
     */
    where?: BloodTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BloodTypes to fetch.
     */
    orderBy?: BloodTypeOrderByWithRelationInput | BloodTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BloodTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BloodTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BloodTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BloodTypes
    **/
    _count?: true | BloodTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BloodTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BloodTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BloodTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BloodTypeMaxAggregateInputType
  }

  export type GetBloodTypeAggregateType<T extends BloodTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateBloodType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBloodType[P]>
      : GetScalarType<T[P], AggregateBloodType[P]>
  }




  export type BloodTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BloodTypeWhereInput
    orderBy?: BloodTypeOrderByWithAggregationInput | BloodTypeOrderByWithAggregationInput[]
    by: BloodTypeScalarFieldEnum[] | BloodTypeScalarFieldEnum
    having?: BloodTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BloodTypeCountAggregateInputType | true
    _avg?: BloodTypeAvgAggregateInputType
    _sum?: BloodTypeSumAggregateInputType
    _min?: BloodTypeMinAggregateInputType
    _max?: BloodTypeMaxAggregateInputType
  }

  export type BloodTypeGroupByOutputType = {
    id: number
    type: string
    _count: BloodTypeCountAggregateOutputType | null
    _avg: BloodTypeAvgAggregateOutputType | null
    _sum: BloodTypeSumAggregateOutputType | null
    _min: BloodTypeMinAggregateOutputType | null
    _max: BloodTypeMaxAggregateOutputType | null
  }

  type GetBloodTypeGroupByPayload<T extends BloodTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BloodTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BloodTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BloodTypeGroupByOutputType[P]>
            : GetScalarType<T[P], BloodTypeGroupByOutputType[P]>
        }
      >
    >


  export type BloodTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    User?: boolean | BloodType$UserArgs<ExtArgs>
    DonationBank?: boolean | BloodType$DonationBankArgs<ExtArgs>
    _count?: boolean | BloodTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bloodType"]>

  export type BloodTypeSelectScalar = {
    id?: boolean
    type?: boolean
  }

  export type BloodTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | BloodType$UserArgs<ExtArgs>
    DonationBank?: boolean | BloodType$DonationBankArgs<ExtArgs>
    _count?: boolean | BloodTypeCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $BloodTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BloodType"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>[]
      DonationBank: Prisma.$DonationBankPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      type: string
    }, ExtArgs["result"]["bloodType"]>
    composites: {}
  }


  type BloodTypeGetPayload<S extends boolean | null | undefined | BloodTypeDefaultArgs> = $Result.GetResult<Prisma.$BloodTypePayload, S>

  type BloodTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BloodTypeFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: BloodTypeCountAggregateInputType | true
    }

  export interface BloodTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BloodType'], meta: { name: 'BloodType' } }
    /**
     * Find zero or one BloodType that matches the filter.
     * @param {BloodTypeFindUniqueArgs} args - Arguments to find a BloodType
     * @example
     * // Get one BloodType
     * const bloodType = await prisma.bloodType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BloodTypeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BloodTypeFindUniqueArgs<ExtArgs>>
    ): Prisma__BloodTypeClient<$Result.GetResult<Prisma.$BloodTypePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one BloodType that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BloodTypeFindUniqueOrThrowArgs} args - Arguments to find a BloodType
     * @example
     * // Get one BloodType
     * const bloodType = await prisma.bloodType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BloodTypeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BloodTypeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BloodTypeClient<$Result.GetResult<Prisma.$BloodTypePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first BloodType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BloodTypeFindFirstArgs} args - Arguments to find a BloodType
     * @example
     * // Get one BloodType
     * const bloodType = await prisma.bloodType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BloodTypeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BloodTypeFindFirstArgs<ExtArgs>>
    ): Prisma__BloodTypeClient<$Result.GetResult<Prisma.$BloodTypePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first BloodType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BloodTypeFindFirstOrThrowArgs} args - Arguments to find a BloodType
     * @example
     * // Get one BloodType
     * const bloodType = await prisma.bloodType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BloodTypeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BloodTypeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BloodTypeClient<$Result.GetResult<Prisma.$BloodTypePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more BloodTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BloodTypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BloodTypes
     * const bloodTypes = await prisma.bloodType.findMany()
     * 
     * // Get first 10 BloodTypes
     * const bloodTypes = await prisma.bloodType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bloodTypeWithIdOnly = await prisma.bloodType.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BloodTypeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BloodTypeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BloodTypePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a BloodType.
     * @param {BloodTypeCreateArgs} args - Arguments to create a BloodType.
     * @example
     * // Create one BloodType
     * const BloodType = await prisma.bloodType.create({
     *   data: {
     *     // ... data to create a BloodType
     *   }
     * })
     * 
    **/
    create<T extends BloodTypeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BloodTypeCreateArgs<ExtArgs>>
    ): Prisma__BloodTypeClient<$Result.GetResult<Prisma.$BloodTypePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many BloodTypes.
     *     @param {BloodTypeCreateManyArgs} args - Arguments to create many BloodTypes.
     *     @example
     *     // Create many BloodTypes
     *     const bloodType = await prisma.bloodType.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BloodTypeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BloodTypeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BloodType.
     * @param {BloodTypeDeleteArgs} args - Arguments to delete one BloodType.
     * @example
     * // Delete one BloodType
     * const BloodType = await prisma.bloodType.delete({
     *   where: {
     *     // ... filter to delete one BloodType
     *   }
     * })
     * 
    **/
    delete<T extends BloodTypeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BloodTypeDeleteArgs<ExtArgs>>
    ): Prisma__BloodTypeClient<$Result.GetResult<Prisma.$BloodTypePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one BloodType.
     * @param {BloodTypeUpdateArgs} args - Arguments to update one BloodType.
     * @example
     * // Update one BloodType
     * const bloodType = await prisma.bloodType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BloodTypeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BloodTypeUpdateArgs<ExtArgs>>
    ): Prisma__BloodTypeClient<$Result.GetResult<Prisma.$BloodTypePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more BloodTypes.
     * @param {BloodTypeDeleteManyArgs} args - Arguments to filter BloodTypes to delete.
     * @example
     * // Delete a few BloodTypes
     * const { count } = await prisma.bloodType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BloodTypeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BloodTypeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BloodTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BloodTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BloodTypes
     * const bloodType = await prisma.bloodType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BloodTypeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BloodTypeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BloodType.
     * @param {BloodTypeUpsertArgs} args - Arguments to update or create a BloodType.
     * @example
     * // Update or create a BloodType
     * const bloodType = await prisma.bloodType.upsert({
     *   create: {
     *     // ... data to create a BloodType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BloodType we want to update
     *   }
     * })
    **/
    upsert<T extends BloodTypeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BloodTypeUpsertArgs<ExtArgs>>
    ): Prisma__BloodTypeClient<$Result.GetResult<Prisma.$BloodTypePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of BloodTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BloodTypeCountArgs} args - Arguments to filter BloodTypes to count.
     * @example
     * // Count the number of BloodTypes
     * const count = await prisma.bloodType.count({
     *   where: {
     *     // ... the filter for the BloodTypes we want to count
     *   }
     * })
    **/
    count<T extends BloodTypeCountArgs>(
      args?: Subset<T, BloodTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BloodTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BloodType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BloodTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BloodTypeAggregateArgs>(args: Subset<T, BloodTypeAggregateArgs>): Prisma.PrismaPromise<GetBloodTypeAggregateType<T>>

    /**
     * Group by BloodType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BloodTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BloodTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BloodTypeGroupByArgs['orderBy'] }
        : { orderBy?: BloodTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BloodTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBloodTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BloodType model
   */
  readonly fields: BloodTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BloodType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BloodTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends BloodType$UserArgs<ExtArgs> = {}>(args?: Subset<T, BloodType$UserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'> | Null>;

    DonationBank<T extends BloodType$DonationBankArgs<ExtArgs> = {}>(args?: Subset<T, BloodType$DonationBankArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DonationBankPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the BloodType model
   */ 
  interface BloodTypeFieldRefs {
    readonly id: FieldRef<"BloodType", 'Int'>
    readonly type: FieldRef<"BloodType", 'String'>
  }
    

  // Custom InputTypes

  /**
   * BloodType findUnique
   */
  export type BloodTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BloodType
     */
    select?: BloodTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BloodTypeInclude<ExtArgs> | null
    /**
     * Filter, which BloodType to fetch.
     */
    where: BloodTypeWhereUniqueInput
  }


  /**
   * BloodType findUniqueOrThrow
   */
  export type BloodTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BloodType
     */
    select?: BloodTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BloodTypeInclude<ExtArgs> | null
    /**
     * Filter, which BloodType to fetch.
     */
    where: BloodTypeWhereUniqueInput
  }


  /**
   * BloodType findFirst
   */
  export type BloodTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BloodType
     */
    select?: BloodTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BloodTypeInclude<ExtArgs> | null
    /**
     * Filter, which BloodType to fetch.
     */
    where?: BloodTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BloodTypes to fetch.
     */
    orderBy?: BloodTypeOrderByWithRelationInput | BloodTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BloodTypes.
     */
    cursor?: BloodTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BloodTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BloodTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BloodTypes.
     */
    distinct?: BloodTypeScalarFieldEnum | BloodTypeScalarFieldEnum[]
  }


  /**
   * BloodType findFirstOrThrow
   */
  export type BloodTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BloodType
     */
    select?: BloodTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BloodTypeInclude<ExtArgs> | null
    /**
     * Filter, which BloodType to fetch.
     */
    where?: BloodTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BloodTypes to fetch.
     */
    orderBy?: BloodTypeOrderByWithRelationInput | BloodTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BloodTypes.
     */
    cursor?: BloodTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BloodTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BloodTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BloodTypes.
     */
    distinct?: BloodTypeScalarFieldEnum | BloodTypeScalarFieldEnum[]
  }


  /**
   * BloodType findMany
   */
  export type BloodTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BloodType
     */
    select?: BloodTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BloodTypeInclude<ExtArgs> | null
    /**
     * Filter, which BloodTypes to fetch.
     */
    where?: BloodTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BloodTypes to fetch.
     */
    orderBy?: BloodTypeOrderByWithRelationInput | BloodTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BloodTypes.
     */
    cursor?: BloodTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BloodTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BloodTypes.
     */
    skip?: number
    distinct?: BloodTypeScalarFieldEnum | BloodTypeScalarFieldEnum[]
  }


  /**
   * BloodType create
   */
  export type BloodTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BloodType
     */
    select?: BloodTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BloodTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a BloodType.
     */
    data: XOR<BloodTypeCreateInput, BloodTypeUncheckedCreateInput>
  }


  /**
   * BloodType createMany
   */
  export type BloodTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BloodTypes.
     */
    data: BloodTypeCreateManyInput | BloodTypeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * BloodType update
   */
  export type BloodTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BloodType
     */
    select?: BloodTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BloodTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a BloodType.
     */
    data: XOR<BloodTypeUpdateInput, BloodTypeUncheckedUpdateInput>
    /**
     * Choose, which BloodType to update.
     */
    where: BloodTypeWhereUniqueInput
  }


  /**
   * BloodType updateMany
   */
  export type BloodTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BloodTypes.
     */
    data: XOR<BloodTypeUpdateManyMutationInput, BloodTypeUncheckedUpdateManyInput>
    /**
     * Filter which BloodTypes to update
     */
    where?: BloodTypeWhereInput
  }


  /**
   * BloodType upsert
   */
  export type BloodTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BloodType
     */
    select?: BloodTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BloodTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the BloodType to update in case it exists.
     */
    where: BloodTypeWhereUniqueInput
    /**
     * In case the BloodType found by the `where` argument doesn't exist, create a new BloodType with this data.
     */
    create: XOR<BloodTypeCreateInput, BloodTypeUncheckedCreateInput>
    /**
     * In case the BloodType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BloodTypeUpdateInput, BloodTypeUncheckedUpdateInput>
  }


  /**
   * BloodType delete
   */
  export type BloodTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BloodType
     */
    select?: BloodTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BloodTypeInclude<ExtArgs> | null
    /**
     * Filter which BloodType to delete.
     */
    where: BloodTypeWhereUniqueInput
  }


  /**
   * BloodType deleteMany
   */
  export type BloodTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BloodTypes to delete
     */
    where?: BloodTypeWhereInput
  }


  /**
   * BloodType.User
   */
  export type BloodType$UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * BloodType.DonationBank
   */
  export type BloodType$DonationBankArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationBank
     */
    select?: DonationBankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DonationBankInclude<ExtArgs> | null
    where?: DonationBankWhereInput
    orderBy?: DonationBankOrderByWithRelationInput | DonationBankOrderByWithRelationInput[]
    cursor?: DonationBankWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DonationBankScalarFieldEnum | DonationBankScalarFieldEnum[]
  }


  /**
   * BloodType without action
   */
  export type BloodTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BloodType
     */
    select?: BloodTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BloodTypeInclude<ExtArgs> | null
  }



  /**
   * Model Sex
   */

  export type AggregateSex = {
    _count: SexCountAggregateOutputType | null
    _avg: SexAvgAggregateOutputType | null
    _sum: SexSumAggregateOutputType | null
    _min: SexMinAggregateOutputType | null
    _max: SexMaxAggregateOutputType | null
  }

  export type SexAvgAggregateOutputType = {
    id: number | null
  }

  export type SexSumAggregateOutputType = {
    id: number | null
  }

  export type SexMinAggregateOutputType = {
    id: number | null
    sex: string | null
  }

  export type SexMaxAggregateOutputType = {
    id: number | null
    sex: string | null
  }

  export type SexCountAggregateOutputType = {
    id: number
    sex: number
    _all: number
  }


  export type SexAvgAggregateInputType = {
    id?: true
  }

  export type SexSumAggregateInputType = {
    id?: true
  }

  export type SexMinAggregateInputType = {
    id?: true
    sex?: true
  }

  export type SexMaxAggregateInputType = {
    id?: true
    sex?: true
  }

  export type SexCountAggregateInputType = {
    id?: true
    sex?: true
    _all?: true
  }

  export type SexAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sex to aggregate.
     */
    where?: SexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sexes to fetch.
     */
    orderBy?: SexOrderByWithRelationInput | SexOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sexes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sexes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sexes
    **/
    _count?: true | SexCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SexAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SexSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SexMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SexMaxAggregateInputType
  }

  export type GetSexAggregateType<T extends SexAggregateArgs> = {
        [P in keyof T & keyof AggregateSex]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSex[P]>
      : GetScalarType<T[P], AggregateSex[P]>
  }




  export type SexGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SexWhereInput
    orderBy?: SexOrderByWithAggregationInput | SexOrderByWithAggregationInput[]
    by: SexScalarFieldEnum[] | SexScalarFieldEnum
    having?: SexScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SexCountAggregateInputType | true
    _avg?: SexAvgAggregateInputType
    _sum?: SexSumAggregateInputType
    _min?: SexMinAggregateInputType
    _max?: SexMaxAggregateInputType
  }

  export type SexGroupByOutputType = {
    id: number
    sex: string
    _count: SexCountAggregateOutputType | null
    _avg: SexAvgAggregateOutputType | null
    _sum: SexSumAggregateOutputType | null
    _min: SexMinAggregateOutputType | null
    _max: SexMaxAggregateOutputType | null
  }

  type GetSexGroupByPayload<T extends SexGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SexGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SexGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SexGroupByOutputType[P]>
            : GetScalarType<T[P], SexGroupByOutputType[P]>
        }
      >
    >


  export type SexSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sex?: boolean
    User?: boolean | Sex$UserArgs<ExtArgs>
    _count?: boolean | SexCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sex"]>

  export type SexSelectScalar = {
    id?: boolean
    sex?: boolean
  }

  export type SexInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | Sex$UserArgs<ExtArgs>
    _count?: boolean | SexCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SexPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sex"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sex: string
    }, ExtArgs["result"]["sex"]>
    composites: {}
  }


  type SexGetPayload<S extends boolean | null | undefined | SexDefaultArgs> = $Result.GetResult<Prisma.$SexPayload, S>

  type SexCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SexFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: SexCountAggregateInputType | true
    }

  export interface SexDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sex'], meta: { name: 'Sex' } }
    /**
     * Find zero or one Sex that matches the filter.
     * @param {SexFindUniqueArgs} args - Arguments to find a Sex
     * @example
     * // Get one Sex
     * const sex = await prisma.sex.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SexFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SexFindUniqueArgs<ExtArgs>>
    ): Prisma__SexClient<$Result.GetResult<Prisma.$SexPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Sex that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SexFindUniqueOrThrowArgs} args - Arguments to find a Sex
     * @example
     * // Get one Sex
     * const sex = await prisma.sex.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SexFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SexFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SexClient<$Result.GetResult<Prisma.$SexPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Sex that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SexFindFirstArgs} args - Arguments to find a Sex
     * @example
     * // Get one Sex
     * const sex = await prisma.sex.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SexFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SexFindFirstArgs<ExtArgs>>
    ): Prisma__SexClient<$Result.GetResult<Prisma.$SexPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Sex that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SexFindFirstOrThrowArgs} args - Arguments to find a Sex
     * @example
     * // Get one Sex
     * const sex = await prisma.sex.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SexFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SexFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SexClient<$Result.GetResult<Prisma.$SexPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Sexes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SexFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sexes
     * const sexes = await prisma.sex.findMany()
     * 
     * // Get first 10 Sexes
     * const sexes = await prisma.sex.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sexWithIdOnly = await prisma.sex.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SexFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SexFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SexPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Sex.
     * @param {SexCreateArgs} args - Arguments to create a Sex.
     * @example
     * // Create one Sex
     * const Sex = await prisma.sex.create({
     *   data: {
     *     // ... data to create a Sex
     *   }
     * })
     * 
    **/
    create<T extends SexCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SexCreateArgs<ExtArgs>>
    ): Prisma__SexClient<$Result.GetResult<Prisma.$SexPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Sexes.
     *     @param {SexCreateManyArgs} args - Arguments to create many Sexes.
     *     @example
     *     // Create many Sexes
     *     const sex = await prisma.sex.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SexCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SexCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sex.
     * @param {SexDeleteArgs} args - Arguments to delete one Sex.
     * @example
     * // Delete one Sex
     * const Sex = await prisma.sex.delete({
     *   where: {
     *     // ... filter to delete one Sex
     *   }
     * })
     * 
    **/
    delete<T extends SexDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SexDeleteArgs<ExtArgs>>
    ): Prisma__SexClient<$Result.GetResult<Prisma.$SexPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Sex.
     * @param {SexUpdateArgs} args - Arguments to update one Sex.
     * @example
     * // Update one Sex
     * const sex = await prisma.sex.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SexUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SexUpdateArgs<ExtArgs>>
    ): Prisma__SexClient<$Result.GetResult<Prisma.$SexPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Sexes.
     * @param {SexDeleteManyArgs} args - Arguments to filter Sexes to delete.
     * @example
     * // Delete a few Sexes
     * const { count } = await prisma.sex.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SexDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SexDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sexes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SexUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sexes
     * const sex = await prisma.sex.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SexUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SexUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sex.
     * @param {SexUpsertArgs} args - Arguments to update or create a Sex.
     * @example
     * // Update or create a Sex
     * const sex = await prisma.sex.upsert({
     *   create: {
     *     // ... data to create a Sex
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sex we want to update
     *   }
     * })
    **/
    upsert<T extends SexUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SexUpsertArgs<ExtArgs>>
    ): Prisma__SexClient<$Result.GetResult<Prisma.$SexPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Sexes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SexCountArgs} args - Arguments to filter Sexes to count.
     * @example
     * // Count the number of Sexes
     * const count = await prisma.sex.count({
     *   where: {
     *     // ... the filter for the Sexes we want to count
     *   }
     * })
    **/
    count<T extends SexCountArgs>(
      args?: Subset<T, SexCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SexCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sex.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SexAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SexAggregateArgs>(args: Subset<T, SexAggregateArgs>): Prisma.PrismaPromise<GetSexAggregateType<T>>

    /**
     * Group by Sex.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SexGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SexGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SexGroupByArgs['orderBy'] }
        : { orderBy?: SexGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SexGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSexGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sex model
   */
  readonly fields: SexFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sex.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SexClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends Sex$UserArgs<ExtArgs> = {}>(args?: Subset<T, Sex$UserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Sex model
   */ 
  interface SexFieldRefs {
    readonly id: FieldRef<"Sex", 'Int'>
    readonly sex: FieldRef<"Sex", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Sex findUnique
   */
  export type SexFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sex
     */
    select?: SexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SexInclude<ExtArgs> | null
    /**
     * Filter, which Sex to fetch.
     */
    where: SexWhereUniqueInput
  }


  /**
   * Sex findUniqueOrThrow
   */
  export type SexFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sex
     */
    select?: SexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SexInclude<ExtArgs> | null
    /**
     * Filter, which Sex to fetch.
     */
    where: SexWhereUniqueInput
  }


  /**
   * Sex findFirst
   */
  export type SexFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sex
     */
    select?: SexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SexInclude<ExtArgs> | null
    /**
     * Filter, which Sex to fetch.
     */
    where?: SexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sexes to fetch.
     */
    orderBy?: SexOrderByWithRelationInput | SexOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sexes.
     */
    cursor?: SexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sexes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sexes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sexes.
     */
    distinct?: SexScalarFieldEnum | SexScalarFieldEnum[]
  }


  /**
   * Sex findFirstOrThrow
   */
  export type SexFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sex
     */
    select?: SexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SexInclude<ExtArgs> | null
    /**
     * Filter, which Sex to fetch.
     */
    where?: SexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sexes to fetch.
     */
    orderBy?: SexOrderByWithRelationInput | SexOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sexes.
     */
    cursor?: SexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sexes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sexes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sexes.
     */
    distinct?: SexScalarFieldEnum | SexScalarFieldEnum[]
  }


  /**
   * Sex findMany
   */
  export type SexFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sex
     */
    select?: SexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SexInclude<ExtArgs> | null
    /**
     * Filter, which Sexes to fetch.
     */
    where?: SexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sexes to fetch.
     */
    orderBy?: SexOrderByWithRelationInput | SexOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sexes.
     */
    cursor?: SexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sexes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sexes.
     */
    skip?: number
    distinct?: SexScalarFieldEnum | SexScalarFieldEnum[]
  }


  /**
   * Sex create
   */
  export type SexCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sex
     */
    select?: SexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SexInclude<ExtArgs> | null
    /**
     * The data needed to create a Sex.
     */
    data: XOR<SexCreateInput, SexUncheckedCreateInput>
  }


  /**
   * Sex createMany
   */
  export type SexCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sexes.
     */
    data: SexCreateManyInput | SexCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Sex update
   */
  export type SexUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sex
     */
    select?: SexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SexInclude<ExtArgs> | null
    /**
     * The data needed to update a Sex.
     */
    data: XOR<SexUpdateInput, SexUncheckedUpdateInput>
    /**
     * Choose, which Sex to update.
     */
    where: SexWhereUniqueInput
  }


  /**
   * Sex updateMany
   */
  export type SexUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sexes.
     */
    data: XOR<SexUpdateManyMutationInput, SexUncheckedUpdateManyInput>
    /**
     * Filter which Sexes to update
     */
    where?: SexWhereInput
  }


  /**
   * Sex upsert
   */
  export type SexUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sex
     */
    select?: SexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SexInclude<ExtArgs> | null
    /**
     * The filter to search for the Sex to update in case it exists.
     */
    where: SexWhereUniqueInput
    /**
     * In case the Sex found by the `where` argument doesn't exist, create a new Sex with this data.
     */
    create: XOR<SexCreateInput, SexUncheckedCreateInput>
    /**
     * In case the Sex was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SexUpdateInput, SexUncheckedUpdateInput>
  }


  /**
   * Sex delete
   */
  export type SexDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sex
     */
    select?: SexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SexInclude<ExtArgs> | null
    /**
     * Filter which Sex to delete.
     */
    where: SexWhereUniqueInput
  }


  /**
   * Sex deleteMany
   */
  export type SexDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sexes to delete
     */
    where?: SexWhereInput
  }


  /**
   * Sex.User
   */
  export type Sex$UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * Sex without action
   */
  export type SexDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sex
     */
    select?: SexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SexInclude<ExtArgs> | null
  }



  /**
   * Model Address
   */

  export type AggregateAddress = {
    _count: AddressCountAggregateOutputType | null
    _avg: AddressAvgAggregateOutputType | null
    _sum: AddressSumAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  export type AddressAvgAggregateOutputType = {
    id: number | null
  }

  export type AddressSumAggregateOutputType = {
    id: number | null
  }

  export type AddressMinAggregateOutputType = {
    id: number | null
    cep: string | null
    uf: string | null
    city: string | null
    neighborhood: string | null
    street: string | null
    number: string | null
    complement: string | null
  }

  export type AddressMaxAggregateOutputType = {
    id: number | null
    cep: string | null
    uf: string | null
    city: string | null
    neighborhood: string | null
    street: string | null
    number: string | null
    complement: string | null
  }

  export type AddressCountAggregateOutputType = {
    id: number
    cep: number
    uf: number
    city: number
    neighborhood: number
    street: number
    number: number
    complement: number
    _all: number
  }


  export type AddressAvgAggregateInputType = {
    id?: true
  }

  export type AddressSumAggregateInputType = {
    id?: true
  }

  export type AddressMinAggregateInputType = {
    id?: true
    cep?: true
    uf?: true
    city?: true
    neighborhood?: true
    street?: true
    number?: true
    complement?: true
  }

  export type AddressMaxAggregateInputType = {
    id?: true
    cep?: true
    uf?: true
    city?: true
    neighborhood?: true
    street?: true
    number?: true
    complement?: true
  }

  export type AddressCountAggregateInputType = {
    id?: true
    cep?: true
    uf?: true
    city?: true
    neighborhood?: true
    street?: true
    number?: true
    complement?: true
    _all?: true
  }

  export type AddressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Address to aggregate.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Addresses
    **/
    _count?: true | AddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AddressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AddressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AddressMaxAggregateInputType
  }

  export type GetAddressAggregateType<T extends AddressAggregateArgs> = {
        [P in keyof T & keyof AggregateAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAddress[P]>
      : GetScalarType<T[P], AggregateAddress[P]>
  }




  export type AddressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AddressWhereInput
    orderBy?: AddressOrderByWithAggregationInput | AddressOrderByWithAggregationInput[]
    by: AddressScalarFieldEnum[] | AddressScalarFieldEnum
    having?: AddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AddressCountAggregateInputType | true
    _avg?: AddressAvgAggregateInputType
    _sum?: AddressSumAggregateInputType
    _min?: AddressMinAggregateInputType
    _max?: AddressMaxAggregateInputType
  }

  export type AddressGroupByOutputType = {
    id: number
    cep: string
    uf: string
    city: string
    neighborhood: string
    street: string
    number: string
    complement: string | null
    _count: AddressCountAggregateOutputType | null
    _avg: AddressAvgAggregateOutputType | null
    _sum: AddressSumAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  type GetAddressGroupByPayload<T extends AddressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AddressGroupByOutputType[P]>
            : GetScalarType<T[P], AddressGroupByOutputType[P]>
        }
      >
    >


  export type AddressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cep?: boolean
    uf?: boolean
    city?: boolean
    neighborhood?: boolean
    street?: boolean
    number?: boolean
    complement?: boolean
    Hospital?: boolean | Address$HospitalArgs<ExtArgs>
    User?: boolean | Address$UserArgs<ExtArgs>
    _count?: boolean | AddressCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["address"]>

  export type AddressSelectScalar = {
    id?: boolean
    cep?: boolean
    uf?: boolean
    city?: boolean
    neighborhood?: boolean
    street?: boolean
    number?: boolean
    complement?: boolean
  }

  export type AddressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Hospital?: boolean | Address$HospitalArgs<ExtArgs>
    User?: boolean | Address$UserArgs<ExtArgs>
    _count?: boolean | AddressCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AddressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Address"
    objects: {
      Hospital: Prisma.$HospitalPayload<ExtArgs>[]
      User: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      cep: string
      uf: string
      city: string
      neighborhood: string
      street: string
      number: string
      complement: string | null
    }, ExtArgs["result"]["address"]>
    composites: {}
  }


  type AddressGetPayload<S extends boolean | null | undefined | AddressDefaultArgs> = $Result.GetResult<Prisma.$AddressPayload, S>

  type AddressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AddressFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: AddressCountAggregateInputType | true
    }

  export interface AddressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Address'], meta: { name: 'Address' } }
    /**
     * Find zero or one Address that matches the filter.
     * @param {AddressFindUniqueArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AddressFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AddressFindUniqueArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Address that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AddressFindUniqueOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AddressFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Address that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AddressFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressFindFirstArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Address that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AddressFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Addresses
     * const addresses = await prisma.address.findMany()
     * 
     * // Get first 10 Addresses
     * const addresses = await prisma.address.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const addressWithIdOnly = await prisma.address.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AddressFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Address.
     * @param {AddressCreateArgs} args - Arguments to create a Address.
     * @example
     * // Create one Address
     * const Address = await prisma.address.create({
     *   data: {
     *     // ... data to create a Address
     *   }
     * })
     * 
    **/
    create<T extends AddressCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AddressCreateArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Addresses.
     *     @param {AddressCreateManyArgs} args - Arguments to create many Addresses.
     *     @example
     *     // Create many Addresses
     *     const address = await prisma.address.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AddressCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Address.
     * @param {AddressDeleteArgs} args - Arguments to delete one Address.
     * @example
     * // Delete one Address
     * const Address = await prisma.address.delete({
     *   where: {
     *     // ... filter to delete one Address
     *   }
     * })
     * 
    **/
    delete<T extends AddressDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AddressDeleteArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Address.
     * @param {AddressUpdateArgs} args - Arguments to update one Address.
     * @example
     * // Update one Address
     * const address = await prisma.address.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AddressUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AddressUpdateArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Addresses.
     * @param {AddressDeleteManyArgs} args - Arguments to filter Addresses to delete.
     * @example
     * // Delete a few Addresses
     * const { count } = await prisma.address.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AddressDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AddressUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AddressUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Address.
     * @param {AddressUpsertArgs} args - Arguments to update or create a Address.
     * @example
     * // Update or create a Address
     * const address = await prisma.address.upsert({
     *   create: {
     *     // ... data to create a Address
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Address we want to update
     *   }
     * })
    **/
    upsert<T extends AddressUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AddressUpsertArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressCountArgs} args - Arguments to filter Addresses to count.
     * @example
     * // Count the number of Addresses
     * const count = await prisma.address.count({
     *   where: {
     *     // ... the filter for the Addresses we want to count
     *   }
     * })
    **/
    count<T extends AddressCountArgs>(
      args?: Subset<T, AddressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AddressAggregateArgs>(args: Subset<T, AddressAggregateArgs>): Prisma.PrismaPromise<GetAddressAggregateType<T>>

    /**
     * Group by Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AddressGroupByArgs['orderBy'] }
        : { orderBy?: AddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Address model
   */
  readonly fields: AddressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Address.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AddressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Hospital<T extends Address$HospitalArgs<ExtArgs> = {}>(args?: Subset<T, Address$HospitalArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, 'findMany'> | Null>;

    User<T extends Address$UserArgs<ExtArgs> = {}>(args?: Subset<T, Address$UserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Address model
   */ 
  interface AddressFieldRefs {
    readonly id: FieldRef<"Address", 'Int'>
    readonly cep: FieldRef<"Address", 'String'>
    readonly uf: FieldRef<"Address", 'String'>
    readonly city: FieldRef<"Address", 'String'>
    readonly neighborhood: FieldRef<"Address", 'String'>
    readonly street: FieldRef<"Address", 'String'>
    readonly number: FieldRef<"Address", 'String'>
    readonly complement: FieldRef<"Address", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Address findUnique
   */
  export type AddressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }


  /**
   * Address findUniqueOrThrow
   */
  export type AddressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }


  /**
   * Address findFirst
   */
  export type AddressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }


  /**
   * Address findFirstOrThrow
   */
  export type AddressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }


  /**
   * Address findMany
   */
  export type AddressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Addresses to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }


  /**
   * Address create
   */
  export type AddressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to create a Address.
     */
    data: XOR<AddressCreateInput, AddressUncheckedCreateInput>
  }


  /**
   * Address createMany
   */
  export type AddressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Addresses.
     */
    data: AddressCreateManyInput | AddressCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Address update
   */
  export type AddressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to update a Address.
     */
    data: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
    /**
     * Choose, which Address to update.
     */
    where: AddressWhereUniqueInput
  }


  /**
   * Address updateMany
   */
  export type AddressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Addresses.
     */
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyInput>
    /**
     * Filter which Addresses to update
     */
    where?: AddressWhereInput
  }


  /**
   * Address upsert
   */
  export type AddressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The filter to search for the Address to update in case it exists.
     */
    where: AddressWhereUniqueInput
    /**
     * In case the Address found by the `where` argument doesn't exist, create a new Address with this data.
     */
    create: XOR<AddressCreateInput, AddressUncheckedCreateInput>
    /**
     * In case the Address was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
  }


  /**
   * Address delete
   */
  export type AddressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter which Address to delete.
     */
    where: AddressWhereUniqueInput
  }


  /**
   * Address deleteMany
   */
  export type AddressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Addresses to delete
     */
    where?: AddressWhereInput
  }


  /**
   * Address.Hospital
   */
  export type Address$HospitalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HospitalInclude<ExtArgs> | null
    where?: HospitalWhereInput
    orderBy?: HospitalOrderByWithRelationInput | HospitalOrderByWithRelationInput[]
    cursor?: HospitalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HospitalScalarFieldEnum | HospitalScalarFieldEnum[]
  }


  /**
   * Address.User
   */
  export type Address$UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * Address without action
   */
  export type AddressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
  }



  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    weight: Decimal | null
    idAddress: number | null
    idSex: number | null
    idBloodType: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    weight: Decimal | null
    idAddress: number | null
    idSex: number | null
    idBloodType: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    cpf: string | null
    dateOfBirth: Date | null
    password: string | null
    weight: Decimal | null
    email: string | null
    photoUrl: string | null
    phone: string | null
    passwordResetToken: string | null
    passwordResetExpires: Date | null
    idAddress: number | null
    idSex: number | null
    idBloodType: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    cpf: string | null
    dateOfBirth: Date | null
    password: string | null
    weight: Decimal | null
    email: string | null
    photoUrl: string | null
    phone: string | null
    passwordResetToken: string | null
    passwordResetExpires: Date | null
    idAddress: number | null
    idSex: number | null
    idBloodType: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    cpf: number
    dateOfBirth: number
    password: number
    weight: number
    email: number
    photoUrl: number
    phone: number
    passwordResetToken: number
    passwordResetExpires: number
    idAddress: number
    idSex: number
    idBloodType: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    weight?: true
    idAddress?: true
    idSex?: true
    idBloodType?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    weight?: true
    idAddress?: true
    idSex?: true
    idBloodType?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    cpf?: true
    dateOfBirth?: true
    password?: true
    weight?: true
    email?: true
    photoUrl?: true
    phone?: true
    passwordResetToken?: true
    passwordResetExpires?: true
    idAddress?: true
    idSex?: true
    idBloodType?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    cpf?: true
    dateOfBirth?: true
    password?: true
    weight?: true
    email?: true
    photoUrl?: true
    phone?: true
    passwordResetToken?: true
    passwordResetExpires?: true
    idAddress?: true
    idSex?: true
    idBloodType?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    cpf?: true
    dateOfBirth?: true
    password?: true
    weight?: true
    email?: true
    photoUrl?: true
    phone?: true
    passwordResetToken?: true
    passwordResetExpires?: true
    idAddress?: true
    idSex?: true
    idBloodType?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    cpf: string
    dateOfBirth: Date
    password: string
    weight: Decimal
    email: string
    photoUrl: string | null
    phone: string
    passwordResetToken: string | null
    passwordResetExpires: Date | null
    idAddress: number
    idSex: number
    idBloodType: number
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    cpf?: boolean
    dateOfBirth?: boolean
    password?: boolean
    weight?: boolean
    email?: boolean
    photoUrl?: boolean
    phone?: boolean
    passwordResetToken?: boolean
    passwordResetExpires?: boolean
    idAddress?: boolean
    idSex?: boolean
    idBloodType?: boolean
    Address?: boolean | AddressDefaultArgs<ExtArgs>
    Sex?: boolean | SexDefaultArgs<ExtArgs>
    BloodType?: boolean | BloodTypeDefaultArgs<ExtArgs>
    Review?: boolean | User$ReviewArgs<ExtArgs>
    Schedule?: boolean | User$ScheduleArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    cpf?: boolean
    dateOfBirth?: boolean
    password?: boolean
    weight?: boolean
    email?: boolean
    photoUrl?: boolean
    phone?: boolean
    passwordResetToken?: boolean
    passwordResetExpires?: boolean
    idAddress?: boolean
    idSex?: boolean
    idBloodType?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Address?: boolean | AddressDefaultArgs<ExtArgs>
    Sex?: boolean | SexDefaultArgs<ExtArgs>
    BloodType?: boolean | BloodTypeDefaultArgs<ExtArgs>
    Review?: boolean | User$ReviewArgs<ExtArgs>
    Schedule?: boolean | User$ScheduleArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      Address: Prisma.$AddressPayload<ExtArgs>
      Sex: Prisma.$SexPayload<ExtArgs>
      BloodType: Prisma.$BloodTypePayload<ExtArgs>
      Review: Prisma.$ReviewPayload<ExtArgs>[]
      Schedule: Prisma.$SchedulePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      cpf: string
      dateOfBirth: Date
      password: string
      weight: Prisma.Decimal
      email: string
      photoUrl: string | null
      phone: string
      passwordResetToken: string | null
      passwordResetExpires: Date | null
      idAddress: number
      idSex: number
      idBloodType: number
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Address<T extends AddressDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AddressDefaultArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Sex<T extends SexDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SexDefaultArgs<ExtArgs>>): Prisma__SexClient<$Result.GetResult<Prisma.$SexPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    BloodType<T extends BloodTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BloodTypeDefaultArgs<ExtArgs>>): Prisma__BloodTypeClient<$Result.GetResult<Prisma.$BloodTypePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Review<T extends User$ReviewArgs<ExtArgs> = {}>(args?: Subset<T, User$ReviewArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findMany'> | Null>;

    Schedule<T extends User$ScheduleArgs<ExtArgs> = {}>(args?: Subset<T, User$ScheduleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly cpf: FieldRef<"User", 'String'>
    readonly dateOfBirth: FieldRef<"User", 'DateTime'>
    readonly password: FieldRef<"User", 'String'>
    readonly weight: FieldRef<"User", 'Decimal'>
    readonly email: FieldRef<"User", 'String'>
    readonly photoUrl: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly passwordResetToken: FieldRef<"User", 'String'>
    readonly passwordResetExpires: FieldRef<"User", 'DateTime'>
    readonly idAddress: FieldRef<"User", 'Int'>
    readonly idSex: FieldRef<"User", 'Int'>
    readonly idBloodType: FieldRef<"User", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.Review
   */
  export type User$ReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }


  /**
   * User.Schedule
   */
  export type User$ScheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleInclude<ExtArgs> | null
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    cursor?: ScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Hospital
   */

  export type AggregateHospital = {
    _count: HospitalCountAggregateOutputType | null
    _avg: HospitalAvgAggregateOutputType | null
    _sum: HospitalSumAggregateOutputType | null
    _min: HospitalMinAggregateOutputType | null
    _max: HospitalMaxAggregateOutputType | null
  }

  export type HospitalAvgAggregateOutputType = {
    id: number | null
    idAddress: number | null
  }

  export type HospitalSumAggregateOutputType = {
    id: number | null
    idAddress: number | null
  }

  export type HospitalMinAggregateOutputType = {
    id: number | null
    name: string | null
    cnpj: string | null
    email: string | null
    websiteUrl: string | null
    password: string | null
    idAddress: number | null
  }

  export type HospitalMaxAggregateOutputType = {
    id: number | null
    name: string | null
    cnpj: string | null
    email: string | null
    websiteUrl: string | null
    password: string | null
    idAddress: number | null
  }

  export type HospitalCountAggregateOutputType = {
    id: number
    name: number
    cnpj: number
    email: number
    websiteUrl: number
    password: number
    idAddress: number
    _all: number
  }


  export type HospitalAvgAggregateInputType = {
    id?: true
    idAddress?: true
  }

  export type HospitalSumAggregateInputType = {
    id?: true
    idAddress?: true
  }

  export type HospitalMinAggregateInputType = {
    id?: true
    name?: true
    cnpj?: true
    email?: true
    websiteUrl?: true
    password?: true
    idAddress?: true
  }

  export type HospitalMaxAggregateInputType = {
    id?: true
    name?: true
    cnpj?: true
    email?: true
    websiteUrl?: true
    password?: true
    idAddress?: true
  }

  export type HospitalCountAggregateInputType = {
    id?: true
    name?: true
    cnpj?: true
    email?: true
    websiteUrl?: true
    password?: true
    idAddress?: true
    _all?: true
  }

  export type HospitalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Hospital to aggregate.
     */
    where?: HospitalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hospitals to fetch.
     */
    orderBy?: HospitalOrderByWithRelationInput | HospitalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HospitalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hospitals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hospitals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Hospitals
    **/
    _count?: true | HospitalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HospitalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HospitalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HospitalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HospitalMaxAggregateInputType
  }

  export type GetHospitalAggregateType<T extends HospitalAggregateArgs> = {
        [P in keyof T & keyof AggregateHospital]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHospital[P]>
      : GetScalarType<T[P], AggregateHospital[P]>
  }




  export type HospitalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HospitalWhereInput
    orderBy?: HospitalOrderByWithAggregationInput | HospitalOrderByWithAggregationInput[]
    by: HospitalScalarFieldEnum[] | HospitalScalarFieldEnum
    having?: HospitalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HospitalCountAggregateInputType | true
    _avg?: HospitalAvgAggregateInputType
    _sum?: HospitalSumAggregateInputType
    _min?: HospitalMinAggregateInputType
    _max?: HospitalMaxAggregateInputType
  }

  export type HospitalGroupByOutputType = {
    id: number
    name: string
    cnpj: string
    email: string
    websiteUrl: string | null
    password: string
    idAddress: number
    _count: HospitalCountAggregateOutputType | null
    _avg: HospitalAvgAggregateOutputType | null
    _sum: HospitalSumAggregateOutputType | null
    _min: HospitalMinAggregateOutputType | null
    _max: HospitalMaxAggregateOutputType | null
  }

  type GetHospitalGroupByPayload<T extends HospitalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HospitalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HospitalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HospitalGroupByOutputType[P]>
            : GetScalarType<T[P], HospitalGroupByOutputType[P]>
        }
      >
    >


  export type HospitalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    cnpj?: boolean
    email?: boolean
    websiteUrl?: boolean
    password?: boolean
    idAddress?: boolean
    Address?: boolean | AddressDefaultArgs<ExtArgs>
    HospitalSite?: boolean | Hospital$HospitalSiteArgs<ExtArgs>
    Phone?: boolean | Hospital$PhoneArgs<ExtArgs>
    Photo?: boolean | Hospital$PhotoArgs<ExtArgs>
    Review?: boolean | Hospital$ReviewArgs<ExtArgs>
    Campaign?: boolean | Hospital$CampaignArgs<ExtArgs>
    DonationBank?: boolean | Hospital$DonationBankArgs<ExtArgs>
    _count?: boolean | HospitalCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["hospital"]>

  export type HospitalSelectScalar = {
    id?: boolean
    name?: boolean
    cnpj?: boolean
    email?: boolean
    websiteUrl?: boolean
    password?: boolean
    idAddress?: boolean
  }

  export type HospitalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Address?: boolean | AddressDefaultArgs<ExtArgs>
    HospitalSite?: boolean | Hospital$HospitalSiteArgs<ExtArgs>
    Phone?: boolean | Hospital$PhoneArgs<ExtArgs>
    Photo?: boolean | Hospital$PhotoArgs<ExtArgs>
    Review?: boolean | Hospital$ReviewArgs<ExtArgs>
    Campaign?: boolean | Hospital$CampaignArgs<ExtArgs>
    DonationBank?: boolean | Hospital$DonationBankArgs<ExtArgs>
    _count?: boolean | HospitalCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $HospitalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Hospital"
    objects: {
      Address: Prisma.$AddressPayload<ExtArgs>
      HospitalSite: Prisma.$HospitalSitePayload<ExtArgs>[]
      Phone: Prisma.$PhonePayload<ExtArgs>[]
      Photo: Prisma.$PhotoPayload<ExtArgs>[]
      Review: Prisma.$ReviewPayload<ExtArgs>[]
      Campaign: Prisma.$CampaignPayload<ExtArgs>[]
      DonationBank: Prisma.$DonationBankPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      cnpj: string
      email: string
      websiteUrl: string | null
      password: string
      idAddress: number
    }, ExtArgs["result"]["hospital"]>
    composites: {}
  }


  type HospitalGetPayload<S extends boolean | null | undefined | HospitalDefaultArgs> = $Result.GetResult<Prisma.$HospitalPayload, S>

  type HospitalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HospitalFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: HospitalCountAggregateInputType | true
    }

  export interface HospitalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Hospital'], meta: { name: 'Hospital' } }
    /**
     * Find zero or one Hospital that matches the filter.
     * @param {HospitalFindUniqueArgs} args - Arguments to find a Hospital
     * @example
     * // Get one Hospital
     * const hospital = await prisma.hospital.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HospitalFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, HospitalFindUniqueArgs<ExtArgs>>
    ): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Hospital that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HospitalFindUniqueOrThrowArgs} args - Arguments to find a Hospital
     * @example
     * // Get one Hospital
     * const hospital = await prisma.hospital.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HospitalFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HospitalFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Hospital that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalFindFirstArgs} args - Arguments to find a Hospital
     * @example
     * // Get one Hospital
     * const hospital = await prisma.hospital.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HospitalFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, HospitalFindFirstArgs<ExtArgs>>
    ): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Hospital that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalFindFirstOrThrowArgs} args - Arguments to find a Hospital
     * @example
     * // Get one Hospital
     * const hospital = await prisma.hospital.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HospitalFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HospitalFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Hospitals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Hospitals
     * const hospitals = await prisma.hospital.findMany()
     * 
     * // Get first 10 Hospitals
     * const hospitals = await prisma.hospital.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hospitalWithIdOnly = await prisma.hospital.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HospitalFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HospitalFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Hospital.
     * @param {HospitalCreateArgs} args - Arguments to create a Hospital.
     * @example
     * // Create one Hospital
     * const Hospital = await prisma.hospital.create({
     *   data: {
     *     // ... data to create a Hospital
     *   }
     * })
     * 
    **/
    create<T extends HospitalCreateArgs<ExtArgs>>(
      args: SelectSubset<T, HospitalCreateArgs<ExtArgs>>
    ): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Hospitals.
     *     @param {HospitalCreateManyArgs} args - Arguments to create many Hospitals.
     *     @example
     *     // Create many Hospitals
     *     const hospital = await prisma.hospital.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HospitalCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HospitalCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Hospital.
     * @param {HospitalDeleteArgs} args - Arguments to delete one Hospital.
     * @example
     * // Delete one Hospital
     * const Hospital = await prisma.hospital.delete({
     *   where: {
     *     // ... filter to delete one Hospital
     *   }
     * })
     * 
    **/
    delete<T extends HospitalDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, HospitalDeleteArgs<ExtArgs>>
    ): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Hospital.
     * @param {HospitalUpdateArgs} args - Arguments to update one Hospital.
     * @example
     * // Update one Hospital
     * const hospital = await prisma.hospital.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HospitalUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, HospitalUpdateArgs<ExtArgs>>
    ): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Hospitals.
     * @param {HospitalDeleteManyArgs} args - Arguments to filter Hospitals to delete.
     * @example
     * // Delete a few Hospitals
     * const { count } = await prisma.hospital.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HospitalDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HospitalDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Hospitals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Hospitals
     * const hospital = await prisma.hospital.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HospitalUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, HospitalUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Hospital.
     * @param {HospitalUpsertArgs} args - Arguments to update or create a Hospital.
     * @example
     * // Update or create a Hospital
     * const hospital = await prisma.hospital.upsert({
     *   create: {
     *     // ... data to create a Hospital
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Hospital we want to update
     *   }
     * })
    **/
    upsert<T extends HospitalUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, HospitalUpsertArgs<ExtArgs>>
    ): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Hospitals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalCountArgs} args - Arguments to filter Hospitals to count.
     * @example
     * // Count the number of Hospitals
     * const count = await prisma.hospital.count({
     *   where: {
     *     // ... the filter for the Hospitals we want to count
     *   }
     * })
    **/
    count<T extends HospitalCountArgs>(
      args?: Subset<T, HospitalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HospitalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Hospital.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HospitalAggregateArgs>(args: Subset<T, HospitalAggregateArgs>): Prisma.PrismaPromise<GetHospitalAggregateType<T>>

    /**
     * Group by Hospital.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HospitalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HospitalGroupByArgs['orderBy'] }
        : { orderBy?: HospitalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HospitalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHospitalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Hospital model
   */
  readonly fields: HospitalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Hospital.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HospitalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Address<T extends AddressDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AddressDefaultArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    HospitalSite<T extends Hospital$HospitalSiteArgs<ExtArgs> = {}>(args?: Subset<T, Hospital$HospitalSiteArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HospitalSitePayload<ExtArgs>, T, 'findMany'> | Null>;

    Phone<T extends Hospital$PhoneArgs<ExtArgs> = {}>(args?: Subset<T, Hospital$PhoneArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, 'findMany'> | Null>;

    Photo<T extends Hospital$PhotoArgs<ExtArgs> = {}>(args?: Subset<T, Hospital$PhotoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, 'findMany'> | Null>;

    Review<T extends Hospital$ReviewArgs<ExtArgs> = {}>(args?: Subset<T, Hospital$ReviewArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findMany'> | Null>;

    Campaign<T extends Hospital$CampaignArgs<ExtArgs> = {}>(args?: Subset<T, Hospital$CampaignArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, 'findMany'> | Null>;

    DonationBank<T extends Hospital$DonationBankArgs<ExtArgs> = {}>(args?: Subset<T, Hospital$DonationBankArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DonationBankPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Hospital model
   */ 
  interface HospitalFieldRefs {
    readonly id: FieldRef<"Hospital", 'Int'>
    readonly name: FieldRef<"Hospital", 'String'>
    readonly cnpj: FieldRef<"Hospital", 'String'>
    readonly email: FieldRef<"Hospital", 'String'>
    readonly websiteUrl: FieldRef<"Hospital", 'String'>
    readonly password: FieldRef<"Hospital", 'String'>
    readonly idAddress: FieldRef<"Hospital", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Hospital findUnique
   */
  export type HospitalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HospitalInclude<ExtArgs> | null
    /**
     * Filter, which Hospital to fetch.
     */
    where: HospitalWhereUniqueInput
  }


  /**
   * Hospital findUniqueOrThrow
   */
  export type HospitalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HospitalInclude<ExtArgs> | null
    /**
     * Filter, which Hospital to fetch.
     */
    where: HospitalWhereUniqueInput
  }


  /**
   * Hospital findFirst
   */
  export type HospitalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HospitalInclude<ExtArgs> | null
    /**
     * Filter, which Hospital to fetch.
     */
    where?: HospitalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hospitals to fetch.
     */
    orderBy?: HospitalOrderByWithRelationInput | HospitalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Hospitals.
     */
    cursor?: HospitalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hospitals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hospitals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Hospitals.
     */
    distinct?: HospitalScalarFieldEnum | HospitalScalarFieldEnum[]
  }


  /**
   * Hospital findFirstOrThrow
   */
  export type HospitalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HospitalInclude<ExtArgs> | null
    /**
     * Filter, which Hospital to fetch.
     */
    where?: HospitalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hospitals to fetch.
     */
    orderBy?: HospitalOrderByWithRelationInput | HospitalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Hospitals.
     */
    cursor?: HospitalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hospitals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hospitals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Hospitals.
     */
    distinct?: HospitalScalarFieldEnum | HospitalScalarFieldEnum[]
  }


  /**
   * Hospital findMany
   */
  export type HospitalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HospitalInclude<ExtArgs> | null
    /**
     * Filter, which Hospitals to fetch.
     */
    where?: HospitalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hospitals to fetch.
     */
    orderBy?: HospitalOrderByWithRelationInput | HospitalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Hospitals.
     */
    cursor?: HospitalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hospitals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hospitals.
     */
    skip?: number
    distinct?: HospitalScalarFieldEnum | HospitalScalarFieldEnum[]
  }


  /**
   * Hospital create
   */
  export type HospitalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HospitalInclude<ExtArgs> | null
    /**
     * The data needed to create a Hospital.
     */
    data: XOR<HospitalCreateInput, HospitalUncheckedCreateInput>
  }


  /**
   * Hospital createMany
   */
  export type HospitalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Hospitals.
     */
    data: HospitalCreateManyInput | HospitalCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Hospital update
   */
  export type HospitalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HospitalInclude<ExtArgs> | null
    /**
     * The data needed to update a Hospital.
     */
    data: XOR<HospitalUpdateInput, HospitalUncheckedUpdateInput>
    /**
     * Choose, which Hospital to update.
     */
    where: HospitalWhereUniqueInput
  }


  /**
   * Hospital updateMany
   */
  export type HospitalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Hospitals.
     */
    data: XOR<HospitalUpdateManyMutationInput, HospitalUncheckedUpdateManyInput>
    /**
     * Filter which Hospitals to update
     */
    where?: HospitalWhereInput
  }


  /**
   * Hospital upsert
   */
  export type HospitalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HospitalInclude<ExtArgs> | null
    /**
     * The filter to search for the Hospital to update in case it exists.
     */
    where: HospitalWhereUniqueInput
    /**
     * In case the Hospital found by the `where` argument doesn't exist, create a new Hospital with this data.
     */
    create: XOR<HospitalCreateInput, HospitalUncheckedCreateInput>
    /**
     * In case the Hospital was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HospitalUpdateInput, HospitalUncheckedUpdateInput>
  }


  /**
   * Hospital delete
   */
  export type HospitalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HospitalInclude<ExtArgs> | null
    /**
     * Filter which Hospital to delete.
     */
    where: HospitalWhereUniqueInput
  }


  /**
   * Hospital deleteMany
   */
  export type HospitalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Hospitals to delete
     */
    where?: HospitalWhereInput
  }


  /**
   * Hospital.HospitalSite
   */
  export type Hospital$HospitalSiteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HospitalSite
     */
    select?: HospitalSiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HospitalSiteInclude<ExtArgs> | null
    where?: HospitalSiteWhereInput
    orderBy?: HospitalSiteOrderByWithRelationInput | HospitalSiteOrderByWithRelationInput[]
    cursor?: HospitalSiteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HospitalSiteScalarFieldEnum | HospitalSiteScalarFieldEnum[]
  }


  /**
   * Hospital.Phone
   */
  export type Hospital$PhoneArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phone
     */
    select?: PhoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhoneInclude<ExtArgs> | null
    where?: PhoneWhereInput
    orderBy?: PhoneOrderByWithRelationInput | PhoneOrderByWithRelationInput[]
    cursor?: PhoneWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PhoneScalarFieldEnum | PhoneScalarFieldEnum[]
  }


  /**
   * Hospital.Photo
   */
  export type Hospital$PhotoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhotoInclude<ExtArgs> | null
    where?: PhotoWhereInput
    orderBy?: PhotoOrderByWithRelationInput | PhotoOrderByWithRelationInput[]
    cursor?: PhotoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PhotoScalarFieldEnum | PhotoScalarFieldEnum[]
  }


  /**
   * Hospital.Review
   */
  export type Hospital$ReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }


  /**
   * Hospital.Campaign
   */
  export type Hospital$CampaignArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CampaignInclude<ExtArgs> | null
    where?: CampaignWhereInput
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    cursor?: CampaignWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }


  /**
   * Hospital.DonationBank
   */
  export type Hospital$DonationBankArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationBank
     */
    select?: DonationBankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DonationBankInclude<ExtArgs> | null
    where?: DonationBankWhereInput
    orderBy?: DonationBankOrderByWithRelationInput | DonationBankOrderByWithRelationInput[]
    cursor?: DonationBankWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DonationBankScalarFieldEnum | DonationBankScalarFieldEnum[]
  }


  /**
   * Hospital without action
   */
  export type HospitalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HospitalInclude<ExtArgs> | null
  }



  /**
   * Model Campaign
   */

  export type AggregateCampaign = {
    _count: CampaignCountAggregateOutputType | null
    _avg: CampaignAvgAggregateOutputType | null
    _sum: CampaignSumAggregateOutputType | null
    _min: CampaignMinAggregateOutputType | null
    _max: CampaignMaxAggregateOutputType | null
  }

  export type CampaignAvgAggregateOutputType = {
    id: number | null
    idHospital: number | null
  }

  export type CampaignSumAggregateOutputType = {
    id: number | null
    idHospital: number | null
  }

  export type CampaignMinAggregateOutputType = {
    id: number | null
    date: Date | null
    hour: Date | null
    description: string | null
    image: string | null
    idHospital: number | null
  }

  export type CampaignMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    hour: Date | null
    description: string | null
    image: string | null
    idHospital: number | null
  }

  export type CampaignCountAggregateOutputType = {
    id: number
    date: number
    hour: number
    description: number
    image: number
    idHospital: number
    _all: number
  }


  export type CampaignAvgAggregateInputType = {
    id?: true
    idHospital?: true
  }

  export type CampaignSumAggregateInputType = {
    id?: true
    idHospital?: true
  }

  export type CampaignMinAggregateInputType = {
    id?: true
    date?: true
    hour?: true
    description?: true
    image?: true
    idHospital?: true
  }

  export type CampaignMaxAggregateInputType = {
    id?: true
    date?: true
    hour?: true
    description?: true
    image?: true
    idHospital?: true
  }

  export type CampaignCountAggregateInputType = {
    id?: true
    date?: true
    hour?: true
    description?: true
    image?: true
    idHospital?: true
    _all?: true
  }

  export type CampaignAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Campaign to aggregate.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Campaigns
    **/
    _count?: true | CampaignCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CampaignAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CampaignSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CampaignMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CampaignMaxAggregateInputType
  }

  export type GetCampaignAggregateType<T extends CampaignAggregateArgs> = {
        [P in keyof T & keyof AggregateCampaign]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCampaign[P]>
      : GetScalarType<T[P], AggregateCampaign[P]>
  }




  export type CampaignGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CampaignWhereInput
    orderBy?: CampaignOrderByWithAggregationInput | CampaignOrderByWithAggregationInput[]
    by: CampaignScalarFieldEnum[] | CampaignScalarFieldEnum
    having?: CampaignScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CampaignCountAggregateInputType | true
    _avg?: CampaignAvgAggregateInputType
    _sum?: CampaignSumAggregateInputType
    _min?: CampaignMinAggregateInputType
    _max?: CampaignMaxAggregateInputType
  }

  export type CampaignGroupByOutputType = {
    id: number
    date: Date
    hour: Date
    description: string
    image: string
    idHospital: number
    _count: CampaignCountAggregateOutputType | null
    _avg: CampaignAvgAggregateOutputType | null
    _sum: CampaignSumAggregateOutputType | null
    _min: CampaignMinAggregateOutputType | null
    _max: CampaignMaxAggregateOutputType | null
  }

  type GetCampaignGroupByPayload<T extends CampaignGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CampaignGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CampaignGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CampaignGroupByOutputType[P]>
            : GetScalarType<T[P], CampaignGroupByOutputType[P]>
        }
      >
    >


  export type CampaignSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    hour?: boolean
    description?: boolean
    image?: boolean
    idHospital?: boolean
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["campaign"]>

  export type CampaignSelectScalar = {
    id?: boolean
    date?: boolean
    hour?: boolean
    description?: boolean
    image?: boolean
    idHospital?: boolean
  }

  export type CampaignInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }


  export type $CampaignPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Campaign"
    objects: {
      Hospital: Prisma.$HospitalPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      hour: Date
      description: string
      image: string
      idHospital: number
    }, ExtArgs["result"]["campaign"]>
    composites: {}
  }


  type CampaignGetPayload<S extends boolean | null | undefined | CampaignDefaultArgs> = $Result.GetResult<Prisma.$CampaignPayload, S>

  type CampaignCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CampaignFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CampaignCountAggregateInputType | true
    }

  export interface CampaignDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Campaign'], meta: { name: 'Campaign' } }
    /**
     * Find zero or one Campaign that matches the filter.
     * @param {CampaignFindUniqueArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CampaignFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CampaignFindUniqueArgs<ExtArgs>>
    ): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Campaign that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CampaignFindUniqueOrThrowArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CampaignFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CampaignFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Campaign that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignFindFirstArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CampaignFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CampaignFindFirstArgs<ExtArgs>>
    ): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Campaign that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignFindFirstOrThrowArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CampaignFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CampaignFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Campaigns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Campaigns
     * const campaigns = await prisma.campaign.findMany()
     * 
     * // Get first 10 Campaigns
     * const campaigns = await prisma.campaign.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const campaignWithIdOnly = await prisma.campaign.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CampaignFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CampaignFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Campaign.
     * @param {CampaignCreateArgs} args - Arguments to create a Campaign.
     * @example
     * // Create one Campaign
     * const Campaign = await prisma.campaign.create({
     *   data: {
     *     // ... data to create a Campaign
     *   }
     * })
     * 
    **/
    create<T extends CampaignCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CampaignCreateArgs<ExtArgs>>
    ): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Campaigns.
     *     @param {CampaignCreateManyArgs} args - Arguments to create many Campaigns.
     *     @example
     *     // Create many Campaigns
     *     const campaign = await prisma.campaign.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CampaignCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CampaignCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Campaign.
     * @param {CampaignDeleteArgs} args - Arguments to delete one Campaign.
     * @example
     * // Delete one Campaign
     * const Campaign = await prisma.campaign.delete({
     *   where: {
     *     // ... filter to delete one Campaign
     *   }
     * })
     * 
    **/
    delete<T extends CampaignDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CampaignDeleteArgs<ExtArgs>>
    ): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Campaign.
     * @param {CampaignUpdateArgs} args - Arguments to update one Campaign.
     * @example
     * // Update one Campaign
     * const campaign = await prisma.campaign.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CampaignUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CampaignUpdateArgs<ExtArgs>>
    ): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Campaigns.
     * @param {CampaignDeleteManyArgs} args - Arguments to filter Campaigns to delete.
     * @example
     * // Delete a few Campaigns
     * const { count } = await prisma.campaign.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CampaignDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CampaignDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Campaigns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Campaigns
     * const campaign = await prisma.campaign.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CampaignUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CampaignUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Campaign.
     * @param {CampaignUpsertArgs} args - Arguments to update or create a Campaign.
     * @example
     * // Update or create a Campaign
     * const campaign = await prisma.campaign.upsert({
     *   create: {
     *     // ... data to create a Campaign
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Campaign we want to update
     *   }
     * })
    **/
    upsert<T extends CampaignUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CampaignUpsertArgs<ExtArgs>>
    ): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Campaigns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignCountArgs} args - Arguments to filter Campaigns to count.
     * @example
     * // Count the number of Campaigns
     * const count = await prisma.campaign.count({
     *   where: {
     *     // ... the filter for the Campaigns we want to count
     *   }
     * })
    **/
    count<T extends CampaignCountArgs>(
      args?: Subset<T, CampaignCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CampaignCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Campaign.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CampaignAggregateArgs>(args: Subset<T, CampaignAggregateArgs>): Prisma.PrismaPromise<GetCampaignAggregateType<T>>

    /**
     * Group by Campaign.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CampaignGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CampaignGroupByArgs['orderBy'] }
        : { orderBy?: CampaignGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CampaignGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCampaignGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Campaign model
   */
  readonly fields: CampaignFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Campaign.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CampaignClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Hospital<T extends HospitalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HospitalDefaultArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Campaign model
   */ 
  interface CampaignFieldRefs {
    readonly id: FieldRef<"Campaign", 'Int'>
    readonly date: FieldRef<"Campaign", 'DateTime'>
    readonly hour: FieldRef<"Campaign", 'DateTime'>
    readonly description: FieldRef<"Campaign", 'String'>
    readonly image: FieldRef<"Campaign", 'String'>
    readonly idHospital: FieldRef<"Campaign", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Campaign findUnique
   */
  export type CampaignFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where: CampaignWhereUniqueInput
  }


  /**
   * Campaign findUniqueOrThrow
   */
  export type CampaignFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where: CampaignWhereUniqueInput
  }


  /**
   * Campaign findFirst
   */
  export type CampaignFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Campaigns.
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Campaigns.
     */
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }


  /**
   * Campaign findFirstOrThrow
   */
  export type CampaignFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Campaigns.
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Campaigns.
     */
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }


  /**
   * Campaign findMany
   */
  export type CampaignFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaigns to fetch.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Campaigns.
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }


  /**
   * Campaign create
   */
  export type CampaignCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * The data needed to create a Campaign.
     */
    data: XOR<CampaignCreateInput, CampaignUncheckedCreateInput>
  }


  /**
   * Campaign createMany
   */
  export type CampaignCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Campaigns.
     */
    data: CampaignCreateManyInput | CampaignCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Campaign update
   */
  export type CampaignUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * The data needed to update a Campaign.
     */
    data: XOR<CampaignUpdateInput, CampaignUncheckedUpdateInput>
    /**
     * Choose, which Campaign to update.
     */
    where: CampaignWhereUniqueInput
  }


  /**
   * Campaign updateMany
   */
  export type CampaignUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Campaigns.
     */
    data: XOR<CampaignUpdateManyMutationInput, CampaignUncheckedUpdateManyInput>
    /**
     * Filter which Campaigns to update
     */
    where?: CampaignWhereInput
  }


  /**
   * Campaign upsert
   */
  export type CampaignUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * The filter to search for the Campaign to update in case it exists.
     */
    where: CampaignWhereUniqueInput
    /**
     * In case the Campaign found by the `where` argument doesn't exist, create a new Campaign with this data.
     */
    create: XOR<CampaignCreateInput, CampaignUncheckedCreateInput>
    /**
     * In case the Campaign was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CampaignUpdateInput, CampaignUncheckedUpdateInput>
  }


  /**
   * Campaign delete
   */
  export type CampaignDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter which Campaign to delete.
     */
    where: CampaignWhereUniqueInput
  }


  /**
   * Campaign deleteMany
   */
  export type CampaignDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Campaigns to delete
     */
    where?: CampaignWhereInput
  }


  /**
   * Campaign without action
   */
  export type CampaignDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CampaignInclude<ExtArgs> | null
  }



  /**
   * Model DonationBank
   */

  export type AggregateDonationBank = {
    _count: DonationBankCountAggregateOutputType | null
    _avg: DonationBankAvgAggregateOutputType | null
    _sum: DonationBankSumAggregateOutputType | null
    _min: DonationBankMinAggregateOutputType | null
    _max: DonationBankMaxAggregateOutputType | null
  }

  export type DonationBankAvgAggregateOutputType = {
    id: number | null
    year: number | null
    bloodMl: Decimal | null
    idHospital: number | null
    idBloodType: number | null
  }

  export type DonationBankSumAggregateOutputType = {
    id: number | null
    year: number | null
    bloodMl: Decimal | null
    idHospital: number | null
    idBloodType: number | null
  }

  export type DonationBankMinAggregateOutputType = {
    id: number | null
    year: number | null
    bloodMl: Decimal | null
    idHospital: number | null
    idBloodType: number | null
  }

  export type DonationBankMaxAggregateOutputType = {
    id: number | null
    year: number | null
    bloodMl: Decimal | null
    idHospital: number | null
    idBloodType: number | null
  }

  export type DonationBankCountAggregateOutputType = {
    id: number
    year: number
    bloodMl: number
    idHospital: number
    idBloodType: number
    _all: number
  }


  export type DonationBankAvgAggregateInputType = {
    id?: true
    year?: true
    bloodMl?: true
    idHospital?: true
    idBloodType?: true
  }

  export type DonationBankSumAggregateInputType = {
    id?: true
    year?: true
    bloodMl?: true
    idHospital?: true
    idBloodType?: true
  }

  export type DonationBankMinAggregateInputType = {
    id?: true
    year?: true
    bloodMl?: true
    idHospital?: true
    idBloodType?: true
  }

  export type DonationBankMaxAggregateInputType = {
    id?: true
    year?: true
    bloodMl?: true
    idHospital?: true
    idBloodType?: true
  }

  export type DonationBankCountAggregateInputType = {
    id?: true
    year?: true
    bloodMl?: true
    idHospital?: true
    idBloodType?: true
    _all?: true
  }

  export type DonationBankAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DonationBank to aggregate.
     */
    where?: DonationBankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DonationBanks to fetch.
     */
    orderBy?: DonationBankOrderByWithRelationInput | DonationBankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DonationBankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DonationBanks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DonationBanks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DonationBanks
    **/
    _count?: true | DonationBankCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DonationBankAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DonationBankSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DonationBankMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DonationBankMaxAggregateInputType
  }

  export type GetDonationBankAggregateType<T extends DonationBankAggregateArgs> = {
        [P in keyof T & keyof AggregateDonationBank]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDonationBank[P]>
      : GetScalarType<T[P], AggregateDonationBank[P]>
  }




  export type DonationBankGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DonationBankWhereInput
    orderBy?: DonationBankOrderByWithAggregationInput | DonationBankOrderByWithAggregationInput[]
    by: DonationBankScalarFieldEnum[] | DonationBankScalarFieldEnum
    having?: DonationBankScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DonationBankCountAggregateInputType | true
    _avg?: DonationBankAvgAggregateInputType
    _sum?: DonationBankSumAggregateInputType
    _min?: DonationBankMinAggregateInputType
    _max?: DonationBankMaxAggregateInputType
  }

  export type DonationBankGroupByOutputType = {
    id: number
    year: number
    bloodMl: Decimal
    idHospital: number
    idBloodType: number
    _count: DonationBankCountAggregateOutputType | null
    _avg: DonationBankAvgAggregateOutputType | null
    _sum: DonationBankSumAggregateOutputType | null
    _min: DonationBankMinAggregateOutputType | null
    _max: DonationBankMaxAggregateOutputType | null
  }

  type GetDonationBankGroupByPayload<T extends DonationBankGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DonationBankGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DonationBankGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DonationBankGroupByOutputType[P]>
            : GetScalarType<T[P], DonationBankGroupByOutputType[P]>
        }
      >
    >


  export type DonationBankSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    year?: boolean
    bloodMl?: boolean
    idHospital?: boolean
    idBloodType?: boolean
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    BloodType?: boolean | BloodTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["donationBank"]>

  export type DonationBankSelectScalar = {
    id?: boolean
    year?: boolean
    bloodMl?: boolean
    idHospital?: boolean
    idBloodType?: boolean
  }

  export type DonationBankInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    BloodType?: boolean | BloodTypeDefaultArgs<ExtArgs>
  }


  export type $DonationBankPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DonationBank"
    objects: {
      Hospital: Prisma.$HospitalPayload<ExtArgs>
      BloodType: Prisma.$BloodTypePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      year: number
      bloodMl: Prisma.Decimal
      idHospital: number
      idBloodType: number
    }, ExtArgs["result"]["donationBank"]>
    composites: {}
  }


  type DonationBankGetPayload<S extends boolean | null | undefined | DonationBankDefaultArgs> = $Result.GetResult<Prisma.$DonationBankPayload, S>

  type DonationBankCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DonationBankFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: DonationBankCountAggregateInputType | true
    }

  export interface DonationBankDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DonationBank'], meta: { name: 'DonationBank' } }
    /**
     * Find zero or one DonationBank that matches the filter.
     * @param {DonationBankFindUniqueArgs} args - Arguments to find a DonationBank
     * @example
     * // Get one DonationBank
     * const donationBank = await prisma.donationBank.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DonationBankFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DonationBankFindUniqueArgs<ExtArgs>>
    ): Prisma__DonationBankClient<$Result.GetResult<Prisma.$DonationBankPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one DonationBank that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DonationBankFindUniqueOrThrowArgs} args - Arguments to find a DonationBank
     * @example
     * // Get one DonationBank
     * const donationBank = await prisma.donationBank.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DonationBankFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DonationBankFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DonationBankClient<$Result.GetResult<Prisma.$DonationBankPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first DonationBank that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationBankFindFirstArgs} args - Arguments to find a DonationBank
     * @example
     * // Get one DonationBank
     * const donationBank = await prisma.donationBank.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DonationBankFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DonationBankFindFirstArgs<ExtArgs>>
    ): Prisma__DonationBankClient<$Result.GetResult<Prisma.$DonationBankPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first DonationBank that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationBankFindFirstOrThrowArgs} args - Arguments to find a DonationBank
     * @example
     * // Get one DonationBank
     * const donationBank = await prisma.donationBank.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DonationBankFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DonationBankFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DonationBankClient<$Result.GetResult<Prisma.$DonationBankPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more DonationBanks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationBankFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DonationBanks
     * const donationBanks = await prisma.donationBank.findMany()
     * 
     * // Get first 10 DonationBanks
     * const donationBanks = await prisma.donationBank.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const donationBankWithIdOnly = await prisma.donationBank.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DonationBankFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DonationBankFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DonationBankPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a DonationBank.
     * @param {DonationBankCreateArgs} args - Arguments to create a DonationBank.
     * @example
     * // Create one DonationBank
     * const DonationBank = await prisma.donationBank.create({
     *   data: {
     *     // ... data to create a DonationBank
     *   }
     * })
     * 
    **/
    create<T extends DonationBankCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DonationBankCreateArgs<ExtArgs>>
    ): Prisma__DonationBankClient<$Result.GetResult<Prisma.$DonationBankPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many DonationBanks.
     *     @param {DonationBankCreateManyArgs} args - Arguments to create many DonationBanks.
     *     @example
     *     // Create many DonationBanks
     *     const donationBank = await prisma.donationBank.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DonationBankCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DonationBankCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DonationBank.
     * @param {DonationBankDeleteArgs} args - Arguments to delete one DonationBank.
     * @example
     * // Delete one DonationBank
     * const DonationBank = await prisma.donationBank.delete({
     *   where: {
     *     // ... filter to delete one DonationBank
     *   }
     * })
     * 
    **/
    delete<T extends DonationBankDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DonationBankDeleteArgs<ExtArgs>>
    ): Prisma__DonationBankClient<$Result.GetResult<Prisma.$DonationBankPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one DonationBank.
     * @param {DonationBankUpdateArgs} args - Arguments to update one DonationBank.
     * @example
     * // Update one DonationBank
     * const donationBank = await prisma.donationBank.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DonationBankUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DonationBankUpdateArgs<ExtArgs>>
    ): Prisma__DonationBankClient<$Result.GetResult<Prisma.$DonationBankPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more DonationBanks.
     * @param {DonationBankDeleteManyArgs} args - Arguments to filter DonationBanks to delete.
     * @example
     * // Delete a few DonationBanks
     * const { count } = await prisma.donationBank.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DonationBankDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DonationBankDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DonationBanks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationBankUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DonationBanks
     * const donationBank = await prisma.donationBank.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DonationBankUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DonationBankUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DonationBank.
     * @param {DonationBankUpsertArgs} args - Arguments to update or create a DonationBank.
     * @example
     * // Update or create a DonationBank
     * const donationBank = await prisma.donationBank.upsert({
     *   create: {
     *     // ... data to create a DonationBank
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DonationBank we want to update
     *   }
     * })
    **/
    upsert<T extends DonationBankUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DonationBankUpsertArgs<ExtArgs>>
    ): Prisma__DonationBankClient<$Result.GetResult<Prisma.$DonationBankPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of DonationBanks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationBankCountArgs} args - Arguments to filter DonationBanks to count.
     * @example
     * // Count the number of DonationBanks
     * const count = await prisma.donationBank.count({
     *   where: {
     *     // ... the filter for the DonationBanks we want to count
     *   }
     * })
    **/
    count<T extends DonationBankCountArgs>(
      args?: Subset<T, DonationBankCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DonationBankCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DonationBank.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationBankAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DonationBankAggregateArgs>(args: Subset<T, DonationBankAggregateArgs>): Prisma.PrismaPromise<GetDonationBankAggregateType<T>>

    /**
     * Group by DonationBank.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationBankGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DonationBankGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DonationBankGroupByArgs['orderBy'] }
        : { orderBy?: DonationBankGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DonationBankGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDonationBankGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DonationBank model
   */
  readonly fields: DonationBankFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DonationBank.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DonationBankClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Hospital<T extends HospitalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HospitalDefaultArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    BloodType<T extends BloodTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BloodTypeDefaultArgs<ExtArgs>>): Prisma__BloodTypeClient<$Result.GetResult<Prisma.$BloodTypePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the DonationBank model
   */ 
  interface DonationBankFieldRefs {
    readonly id: FieldRef<"DonationBank", 'Int'>
    readonly year: FieldRef<"DonationBank", 'Int'>
    readonly bloodMl: FieldRef<"DonationBank", 'Decimal'>
    readonly idHospital: FieldRef<"DonationBank", 'Int'>
    readonly idBloodType: FieldRef<"DonationBank", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * DonationBank findUnique
   */
  export type DonationBankFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationBank
     */
    select?: DonationBankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DonationBankInclude<ExtArgs> | null
    /**
     * Filter, which DonationBank to fetch.
     */
    where: DonationBankWhereUniqueInput
  }


  /**
   * DonationBank findUniqueOrThrow
   */
  export type DonationBankFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationBank
     */
    select?: DonationBankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DonationBankInclude<ExtArgs> | null
    /**
     * Filter, which DonationBank to fetch.
     */
    where: DonationBankWhereUniqueInput
  }


  /**
   * DonationBank findFirst
   */
  export type DonationBankFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationBank
     */
    select?: DonationBankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DonationBankInclude<ExtArgs> | null
    /**
     * Filter, which DonationBank to fetch.
     */
    where?: DonationBankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DonationBanks to fetch.
     */
    orderBy?: DonationBankOrderByWithRelationInput | DonationBankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DonationBanks.
     */
    cursor?: DonationBankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DonationBanks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DonationBanks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DonationBanks.
     */
    distinct?: DonationBankScalarFieldEnum | DonationBankScalarFieldEnum[]
  }


  /**
   * DonationBank findFirstOrThrow
   */
  export type DonationBankFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationBank
     */
    select?: DonationBankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DonationBankInclude<ExtArgs> | null
    /**
     * Filter, which DonationBank to fetch.
     */
    where?: DonationBankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DonationBanks to fetch.
     */
    orderBy?: DonationBankOrderByWithRelationInput | DonationBankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DonationBanks.
     */
    cursor?: DonationBankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DonationBanks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DonationBanks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DonationBanks.
     */
    distinct?: DonationBankScalarFieldEnum | DonationBankScalarFieldEnum[]
  }


  /**
   * DonationBank findMany
   */
  export type DonationBankFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationBank
     */
    select?: DonationBankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DonationBankInclude<ExtArgs> | null
    /**
     * Filter, which DonationBanks to fetch.
     */
    where?: DonationBankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DonationBanks to fetch.
     */
    orderBy?: DonationBankOrderByWithRelationInput | DonationBankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DonationBanks.
     */
    cursor?: DonationBankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DonationBanks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DonationBanks.
     */
    skip?: number
    distinct?: DonationBankScalarFieldEnum | DonationBankScalarFieldEnum[]
  }


  /**
   * DonationBank create
   */
  export type DonationBankCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationBank
     */
    select?: DonationBankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DonationBankInclude<ExtArgs> | null
    /**
     * The data needed to create a DonationBank.
     */
    data: XOR<DonationBankCreateInput, DonationBankUncheckedCreateInput>
  }


  /**
   * DonationBank createMany
   */
  export type DonationBankCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DonationBanks.
     */
    data: DonationBankCreateManyInput | DonationBankCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * DonationBank update
   */
  export type DonationBankUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationBank
     */
    select?: DonationBankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DonationBankInclude<ExtArgs> | null
    /**
     * The data needed to update a DonationBank.
     */
    data: XOR<DonationBankUpdateInput, DonationBankUncheckedUpdateInput>
    /**
     * Choose, which DonationBank to update.
     */
    where: DonationBankWhereUniqueInput
  }


  /**
   * DonationBank updateMany
   */
  export type DonationBankUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DonationBanks.
     */
    data: XOR<DonationBankUpdateManyMutationInput, DonationBankUncheckedUpdateManyInput>
    /**
     * Filter which DonationBanks to update
     */
    where?: DonationBankWhereInput
  }


  /**
   * DonationBank upsert
   */
  export type DonationBankUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationBank
     */
    select?: DonationBankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DonationBankInclude<ExtArgs> | null
    /**
     * The filter to search for the DonationBank to update in case it exists.
     */
    where: DonationBankWhereUniqueInput
    /**
     * In case the DonationBank found by the `where` argument doesn't exist, create a new DonationBank with this data.
     */
    create: XOR<DonationBankCreateInput, DonationBankUncheckedCreateInput>
    /**
     * In case the DonationBank was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DonationBankUpdateInput, DonationBankUncheckedUpdateInput>
  }


  /**
   * DonationBank delete
   */
  export type DonationBankDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationBank
     */
    select?: DonationBankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DonationBankInclude<ExtArgs> | null
    /**
     * Filter which DonationBank to delete.
     */
    where: DonationBankWhereUniqueInput
  }


  /**
   * DonationBank deleteMany
   */
  export type DonationBankDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DonationBanks to delete
     */
    where?: DonationBankWhereInput
  }


  /**
   * DonationBank without action
   */
  export type DonationBankDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationBank
     */
    select?: DonationBankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DonationBankInclude<ExtArgs> | null
  }



  /**
   * Model Site
   */

  export type AggregateSite = {
    _count: SiteCountAggregateOutputType | null
    _avg: SiteAvgAggregateOutputType | null
    _sum: SiteSumAggregateOutputType | null
    _min: SiteMinAggregateOutputType | null
    _max: SiteMaxAggregateOutputType | null
  }

  export type SiteAvgAggregateOutputType = {
    id: number | null
  }

  export type SiteSumAggregateOutputType = {
    id: number | null
  }

  export type SiteMinAggregateOutputType = {
    id: number | null
    site: string | null
  }

  export type SiteMaxAggregateOutputType = {
    id: number | null
    site: string | null
  }

  export type SiteCountAggregateOutputType = {
    id: number
    site: number
    _all: number
  }


  export type SiteAvgAggregateInputType = {
    id?: true
  }

  export type SiteSumAggregateInputType = {
    id?: true
  }

  export type SiteMinAggregateInputType = {
    id?: true
    site?: true
  }

  export type SiteMaxAggregateInputType = {
    id?: true
    site?: true
  }

  export type SiteCountAggregateInputType = {
    id?: true
    site?: true
    _all?: true
  }

  export type SiteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Site to aggregate.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: SiteOrderByWithRelationInput | SiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sites
    **/
    _count?: true | SiteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SiteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SiteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SiteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SiteMaxAggregateInputType
  }

  export type GetSiteAggregateType<T extends SiteAggregateArgs> = {
        [P in keyof T & keyof AggregateSite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSite[P]>
      : GetScalarType<T[P], AggregateSite[P]>
  }




  export type SiteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SiteWhereInput
    orderBy?: SiteOrderByWithAggregationInput | SiteOrderByWithAggregationInput[]
    by: SiteScalarFieldEnum[] | SiteScalarFieldEnum
    having?: SiteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SiteCountAggregateInputType | true
    _avg?: SiteAvgAggregateInputType
    _sum?: SiteSumAggregateInputType
    _min?: SiteMinAggregateInputType
    _max?: SiteMaxAggregateInputType
  }

  export type SiteGroupByOutputType = {
    id: number
    site: string | null
    _count: SiteCountAggregateOutputType | null
    _avg: SiteAvgAggregateOutputType | null
    _sum: SiteSumAggregateOutputType | null
    _min: SiteMinAggregateOutputType | null
    _max: SiteMaxAggregateOutputType | null
  }

  type GetSiteGroupByPayload<T extends SiteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SiteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SiteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SiteGroupByOutputType[P]>
            : GetScalarType<T[P], SiteGroupByOutputType[P]>
        }
      >
    >


  export type SiteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    site?: boolean
    HospitalSite?: boolean | Site$HospitalSiteArgs<ExtArgs>
    _count?: boolean | SiteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["site"]>

  export type SiteSelectScalar = {
    id?: boolean
    site?: boolean
  }

  export type SiteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    HospitalSite?: boolean | Site$HospitalSiteArgs<ExtArgs>
    _count?: boolean | SiteCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SitePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Site"
    objects: {
      HospitalSite: Prisma.$HospitalSitePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      site: string | null
    }, ExtArgs["result"]["site"]>
    composites: {}
  }


  type SiteGetPayload<S extends boolean | null | undefined | SiteDefaultArgs> = $Result.GetResult<Prisma.$SitePayload, S>

  type SiteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SiteFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: SiteCountAggregateInputType | true
    }

  export interface SiteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Site'], meta: { name: 'Site' } }
    /**
     * Find zero or one Site that matches the filter.
     * @param {SiteFindUniqueArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SiteFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SiteFindUniqueArgs<ExtArgs>>
    ): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Site that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SiteFindUniqueOrThrowArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SiteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SiteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Site that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteFindFirstArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SiteFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SiteFindFirstArgs<ExtArgs>>
    ): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Site that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteFindFirstOrThrowArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SiteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SiteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Sites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sites
     * const sites = await prisma.site.findMany()
     * 
     * // Get first 10 Sites
     * const sites = await prisma.site.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const siteWithIdOnly = await prisma.site.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SiteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SiteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Site.
     * @param {SiteCreateArgs} args - Arguments to create a Site.
     * @example
     * // Create one Site
     * const Site = await prisma.site.create({
     *   data: {
     *     // ... data to create a Site
     *   }
     * })
     * 
    **/
    create<T extends SiteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SiteCreateArgs<ExtArgs>>
    ): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Sites.
     *     @param {SiteCreateManyArgs} args - Arguments to create many Sites.
     *     @example
     *     // Create many Sites
     *     const site = await prisma.site.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SiteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SiteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Site.
     * @param {SiteDeleteArgs} args - Arguments to delete one Site.
     * @example
     * // Delete one Site
     * const Site = await prisma.site.delete({
     *   where: {
     *     // ... filter to delete one Site
     *   }
     * })
     * 
    **/
    delete<T extends SiteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SiteDeleteArgs<ExtArgs>>
    ): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Site.
     * @param {SiteUpdateArgs} args - Arguments to update one Site.
     * @example
     * // Update one Site
     * const site = await prisma.site.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SiteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SiteUpdateArgs<ExtArgs>>
    ): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Sites.
     * @param {SiteDeleteManyArgs} args - Arguments to filter Sites to delete.
     * @example
     * // Delete a few Sites
     * const { count } = await prisma.site.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SiteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SiteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sites
     * const site = await prisma.site.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SiteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SiteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Site.
     * @param {SiteUpsertArgs} args - Arguments to update or create a Site.
     * @example
     * // Update or create a Site
     * const site = await prisma.site.upsert({
     *   create: {
     *     // ... data to create a Site
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Site we want to update
     *   }
     * })
    **/
    upsert<T extends SiteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SiteUpsertArgs<ExtArgs>>
    ): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Sites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteCountArgs} args - Arguments to filter Sites to count.
     * @example
     * // Count the number of Sites
     * const count = await prisma.site.count({
     *   where: {
     *     // ... the filter for the Sites we want to count
     *   }
     * })
    **/
    count<T extends SiteCountArgs>(
      args?: Subset<T, SiteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SiteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Site.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SiteAggregateArgs>(args: Subset<T, SiteAggregateArgs>): Prisma.PrismaPromise<GetSiteAggregateType<T>>

    /**
     * Group by Site.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SiteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SiteGroupByArgs['orderBy'] }
        : { orderBy?: SiteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SiteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSiteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Site model
   */
  readonly fields: SiteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Site.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SiteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    HospitalSite<T extends Site$HospitalSiteArgs<ExtArgs> = {}>(args?: Subset<T, Site$HospitalSiteArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HospitalSitePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Site model
   */ 
  interface SiteFieldRefs {
    readonly id: FieldRef<"Site", 'Int'>
    readonly site: FieldRef<"Site", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Site findUnique
   */
  export type SiteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter, which Site to fetch.
     */
    where: SiteWhereUniqueInput
  }


  /**
   * Site findUniqueOrThrow
   */
  export type SiteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter, which Site to fetch.
     */
    where: SiteWhereUniqueInput
  }


  /**
   * Site findFirst
   */
  export type SiteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter, which Site to fetch.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: SiteOrderByWithRelationInput | SiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sites.
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sites.
     */
    distinct?: SiteScalarFieldEnum | SiteScalarFieldEnum[]
  }


  /**
   * Site findFirstOrThrow
   */
  export type SiteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter, which Site to fetch.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: SiteOrderByWithRelationInput | SiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sites.
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sites.
     */
    distinct?: SiteScalarFieldEnum | SiteScalarFieldEnum[]
  }


  /**
   * Site findMany
   */
  export type SiteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter, which Sites to fetch.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: SiteOrderByWithRelationInput | SiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sites.
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    distinct?: SiteScalarFieldEnum | SiteScalarFieldEnum[]
  }


  /**
   * Site create
   */
  export type SiteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * The data needed to create a Site.
     */
    data?: XOR<SiteCreateInput, SiteUncheckedCreateInput>
  }


  /**
   * Site createMany
   */
  export type SiteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sites.
     */
    data: SiteCreateManyInput | SiteCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Site update
   */
  export type SiteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * The data needed to update a Site.
     */
    data: XOR<SiteUpdateInput, SiteUncheckedUpdateInput>
    /**
     * Choose, which Site to update.
     */
    where: SiteWhereUniqueInput
  }


  /**
   * Site updateMany
   */
  export type SiteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sites.
     */
    data: XOR<SiteUpdateManyMutationInput, SiteUncheckedUpdateManyInput>
    /**
     * Filter which Sites to update
     */
    where?: SiteWhereInput
  }


  /**
   * Site upsert
   */
  export type SiteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * The filter to search for the Site to update in case it exists.
     */
    where: SiteWhereUniqueInput
    /**
     * In case the Site found by the `where` argument doesn't exist, create a new Site with this data.
     */
    create: XOR<SiteCreateInput, SiteUncheckedCreateInput>
    /**
     * In case the Site was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SiteUpdateInput, SiteUncheckedUpdateInput>
  }


  /**
   * Site delete
   */
  export type SiteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter which Site to delete.
     */
    where: SiteWhereUniqueInput
  }


  /**
   * Site deleteMany
   */
  export type SiteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sites to delete
     */
    where?: SiteWhereInput
  }


  /**
   * Site.HospitalSite
   */
  export type Site$HospitalSiteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HospitalSite
     */
    select?: HospitalSiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HospitalSiteInclude<ExtArgs> | null
    where?: HospitalSiteWhereInput
    orderBy?: HospitalSiteOrderByWithRelationInput | HospitalSiteOrderByWithRelationInput[]
    cursor?: HospitalSiteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HospitalSiteScalarFieldEnum | HospitalSiteScalarFieldEnum[]
  }


  /**
   * Site without action
   */
  export type SiteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude<ExtArgs> | null
  }



  /**
   * Model HospitalSite
   */

  export type AggregateHospitalSite = {
    _count: HospitalSiteCountAggregateOutputType | null
    _avg: HospitalSiteAvgAggregateOutputType | null
    _sum: HospitalSiteSumAggregateOutputType | null
    _min: HospitalSiteMinAggregateOutputType | null
    _max: HospitalSiteMaxAggregateOutputType | null
  }

  export type HospitalSiteAvgAggregateOutputType = {
    id: number | null
    idHospital: number | null
    idSite: number | null
  }

  export type HospitalSiteSumAggregateOutputType = {
    id: number | null
    idHospital: number | null
    idSite: number | null
  }

  export type HospitalSiteMinAggregateOutputType = {
    id: number | null
    idHospital: number | null
    idSite: number | null
  }

  export type HospitalSiteMaxAggregateOutputType = {
    id: number | null
    idHospital: number | null
    idSite: number | null
  }

  export type HospitalSiteCountAggregateOutputType = {
    id: number
    idHospital: number
    idSite: number
    _all: number
  }


  export type HospitalSiteAvgAggregateInputType = {
    id?: true
    idHospital?: true
    idSite?: true
  }

  export type HospitalSiteSumAggregateInputType = {
    id?: true
    idHospital?: true
    idSite?: true
  }

  export type HospitalSiteMinAggregateInputType = {
    id?: true
    idHospital?: true
    idSite?: true
  }

  export type HospitalSiteMaxAggregateInputType = {
    id?: true
    idHospital?: true
    idSite?: true
  }

  export type HospitalSiteCountAggregateInputType = {
    id?: true
    idHospital?: true
    idSite?: true
    _all?: true
  }

  export type HospitalSiteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HospitalSite to aggregate.
     */
    where?: HospitalSiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HospitalSites to fetch.
     */
    orderBy?: HospitalSiteOrderByWithRelationInput | HospitalSiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HospitalSiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HospitalSites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HospitalSites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HospitalSites
    **/
    _count?: true | HospitalSiteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HospitalSiteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HospitalSiteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HospitalSiteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HospitalSiteMaxAggregateInputType
  }

  export type GetHospitalSiteAggregateType<T extends HospitalSiteAggregateArgs> = {
        [P in keyof T & keyof AggregateHospitalSite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHospitalSite[P]>
      : GetScalarType<T[P], AggregateHospitalSite[P]>
  }




  export type HospitalSiteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HospitalSiteWhereInput
    orderBy?: HospitalSiteOrderByWithAggregationInput | HospitalSiteOrderByWithAggregationInput[]
    by: HospitalSiteScalarFieldEnum[] | HospitalSiteScalarFieldEnum
    having?: HospitalSiteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HospitalSiteCountAggregateInputType | true
    _avg?: HospitalSiteAvgAggregateInputType
    _sum?: HospitalSiteSumAggregateInputType
    _min?: HospitalSiteMinAggregateInputType
    _max?: HospitalSiteMaxAggregateInputType
  }

  export type HospitalSiteGroupByOutputType = {
    id: number
    idHospital: number
    idSite: number
    _count: HospitalSiteCountAggregateOutputType | null
    _avg: HospitalSiteAvgAggregateOutputType | null
    _sum: HospitalSiteSumAggregateOutputType | null
    _min: HospitalSiteMinAggregateOutputType | null
    _max: HospitalSiteMaxAggregateOutputType | null
  }

  type GetHospitalSiteGroupByPayload<T extends HospitalSiteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HospitalSiteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HospitalSiteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HospitalSiteGroupByOutputType[P]>
            : GetScalarType<T[P], HospitalSiteGroupByOutputType[P]>
        }
      >
    >


  export type HospitalSiteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    idHospital?: boolean
    idSite?: boolean
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    Site?: boolean | SiteDefaultArgs<ExtArgs>
    BookSchedule?: boolean | HospitalSite$BookScheduleArgs<ExtArgs>
    _count?: boolean | HospitalSiteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["hospitalSite"]>

  export type HospitalSiteSelectScalar = {
    id?: boolean
    idHospital?: boolean
    idSite?: boolean
  }

  export type HospitalSiteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    Site?: boolean | SiteDefaultArgs<ExtArgs>
    BookSchedule?: boolean | HospitalSite$BookScheduleArgs<ExtArgs>
    _count?: boolean | HospitalSiteCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $HospitalSitePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HospitalSite"
    objects: {
      Hospital: Prisma.$HospitalPayload<ExtArgs>
      Site: Prisma.$SitePayload<ExtArgs>
      BookSchedule: Prisma.$BookSchedulePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      idHospital: number
      idSite: number
    }, ExtArgs["result"]["hospitalSite"]>
    composites: {}
  }


  type HospitalSiteGetPayload<S extends boolean | null | undefined | HospitalSiteDefaultArgs> = $Result.GetResult<Prisma.$HospitalSitePayload, S>

  type HospitalSiteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HospitalSiteFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: HospitalSiteCountAggregateInputType | true
    }

  export interface HospitalSiteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HospitalSite'], meta: { name: 'HospitalSite' } }
    /**
     * Find zero or one HospitalSite that matches the filter.
     * @param {HospitalSiteFindUniqueArgs} args - Arguments to find a HospitalSite
     * @example
     * // Get one HospitalSite
     * const hospitalSite = await prisma.hospitalSite.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HospitalSiteFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, HospitalSiteFindUniqueArgs<ExtArgs>>
    ): Prisma__HospitalSiteClient<$Result.GetResult<Prisma.$HospitalSitePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one HospitalSite that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HospitalSiteFindUniqueOrThrowArgs} args - Arguments to find a HospitalSite
     * @example
     * // Get one HospitalSite
     * const hospitalSite = await prisma.hospitalSite.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HospitalSiteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HospitalSiteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__HospitalSiteClient<$Result.GetResult<Prisma.$HospitalSitePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first HospitalSite that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalSiteFindFirstArgs} args - Arguments to find a HospitalSite
     * @example
     * // Get one HospitalSite
     * const hospitalSite = await prisma.hospitalSite.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HospitalSiteFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, HospitalSiteFindFirstArgs<ExtArgs>>
    ): Prisma__HospitalSiteClient<$Result.GetResult<Prisma.$HospitalSitePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first HospitalSite that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalSiteFindFirstOrThrowArgs} args - Arguments to find a HospitalSite
     * @example
     * // Get one HospitalSite
     * const hospitalSite = await prisma.hospitalSite.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HospitalSiteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HospitalSiteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__HospitalSiteClient<$Result.GetResult<Prisma.$HospitalSitePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more HospitalSites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalSiteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HospitalSites
     * const hospitalSites = await prisma.hospitalSite.findMany()
     * 
     * // Get first 10 HospitalSites
     * const hospitalSites = await prisma.hospitalSite.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hospitalSiteWithIdOnly = await prisma.hospitalSite.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HospitalSiteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HospitalSiteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HospitalSitePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a HospitalSite.
     * @param {HospitalSiteCreateArgs} args - Arguments to create a HospitalSite.
     * @example
     * // Create one HospitalSite
     * const HospitalSite = await prisma.hospitalSite.create({
     *   data: {
     *     // ... data to create a HospitalSite
     *   }
     * })
     * 
    **/
    create<T extends HospitalSiteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, HospitalSiteCreateArgs<ExtArgs>>
    ): Prisma__HospitalSiteClient<$Result.GetResult<Prisma.$HospitalSitePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many HospitalSites.
     *     @param {HospitalSiteCreateManyArgs} args - Arguments to create many HospitalSites.
     *     @example
     *     // Create many HospitalSites
     *     const hospitalSite = await prisma.hospitalSite.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HospitalSiteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HospitalSiteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a HospitalSite.
     * @param {HospitalSiteDeleteArgs} args - Arguments to delete one HospitalSite.
     * @example
     * // Delete one HospitalSite
     * const HospitalSite = await prisma.hospitalSite.delete({
     *   where: {
     *     // ... filter to delete one HospitalSite
     *   }
     * })
     * 
    **/
    delete<T extends HospitalSiteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, HospitalSiteDeleteArgs<ExtArgs>>
    ): Prisma__HospitalSiteClient<$Result.GetResult<Prisma.$HospitalSitePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one HospitalSite.
     * @param {HospitalSiteUpdateArgs} args - Arguments to update one HospitalSite.
     * @example
     * // Update one HospitalSite
     * const hospitalSite = await prisma.hospitalSite.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HospitalSiteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, HospitalSiteUpdateArgs<ExtArgs>>
    ): Prisma__HospitalSiteClient<$Result.GetResult<Prisma.$HospitalSitePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more HospitalSites.
     * @param {HospitalSiteDeleteManyArgs} args - Arguments to filter HospitalSites to delete.
     * @example
     * // Delete a few HospitalSites
     * const { count } = await prisma.hospitalSite.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HospitalSiteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HospitalSiteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HospitalSites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalSiteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HospitalSites
     * const hospitalSite = await prisma.hospitalSite.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HospitalSiteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, HospitalSiteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HospitalSite.
     * @param {HospitalSiteUpsertArgs} args - Arguments to update or create a HospitalSite.
     * @example
     * // Update or create a HospitalSite
     * const hospitalSite = await prisma.hospitalSite.upsert({
     *   create: {
     *     // ... data to create a HospitalSite
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HospitalSite we want to update
     *   }
     * })
    **/
    upsert<T extends HospitalSiteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, HospitalSiteUpsertArgs<ExtArgs>>
    ): Prisma__HospitalSiteClient<$Result.GetResult<Prisma.$HospitalSitePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of HospitalSites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalSiteCountArgs} args - Arguments to filter HospitalSites to count.
     * @example
     * // Count the number of HospitalSites
     * const count = await prisma.hospitalSite.count({
     *   where: {
     *     // ... the filter for the HospitalSites we want to count
     *   }
     * })
    **/
    count<T extends HospitalSiteCountArgs>(
      args?: Subset<T, HospitalSiteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HospitalSiteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HospitalSite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalSiteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HospitalSiteAggregateArgs>(args: Subset<T, HospitalSiteAggregateArgs>): Prisma.PrismaPromise<GetHospitalSiteAggregateType<T>>

    /**
     * Group by HospitalSite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalSiteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HospitalSiteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HospitalSiteGroupByArgs['orderBy'] }
        : { orderBy?: HospitalSiteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HospitalSiteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHospitalSiteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HospitalSite model
   */
  readonly fields: HospitalSiteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HospitalSite.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HospitalSiteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Hospital<T extends HospitalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HospitalDefaultArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Site<T extends SiteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SiteDefaultArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    BookSchedule<T extends HospitalSite$BookScheduleArgs<ExtArgs> = {}>(args?: Subset<T, HospitalSite$BookScheduleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookSchedulePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the HospitalSite model
   */ 
  interface HospitalSiteFieldRefs {
    readonly id: FieldRef<"HospitalSite", 'Int'>
    readonly idHospital: FieldRef<"HospitalSite", 'Int'>
    readonly idSite: FieldRef<"HospitalSite", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * HospitalSite findUnique
   */
  export type HospitalSiteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HospitalSite
     */
    select?: HospitalSiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HospitalSiteInclude<ExtArgs> | null
    /**
     * Filter, which HospitalSite to fetch.
     */
    where: HospitalSiteWhereUniqueInput
  }


  /**
   * HospitalSite findUniqueOrThrow
   */
  export type HospitalSiteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HospitalSite
     */
    select?: HospitalSiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HospitalSiteInclude<ExtArgs> | null
    /**
     * Filter, which HospitalSite to fetch.
     */
    where: HospitalSiteWhereUniqueInput
  }


  /**
   * HospitalSite findFirst
   */
  export type HospitalSiteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HospitalSite
     */
    select?: HospitalSiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HospitalSiteInclude<ExtArgs> | null
    /**
     * Filter, which HospitalSite to fetch.
     */
    where?: HospitalSiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HospitalSites to fetch.
     */
    orderBy?: HospitalSiteOrderByWithRelationInput | HospitalSiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HospitalSites.
     */
    cursor?: HospitalSiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HospitalSites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HospitalSites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HospitalSites.
     */
    distinct?: HospitalSiteScalarFieldEnum | HospitalSiteScalarFieldEnum[]
  }


  /**
   * HospitalSite findFirstOrThrow
   */
  export type HospitalSiteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HospitalSite
     */
    select?: HospitalSiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HospitalSiteInclude<ExtArgs> | null
    /**
     * Filter, which HospitalSite to fetch.
     */
    where?: HospitalSiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HospitalSites to fetch.
     */
    orderBy?: HospitalSiteOrderByWithRelationInput | HospitalSiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HospitalSites.
     */
    cursor?: HospitalSiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HospitalSites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HospitalSites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HospitalSites.
     */
    distinct?: HospitalSiteScalarFieldEnum | HospitalSiteScalarFieldEnum[]
  }


  /**
   * HospitalSite findMany
   */
  export type HospitalSiteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HospitalSite
     */
    select?: HospitalSiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HospitalSiteInclude<ExtArgs> | null
    /**
     * Filter, which HospitalSites to fetch.
     */
    where?: HospitalSiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HospitalSites to fetch.
     */
    orderBy?: HospitalSiteOrderByWithRelationInput | HospitalSiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HospitalSites.
     */
    cursor?: HospitalSiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HospitalSites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HospitalSites.
     */
    skip?: number
    distinct?: HospitalSiteScalarFieldEnum | HospitalSiteScalarFieldEnum[]
  }


  /**
   * HospitalSite create
   */
  export type HospitalSiteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HospitalSite
     */
    select?: HospitalSiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HospitalSiteInclude<ExtArgs> | null
    /**
     * The data needed to create a HospitalSite.
     */
    data: XOR<HospitalSiteCreateInput, HospitalSiteUncheckedCreateInput>
  }


  /**
   * HospitalSite createMany
   */
  export type HospitalSiteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HospitalSites.
     */
    data: HospitalSiteCreateManyInput | HospitalSiteCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * HospitalSite update
   */
  export type HospitalSiteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HospitalSite
     */
    select?: HospitalSiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HospitalSiteInclude<ExtArgs> | null
    /**
     * The data needed to update a HospitalSite.
     */
    data: XOR<HospitalSiteUpdateInput, HospitalSiteUncheckedUpdateInput>
    /**
     * Choose, which HospitalSite to update.
     */
    where: HospitalSiteWhereUniqueInput
  }


  /**
   * HospitalSite updateMany
   */
  export type HospitalSiteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HospitalSites.
     */
    data: XOR<HospitalSiteUpdateManyMutationInput, HospitalSiteUncheckedUpdateManyInput>
    /**
     * Filter which HospitalSites to update
     */
    where?: HospitalSiteWhereInput
  }


  /**
   * HospitalSite upsert
   */
  export type HospitalSiteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HospitalSite
     */
    select?: HospitalSiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HospitalSiteInclude<ExtArgs> | null
    /**
     * The filter to search for the HospitalSite to update in case it exists.
     */
    where: HospitalSiteWhereUniqueInput
    /**
     * In case the HospitalSite found by the `where` argument doesn't exist, create a new HospitalSite with this data.
     */
    create: XOR<HospitalSiteCreateInput, HospitalSiteUncheckedCreateInput>
    /**
     * In case the HospitalSite was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HospitalSiteUpdateInput, HospitalSiteUncheckedUpdateInput>
  }


  /**
   * HospitalSite delete
   */
  export type HospitalSiteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HospitalSite
     */
    select?: HospitalSiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HospitalSiteInclude<ExtArgs> | null
    /**
     * Filter which HospitalSite to delete.
     */
    where: HospitalSiteWhereUniqueInput
  }


  /**
   * HospitalSite deleteMany
   */
  export type HospitalSiteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HospitalSites to delete
     */
    where?: HospitalSiteWhereInput
  }


  /**
   * HospitalSite.BookSchedule
   */
  export type HospitalSite$BookScheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSchedule
     */
    select?: BookScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookScheduleInclude<ExtArgs> | null
    where?: BookScheduleWhereInput
    orderBy?: BookScheduleOrderByWithRelationInput | BookScheduleOrderByWithRelationInput[]
    cursor?: BookScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookScheduleScalarFieldEnum | BookScheduleScalarFieldEnum[]
  }


  /**
   * HospitalSite without action
   */
  export type HospitalSiteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HospitalSite
     */
    select?: HospitalSiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HospitalSiteInclude<ExtArgs> | null
  }



  /**
   * Model Phone
   */

  export type AggregatePhone = {
    _count: PhoneCountAggregateOutputType | null
    _avg: PhoneAvgAggregateOutputType | null
    _sum: PhoneSumAggregateOutputType | null
    _min: PhoneMinAggregateOutputType | null
    _max: PhoneMaxAggregateOutputType | null
  }

  export type PhoneAvgAggregateOutputType = {
    id: number | null
    idHospital: number | null
  }

  export type PhoneSumAggregateOutputType = {
    id: number | null
    idHospital: number | null
  }

  export type PhoneMinAggregateOutputType = {
    id: number | null
    phone: string | null
    idHospital: number | null
  }

  export type PhoneMaxAggregateOutputType = {
    id: number | null
    phone: string | null
    idHospital: number | null
  }

  export type PhoneCountAggregateOutputType = {
    id: number
    phone: number
    idHospital: number
    _all: number
  }


  export type PhoneAvgAggregateInputType = {
    id?: true
    idHospital?: true
  }

  export type PhoneSumAggregateInputType = {
    id?: true
    idHospital?: true
  }

  export type PhoneMinAggregateInputType = {
    id?: true
    phone?: true
    idHospital?: true
  }

  export type PhoneMaxAggregateInputType = {
    id?: true
    phone?: true
    idHospital?: true
  }

  export type PhoneCountAggregateInputType = {
    id?: true
    phone?: true
    idHospital?: true
    _all?: true
  }

  export type PhoneAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Phone to aggregate.
     */
    where?: PhoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Phones to fetch.
     */
    orderBy?: PhoneOrderByWithRelationInput | PhoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PhoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Phones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Phones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Phones
    **/
    _count?: true | PhoneCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PhoneAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PhoneSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PhoneMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PhoneMaxAggregateInputType
  }

  export type GetPhoneAggregateType<T extends PhoneAggregateArgs> = {
        [P in keyof T & keyof AggregatePhone]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePhone[P]>
      : GetScalarType<T[P], AggregatePhone[P]>
  }




  export type PhoneGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PhoneWhereInput
    orderBy?: PhoneOrderByWithAggregationInput | PhoneOrderByWithAggregationInput[]
    by: PhoneScalarFieldEnum[] | PhoneScalarFieldEnum
    having?: PhoneScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PhoneCountAggregateInputType | true
    _avg?: PhoneAvgAggregateInputType
    _sum?: PhoneSumAggregateInputType
    _min?: PhoneMinAggregateInputType
    _max?: PhoneMaxAggregateInputType
  }

  export type PhoneGroupByOutputType = {
    id: number
    phone: string
    idHospital: number
    _count: PhoneCountAggregateOutputType | null
    _avg: PhoneAvgAggregateOutputType | null
    _sum: PhoneSumAggregateOutputType | null
    _min: PhoneMinAggregateOutputType | null
    _max: PhoneMaxAggregateOutputType | null
  }

  type GetPhoneGroupByPayload<T extends PhoneGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PhoneGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PhoneGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PhoneGroupByOutputType[P]>
            : GetScalarType<T[P], PhoneGroupByOutputType[P]>
        }
      >
    >


  export type PhoneSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    phone?: boolean
    idHospital?: boolean
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["phone"]>

  export type PhoneSelectScalar = {
    id?: boolean
    phone?: boolean
    idHospital?: boolean
  }

  export type PhoneInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }


  export type $PhonePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Phone"
    objects: {
      Hospital: Prisma.$HospitalPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      phone: string
      idHospital: number
    }, ExtArgs["result"]["phone"]>
    composites: {}
  }


  type PhoneGetPayload<S extends boolean | null | undefined | PhoneDefaultArgs> = $Result.GetResult<Prisma.$PhonePayload, S>

  type PhoneCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PhoneFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: PhoneCountAggregateInputType | true
    }

  export interface PhoneDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Phone'], meta: { name: 'Phone' } }
    /**
     * Find zero or one Phone that matches the filter.
     * @param {PhoneFindUniqueArgs} args - Arguments to find a Phone
     * @example
     * // Get one Phone
     * const phone = await prisma.phone.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PhoneFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PhoneFindUniqueArgs<ExtArgs>>
    ): Prisma__PhoneClient<$Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Phone that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PhoneFindUniqueOrThrowArgs} args - Arguments to find a Phone
     * @example
     * // Get one Phone
     * const phone = await prisma.phone.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PhoneFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PhoneFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PhoneClient<$Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Phone that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneFindFirstArgs} args - Arguments to find a Phone
     * @example
     * // Get one Phone
     * const phone = await prisma.phone.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PhoneFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PhoneFindFirstArgs<ExtArgs>>
    ): Prisma__PhoneClient<$Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Phone that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneFindFirstOrThrowArgs} args - Arguments to find a Phone
     * @example
     * // Get one Phone
     * const phone = await prisma.phone.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PhoneFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PhoneFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PhoneClient<$Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Phones that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Phones
     * const phones = await prisma.phone.findMany()
     * 
     * // Get first 10 Phones
     * const phones = await prisma.phone.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const phoneWithIdOnly = await prisma.phone.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PhoneFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PhoneFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Phone.
     * @param {PhoneCreateArgs} args - Arguments to create a Phone.
     * @example
     * // Create one Phone
     * const Phone = await prisma.phone.create({
     *   data: {
     *     // ... data to create a Phone
     *   }
     * })
     * 
    **/
    create<T extends PhoneCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PhoneCreateArgs<ExtArgs>>
    ): Prisma__PhoneClient<$Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Phones.
     *     @param {PhoneCreateManyArgs} args - Arguments to create many Phones.
     *     @example
     *     // Create many Phones
     *     const phone = await prisma.phone.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PhoneCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PhoneCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Phone.
     * @param {PhoneDeleteArgs} args - Arguments to delete one Phone.
     * @example
     * // Delete one Phone
     * const Phone = await prisma.phone.delete({
     *   where: {
     *     // ... filter to delete one Phone
     *   }
     * })
     * 
    **/
    delete<T extends PhoneDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PhoneDeleteArgs<ExtArgs>>
    ): Prisma__PhoneClient<$Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Phone.
     * @param {PhoneUpdateArgs} args - Arguments to update one Phone.
     * @example
     * // Update one Phone
     * const phone = await prisma.phone.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PhoneUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PhoneUpdateArgs<ExtArgs>>
    ): Prisma__PhoneClient<$Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Phones.
     * @param {PhoneDeleteManyArgs} args - Arguments to filter Phones to delete.
     * @example
     * // Delete a few Phones
     * const { count } = await prisma.phone.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PhoneDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PhoneDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Phones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Phones
     * const phone = await prisma.phone.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PhoneUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PhoneUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Phone.
     * @param {PhoneUpsertArgs} args - Arguments to update or create a Phone.
     * @example
     * // Update or create a Phone
     * const phone = await prisma.phone.upsert({
     *   create: {
     *     // ... data to create a Phone
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Phone we want to update
     *   }
     * })
    **/
    upsert<T extends PhoneUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PhoneUpsertArgs<ExtArgs>>
    ): Prisma__PhoneClient<$Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Phones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneCountArgs} args - Arguments to filter Phones to count.
     * @example
     * // Count the number of Phones
     * const count = await prisma.phone.count({
     *   where: {
     *     // ... the filter for the Phones we want to count
     *   }
     * })
    **/
    count<T extends PhoneCountArgs>(
      args?: Subset<T, PhoneCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PhoneCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Phone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PhoneAggregateArgs>(args: Subset<T, PhoneAggregateArgs>): Prisma.PrismaPromise<GetPhoneAggregateType<T>>

    /**
     * Group by Phone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PhoneGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PhoneGroupByArgs['orderBy'] }
        : { orderBy?: PhoneGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PhoneGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPhoneGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Phone model
   */
  readonly fields: PhoneFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Phone.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PhoneClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Hospital<T extends HospitalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HospitalDefaultArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Phone model
   */ 
  interface PhoneFieldRefs {
    readonly id: FieldRef<"Phone", 'Int'>
    readonly phone: FieldRef<"Phone", 'String'>
    readonly idHospital: FieldRef<"Phone", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Phone findUnique
   */
  export type PhoneFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phone
     */
    select?: PhoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhoneInclude<ExtArgs> | null
    /**
     * Filter, which Phone to fetch.
     */
    where: PhoneWhereUniqueInput
  }


  /**
   * Phone findUniqueOrThrow
   */
  export type PhoneFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phone
     */
    select?: PhoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhoneInclude<ExtArgs> | null
    /**
     * Filter, which Phone to fetch.
     */
    where: PhoneWhereUniqueInput
  }


  /**
   * Phone findFirst
   */
  export type PhoneFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phone
     */
    select?: PhoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhoneInclude<ExtArgs> | null
    /**
     * Filter, which Phone to fetch.
     */
    where?: PhoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Phones to fetch.
     */
    orderBy?: PhoneOrderByWithRelationInput | PhoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Phones.
     */
    cursor?: PhoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Phones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Phones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Phones.
     */
    distinct?: PhoneScalarFieldEnum | PhoneScalarFieldEnum[]
  }


  /**
   * Phone findFirstOrThrow
   */
  export type PhoneFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phone
     */
    select?: PhoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhoneInclude<ExtArgs> | null
    /**
     * Filter, which Phone to fetch.
     */
    where?: PhoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Phones to fetch.
     */
    orderBy?: PhoneOrderByWithRelationInput | PhoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Phones.
     */
    cursor?: PhoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Phones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Phones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Phones.
     */
    distinct?: PhoneScalarFieldEnum | PhoneScalarFieldEnum[]
  }


  /**
   * Phone findMany
   */
  export type PhoneFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phone
     */
    select?: PhoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhoneInclude<ExtArgs> | null
    /**
     * Filter, which Phones to fetch.
     */
    where?: PhoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Phones to fetch.
     */
    orderBy?: PhoneOrderByWithRelationInput | PhoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Phones.
     */
    cursor?: PhoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Phones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Phones.
     */
    skip?: number
    distinct?: PhoneScalarFieldEnum | PhoneScalarFieldEnum[]
  }


  /**
   * Phone create
   */
  export type PhoneCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phone
     */
    select?: PhoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhoneInclude<ExtArgs> | null
    /**
     * The data needed to create a Phone.
     */
    data: XOR<PhoneCreateInput, PhoneUncheckedCreateInput>
  }


  /**
   * Phone createMany
   */
  export type PhoneCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Phones.
     */
    data: PhoneCreateManyInput | PhoneCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Phone update
   */
  export type PhoneUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phone
     */
    select?: PhoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhoneInclude<ExtArgs> | null
    /**
     * The data needed to update a Phone.
     */
    data: XOR<PhoneUpdateInput, PhoneUncheckedUpdateInput>
    /**
     * Choose, which Phone to update.
     */
    where: PhoneWhereUniqueInput
  }


  /**
   * Phone updateMany
   */
  export type PhoneUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Phones.
     */
    data: XOR<PhoneUpdateManyMutationInput, PhoneUncheckedUpdateManyInput>
    /**
     * Filter which Phones to update
     */
    where?: PhoneWhereInput
  }


  /**
   * Phone upsert
   */
  export type PhoneUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phone
     */
    select?: PhoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhoneInclude<ExtArgs> | null
    /**
     * The filter to search for the Phone to update in case it exists.
     */
    where: PhoneWhereUniqueInput
    /**
     * In case the Phone found by the `where` argument doesn't exist, create a new Phone with this data.
     */
    create: XOR<PhoneCreateInput, PhoneUncheckedCreateInput>
    /**
     * In case the Phone was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PhoneUpdateInput, PhoneUncheckedUpdateInput>
  }


  /**
   * Phone delete
   */
  export type PhoneDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phone
     */
    select?: PhoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhoneInclude<ExtArgs> | null
    /**
     * Filter which Phone to delete.
     */
    where: PhoneWhereUniqueInput
  }


  /**
   * Phone deleteMany
   */
  export type PhoneDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Phones to delete
     */
    where?: PhoneWhereInput
  }


  /**
   * Phone without action
   */
  export type PhoneDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phone
     */
    select?: PhoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhoneInclude<ExtArgs> | null
  }



  /**
   * Model Photo
   */

  export type AggregatePhoto = {
    _count: PhotoCountAggregateOutputType | null
    _avg: PhotoAvgAggregateOutputType | null
    _sum: PhotoSumAggregateOutputType | null
    _min: PhotoMinAggregateOutputType | null
    _max: PhotoMaxAggregateOutputType | null
  }

  export type PhotoAvgAggregateOutputType = {
    id: number | null
    idHospital: number | null
  }

  export type PhotoSumAggregateOutputType = {
    id: number | null
    idHospital: number | null
  }

  export type PhotoMinAggregateOutputType = {
    id: number | null
    url: string | null
    idHospital: number | null
  }

  export type PhotoMaxAggregateOutputType = {
    id: number | null
    url: string | null
    idHospital: number | null
  }

  export type PhotoCountAggregateOutputType = {
    id: number
    url: number
    idHospital: number
    _all: number
  }


  export type PhotoAvgAggregateInputType = {
    id?: true
    idHospital?: true
  }

  export type PhotoSumAggregateInputType = {
    id?: true
    idHospital?: true
  }

  export type PhotoMinAggregateInputType = {
    id?: true
    url?: true
    idHospital?: true
  }

  export type PhotoMaxAggregateInputType = {
    id?: true
    url?: true
    idHospital?: true
  }

  export type PhotoCountAggregateInputType = {
    id?: true
    url?: true
    idHospital?: true
    _all?: true
  }

  export type PhotoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Photo to aggregate.
     */
    where?: PhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Photos to fetch.
     */
    orderBy?: PhotoOrderByWithRelationInput | PhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Photos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Photos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Photos
    **/
    _count?: true | PhotoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PhotoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PhotoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PhotoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PhotoMaxAggregateInputType
  }

  export type GetPhotoAggregateType<T extends PhotoAggregateArgs> = {
        [P in keyof T & keyof AggregatePhoto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePhoto[P]>
      : GetScalarType<T[P], AggregatePhoto[P]>
  }




  export type PhotoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PhotoWhereInput
    orderBy?: PhotoOrderByWithAggregationInput | PhotoOrderByWithAggregationInput[]
    by: PhotoScalarFieldEnum[] | PhotoScalarFieldEnum
    having?: PhotoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PhotoCountAggregateInputType | true
    _avg?: PhotoAvgAggregateInputType
    _sum?: PhotoSumAggregateInputType
    _min?: PhotoMinAggregateInputType
    _max?: PhotoMaxAggregateInputType
  }

  export type PhotoGroupByOutputType = {
    id: number
    url: string
    idHospital: number
    _count: PhotoCountAggregateOutputType | null
    _avg: PhotoAvgAggregateOutputType | null
    _sum: PhotoSumAggregateOutputType | null
    _min: PhotoMinAggregateOutputType | null
    _max: PhotoMaxAggregateOutputType | null
  }

  type GetPhotoGroupByPayload<T extends PhotoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PhotoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PhotoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PhotoGroupByOutputType[P]>
            : GetScalarType<T[P], PhotoGroupByOutputType[P]>
        }
      >
    >


  export type PhotoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    idHospital?: boolean
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["photo"]>

  export type PhotoSelectScalar = {
    id?: boolean
    url?: boolean
    idHospital?: boolean
  }

  export type PhotoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }


  export type $PhotoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Photo"
    objects: {
      Hospital: Prisma.$HospitalPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      url: string
      idHospital: number
    }, ExtArgs["result"]["photo"]>
    composites: {}
  }


  type PhotoGetPayload<S extends boolean | null | undefined | PhotoDefaultArgs> = $Result.GetResult<Prisma.$PhotoPayload, S>

  type PhotoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PhotoFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: PhotoCountAggregateInputType | true
    }

  export interface PhotoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Photo'], meta: { name: 'Photo' } }
    /**
     * Find zero or one Photo that matches the filter.
     * @param {PhotoFindUniqueArgs} args - Arguments to find a Photo
     * @example
     * // Get one Photo
     * const photo = await prisma.photo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PhotoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PhotoFindUniqueArgs<ExtArgs>>
    ): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Photo that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PhotoFindUniqueOrThrowArgs} args - Arguments to find a Photo
     * @example
     * // Get one Photo
     * const photo = await prisma.photo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PhotoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PhotoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Photo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoFindFirstArgs} args - Arguments to find a Photo
     * @example
     * // Get one Photo
     * const photo = await prisma.photo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PhotoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PhotoFindFirstArgs<ExtArgs>>
    ): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Photo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoFindFirstOrThrowArgs} args - Arguments to find a Photo
     * @example
     * // Get one Photo
     * const photo = await prisma.photo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PhotoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PhotoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Photos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Photos
     * const photos = await prisma.photo.findMany()
     * 
     * // Get first 10 Photos
     * const photos = await prisma.photo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const photoWithIdOnly = await prisma.photo.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PhotoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PhotoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Photo.
     * @param {PhotoCreateArgs} args - Arguments to create a Photo.
     * @example
     * // Create one Photo
     * const Photo = await prisma.photo.create({
     *   data: {
     *     // ... data to create a Photo
     *   }
     * })
     * 
    **/
    create<T extends PhotoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PhotoCreateArgs<ExtArgs>>
    ): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Photos.
     *     @param {PhotoCreateManyArgs} args - Arguments to create many Photos.
     *     @example
     *     // Create many Photos
     *     const photo = await prisma.photo.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PhotoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PhotoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Photo.
     * @param {PhotoDeleteArgs} args - Arguments to delete one Photo.
     * @example
     * // Delete one Photo
     * const Photo = await prisma.photo.delete({
     *   where: {
     *     // ... filter to delete one Photo
     *   }
     * })
     * 
    **/
    delete<T extends PhotoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PhotoDeleteArgs<ExtArgs>>
    ): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Photo.
     * @param {PhotoUpdateArgs} args - Arguments to update one Photo.
     * @example
     * // Update one Photo
     * const photo = await prisma.photo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PhotoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PhotoUpdateArgs<ExtArgs>>
    ): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Photos.
     * @param {PhotoDeleteManyArgs} args - Arguments to filter Photos to delete.
     * @example
     * // Delete a few Photos
     * const { count } = await prisma.photo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PhotoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PhotoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Photos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Photos
     * const photo = await prisma.photo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PhotoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PhotoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Photo.
     * @param {PhotoUpsertArgs} args - Arguments to update or create a Photo.
     * @example
     * // Update or create a Photo
     * const photo = await prisma.photo.upsert({
     *   create: {
     *     // ... data to create a Photo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Photo we want to update
     *   }
     * })
    **/
    upsert<T extends PhotoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PhotoUpsertArgs<ExtArgs>>
    ): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Photos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoCountArgs} args - Arguments to filter Photos to count.
     * @example
     * // Count the number of Photos
     * const count = await prisma.photo.count({
     *   where: {
     *     // ... the filter for the Photos we want to count
     *   }
     * })
    **/
    count<T extends PhotoCountArgs>(
      args?: Subset<T, PhotoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PhotoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Photo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PhotoAggregateArgs>(args: Subset<T, PhotoAggregateArgs>): Prisma.PrismaPromise<GetPhotoAggregateType<T>>

    /**
     * Group by Photo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PhotoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PhotoGroupByArgs['orderBy'] }
        : { orderBy?: PhotoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PhotoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPhotoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Photo model
   */
  readonly fields: PhotoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Photo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PhotoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Hospital<T extends HospitalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HospitalDefaultArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Photo model
   */ 
  interface PhotoFieldRefs {
    readonly id: FieldRef<"Photo", 'Int'>
    readonly url: FieldRef<"Photo", 'String'>
    readonly idHospital: FieldRef<"Photo", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Photo findUnique
   */
  export type PhotoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * Filter, which Photo to fetch.
     */
    where: PhotoWhereUniqueInput
  }


  /**
   * Photo findUniqueOrThrow
   */
  export type PhotoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * Filter, which Photo to fetch.
     */
    where: PhotoWhereUniqueInput
  }


  /**
   * Photo findFirst
   */
  export type PhotoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * Filter, which Photo to fetch.
     */
    where?: PhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Photos to fetch.
     */
    orderBy?: PhotoOrderByWithRelationInput | PhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Photos.
     */
    cursor?: PhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Photos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Photos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Photos.
     */
    distinct?: PhotoScalarFieldEnum | PhotoScalarFieldEnum[]
  }


  /**
   * Photo findFirstOrThrow
   */
  export type PhotoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * Filter, which Photo to fetch.
     */
    where?: PhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Photos to fetch.
     */
    orderBy?: PhotoOrderByWithRelationInput | PhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Photos.
     */
    cursor?: PhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Photos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Photos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Photos.
     */
    distinct?: PhotoScalarFieldEnum | PhotoScalarFieldEnum[]
  }


  /**
   * Photo findMany
   */
  export type PhotoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * Filter, which Photos to fetch.
     */
    where?: PhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Photos to fetch.
     */
    orderBy?: PhotoOrderByWithRelationInput | PhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Photos.
     */
    cursor?: PhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Photos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Photos.
     */
    skip?: number
    distinct?: PhotoScalarFieldEnum | PhotoScalarFieldEnum[]
  }


  /**
   * Photo create
   */
  export type PhotoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * The data needed to create a Photo.
     */
    data: XOR<PhotoCreateInput, PhotoUncheckedCreateInput>
  }


  /**
   * Photo createMany
   */
  export type PhotoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Photos.
     */
    data: PhotoCreateManyInput | PhotoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Photo update
   */
  export type PhotoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * The data needed to update a Photo.
     */
    data: XOR<PhotoUpdateInput, PhotoUncheckedUpdateInput>
    /**
     * Choose, which Photo to update.
     */
    where: PhotoWhereUniqueInput
  }


  /**
   * Photo updateMany
   */
  export type PhotoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Photos.
     */
    data: XOR<PhotoUpdateManyMutationInput, PhotoUncheckedUpdateManyInput>
    /**
     * Filter which Photos to update
     */
    where?: PhotoWhereInput
  }


  /**
   * Photo upsert
   */
  export type PhotoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * The filter to search for the Photo to update in case it exists.
     */
    where: PhotoWhereUniqueInput
    /**
     * In case the Photo found by the `where` argument doesn't exist, create a new Photo with this data.
     */
    create: XOR<PhotoCreateInput, PhotoUncheckedCreateInput>
    /**
     * In case the Photo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PhotoUpdateInput, PhotoUncheckedUpdateInput>
  }


  /**
   * Photo delete
   */
  export type PhotoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * Filter which Photo to delete.
     */
    where: PhotoWhereUniqueInput
  }


  /**
   * Photo deleteMany
   */
  export type PhotoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Photos to delete
     */
    where?: PhotoWhereInput
  }


  /**
   * Photo without action
   */
  export type PhotoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhotoInclude<ExtArgs> | null
  }



  /**
   * Model Star
   */

  export type AggregateStar = {
    _count: StarCountAggregateOutputType | null
    _avg: StarAvgAggregateOutputType | null
    _sum: StarSumAggregateOutputType | null
    _min: StarMinAggregateOutputType | null
    _max: StarMaxAggregateOutputType | null
  }

  export type StarAvgAggregateOutputType = {
    id: number | null
    starNumber: number | null
  }

  export type StarSumAggregateOutputType = {
    id: number | null
    starNumber: number | null
  }

  export type StarMinAggregateOutputType = {
    id: number | null
    starNumber: number | null
  }

  export type StarMaxAggregateOutputType = {
    id: number | null
    starNumber: number | null
  }

  export type StarCountAggregateOutputType = {
    id: number
    starNumber: number
    _all: number
  }


  export type StarAvgAggregateInputType = {
    id?: true
    starNumber?: true
  }

  export type StarSumAggregateInputType = {
    id?: true
    starNumber?: true
  }

  export type StarMinAggregateInputType = {
    id?: true
    starNumber?: true
  }

  export type StarMaxAggregateInputType = {
    id?: true
    starNumber?: true
  }

  export type StarCountAggregateInputType = {
    id?: true
    starNumber?: true
    _all?: true
  }

  export type StarAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Star to aggregate.
     */
    where?: StarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stars to fetch.
     */
    orderBy?: StarOrderByWithRelationInput | StarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stars
    **/
    _count?: true | StarCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StarAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StarSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StarMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StarMaxAggregateInputType
  }

  export type GetStarAggregateType<T extends StarAggregateArgs> = {
        [P in keyof T & keyof AggregateStar]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStar[P]>
      : GetScalarType<T[P], AggregateStar[P]>
  }




  export type StarGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StarWhereInput
    orderBy?: StarOrderByWithAggregationInput | StarOrderByWithAggregationInput[]
    by: StarScalarFieldEnum[] | StarScalarFieldEnum
    having?: StarScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StarCountAggregateInputType | true
    _avg?: StarAvgAggregateInputType
    _sum?: StarSumAggregateInputType
    _min?: StarMinAggregateInputType
    _max?: StarMaxAggregateInputType
  }

  export type StarGroupByOutputType = {
    id: number
    starNumber: number
    _count: StarCountAggregateOutputType | null
    _avg: StarAvgAggregateOutputType | null
    _sum: StarSumAggregateOutputType | null
    _min: StarMinAggregateOutputType | null
    _max: StarMaxAggregateOutputType | null
  }

  type GetStarGroupByPayload<T extends StarGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StarGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StarGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StarGroupByOutputType[P]>
            : GetScalarType<T[P], StarGroupByOutputType[P]>
        }
      >
    >


  export type StarSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    starNumber?: boolean
    Review?: boolean | Star$ReviewArgs<ExtArgs>
    _count?: boolean | StarCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["star"]>

  export type StarSelectScalar = {
    id?: boolean
    starNumber?: boolean
  }

  export type StarInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Review?: boolean | Star$ReviewArgs<ExtArgs>
    _count?: boolean | StarCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $StarPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Star"
    objects: {
      Review: Prisma.$ReviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      starNumber: number
    }, ExtArgs["result"]["star"]>
    composites: {}
  }


  type StarGetPayload<S extends boolean | null | undefined | StarDefaultArgs> = $Result.GetResult<Prisma.$StarPayload, S>

  type StarCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StarFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: StarCountAggregateInputType | true
    }

  export interface StarDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Star'], meta: { name: 'Star' } }
    /**
     * Find zero or one Star that matches the filter.
     * @param {StarFindUniqueArgs} args - Arguments to find a Star
     * @example
     * // Get one Star
     * const star = await prisma.star.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StarFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StarFindUniqueArgs<ExtArgs>>
    ): Prisma__StarClient<$Result.GetResult<Prisma.$StarPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Star that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StarFindUniqueOrThrowArgs} args - Arguments to find a Star
     * @example
     * // Get one Star
     * const star = await prisma.star.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StarFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StarFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StarClient<$Result.GetResult<Prisma.$StarPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Star that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StarFindFirstArgs} args - Arguments to find a Star
     * @example
     * // Get one Star
     * const star = await prisma.star.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StarFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StarFindFirstArgs<ExtArgs>>
    ): Prisma__StarClient<$Result.GetResult<Prisma.$StarPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Star that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StarFindFirstOrThrowArgs} args - Arguments to find a Star
     * @example
     * // Get one Star
     * const star = await prisma.star.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StarFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StarFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StarClient<$Result.GetResult<Prisma.$StarPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Stars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StarFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stars
     * const stars = await prisma.star.findMany()
     * 
     * // Get first 10 Stars
     * const stars = await prisma.star.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const starWithIdOnly = await prisma.star.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StarFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StarFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StarPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Star.
     * @param {StarCreateArgs} args - Arguments to create a Star.
     * @example
     * // Create one Star
     * const Star = await prisma.star.create({
     *   data: {
     *     // ... data to create a Star
     *   }
     * })
     * 
    **/
    create<T extends StarCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StarCreateArgs<ExtArgs>>
    ): Prisma__StarClient<$Result.GetResult<Prisma.$StarPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Stars.
     *     @param {StarCreateManyArgs} args - Arguments to create many Stars.
     *     @example
     *     // Create many Stars
     *     const star = await prisma.star.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StarCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StarCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Star.
     * @param {StarDeleteArgs} args - Arguments to delete one Star.
     * @example
     * // Delete one Star
     * const Star = await prisma.star.delete({
     *   where: {
     *     // ... filter to delete one Star
     *   }
     * })
     * 
    **/
    delete<T extends StarDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StarDeleteArgs<ExtArgs>>
    ): Prisma__StarClient<$Result.GetResult<Prisma.$StarPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Star.
     * @param {StarUpdateArgs} args - Arguments to update one Star.
     * @example
     * // Update one Star
     * const star = await prisma.star.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StarUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StarUpdateArgs<ExtArgs>>
    ): Prisma__StarClient<$Result.GetResult<Prisma.$StarPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Stars.
     * @param {StarDeleteManyArgs} args - Arguments to filter Stars to delete.
     * @example
     * // Delete a few Stars
     * const { count } = await prisma.star.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StarDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StarDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StarUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stars
     * const star = await prisma.star.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StarUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StarUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Star.
     * @param {StarUpsertArgs} args - Arguments to update or create a Star.
     * @example
     * // Update or create a Star
     * const star = await prisma.star.upsert({
     *   create: {
     *     // ... data to create a Star
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Star we want to update
     *   }
     * })
    **/
    upsert<T extends StarUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StarUpsertArgs<ExtArgs>>
    ): Prisma__StarClient<$Result.GetResult<Prisma.$StarPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Stars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StarCountArgs} args - Arguments to filter Stars to count.
     * @example
     * // Count the number of Stars
     * const count = await prisma.star.count({
     *   where: {
     *     // ... the filter for the Stars we want to count
     *   }
     * })
    **/
    count<T extends StarCountArgs>(
      args?: Subset<T, StarCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StarCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Star.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StarAggregateArgs>(args: Subset<T, StarAggregateArgs>): Prisma.PrismaPromise<GetStarAggregateType<T>>

    /**
     * Group by Star.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StarGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StarGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StarGroupByArgs['orderBy'] }
        : { orderBy?: StarGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStarGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Star model
   */
  readonly fields: StarFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Star.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StarClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Review<T extends Star$ReviewArgs<ExtArgs> = {}>(args?: Subset<T, Star$ReviewArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Star model
   */ 
  interface StarFieldRefs {
    readonly id: FieldRef<"Star", 'Int'>
    readonly starNumber: FieldRef<"Star", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Star findUnique
   */
  export type StarFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Star
     */
    select?: StarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StarInclude<ExtArgs> | null
    /**
     * Filter, which Star to fetch.
     */
    where: StarWhereUniqueInput
  }


  /**
   * Star findUniqueOrThrow
   */
  export type StarFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Star
     */
    select?: StarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StarInclude<ExtArgs> | null
    /**
     * Filter, which Star to fetch.
     */
    where: StarWhereUniqueInput
  }


  /**
   * Star findFirst
   */
  export type StarFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Star
     */
    select?: StarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StarInclude<ExtArgs> | null
    /**
     * Filter, which Star to fetch.
     */
    where?: StarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stars to fetch.
     */
    orderBy?: StarOrderByWithRelationInput | StarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stars.
     */
    cursor?: StarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stars.
     */
    distinct?: StarScalarFieldEnum | StarScalarFieldEnum[]
  }


  /**
   * Star findFirstOrThrow
   */
  export type StarFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Star
     */
    select?: StarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StarInclude<ExtArgs> | null
    /**
     * Filter, which Star to fetch.
     */
    where?: StarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stars to fetch.
     */
    orderBy?: StarOrderByWithRelationInput | StarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stars.
     */
    cursor?: StarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stars.
     */
    distinct?: StarScalarFieldEnum | StarScalarFieldEnum[]
  }


  /**
   * Star findMany
   */
  export type StarFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Star
     */
    select?: StarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StarInclude<ExtArgs> | null
    /**
     * Filter, which Stars to fetch.
     */
    where?: StarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stars to fetch.
     */
    orderBy?: StarOrderByWithRelationInput | StarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stars.
     */
    cursor?: StarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stars.
     */
    skip?: number
    distinct?: StarScalarFieldEnum | StarScalarFieldEnum[]
  }


  /**
   * Star create
   */
  export type StarCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Star
     */
    select?: StarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StarInclude<ExtArgs> | null
    /**
     * The data needed to create a Star.
     */
    data: XOR<StarCreateInput, StarUncheckedCreateInput>
  }


  /**
   * Star createMany
   */
  export type StarCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stars.
     */
    data: StarCreateManyInput | StarCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Star update
   */
  export type StarUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Star
     */
    select?: StarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StarInclude<ExtArgs> | null
    /**
     * The data needed to update a Star.
     */
    data: XOR<StarUpdateInput, StarUncheckedUpdateInput>
    /**
     * Choose, which Star to update.
     */
    where: StarWhereUniqueInput
  }


  /**
   * Star updateMany
   */
  export type StarUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stars.
     */
    data: XOR<StarUpdateManyMutationInput, StarUncheckedUpdateManyInput>
    /**
     * Filter which Stars to update
     */
    where?: StarWhereInput
  }


  /**
   * Star upsert
   */
  export type StarUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Star
     */
    select?: StarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StarInclude<ExtArgs> | null
    /**
     * The filter to search for the Star to update in case it exists.
     */
    where: StarWhereUniqueInput
    /**
     * In case the Star found by the `where` argument doesn't exist, create a new Star with this data.
     */
    create: XOR<StarCreateInput, StarUncheckedCreateInput>
    /**
     * In case the Star was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StarUpdateInput, StarUncheckedUpdateInput>
  }


  /**
   * Star delete
   */
  export type StarDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Star
     */
    select?: StarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StarInclude<ExtArgs> | null
    /**
     * Filter which Star to delete.
     */
    where: StarWhereUniqueInput
  }


  /**
   * Star deleteMany
   */
  export type StarDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stars to delete
     */
    where?: StarWhereInput
  }


  /**
   * Star.Review
   */
  export type Star$ReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }


  /**
   * Star without action
   */
  export type StarDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Star
     */
    select?: StarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StarInclude<ExtArgs> | null
  }



  /**
   * Model Review
   */

  export type AggregateReview = {
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  export type ReviewAvgAggregateOutputType = {
    id: number | null
    idUser: number | null
    idHospital: number | null
    idStar: number | null
  }

  export type ReviewSumAggregateOutputType = {
    id: number | null
    idUser: number | null
    idHospital: number | null
    idStar: number | null
  }

  export type ReviewMinAggregateOutputType = {
    id: number | null
    opinion: string | null
    date: Date | null
    idUser: number | null
    idHospital: number | null
    idStar: number | null
  }

  export type ReviewMaxAggregateOutputType = {
    id: number | null
    opinion: string | null
    date: Date | null
    idUser: number | null
    idHospital: number | null
    idStar: number | null
  }

  export type ReviewCountAggregateOutputType = {
    id: number
    opinion: number
    date: number
    idUser: number
    idHospital: number
    idStar: number
    _all: number
  }


  export type ReviewAvgAggregateInputType = {
    id?: true
    idUser?: true
    idHospital?: true
    idStar?: true
  }

  export type ReviewSumAggregateInputType = {
    id?: true
    idUser?: true
    idHospital?: true
    idStar?: true
  }

  export type ReviewMinAggregateInputType = {
    id?: true
    opinion?: true
    date?: true
    idUser?: true
    idHospital?: true
    idStar?: true
  }

  export type ReviewMaxAggregateInputType = {
    id?: true
    opinion?: true
    date?: true
    idUser?: true
    idHospital?: true
    idStar?: true
  }

  export type ReviewCountAggregateInputType = {
    id?: true
    opinion?: true
    date?: true
    idUser?: true
    idHospital?: true
    idStar?: true
    _all?: true
  }

  export type ReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Review to aggregate.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reviews
    **/
    _count?: true | ReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMaxAggregateInputType
  }

  export type GetReviewAggregateType<T extends ReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReview[P]>
      : GetScalarType<T[P], AggregateReview[P]>
  }




  export type ReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithAggregationInput | ReviewOrderByWithAggregationInput[]
    by: ReviewScalarFieldEnum[] | ReviewScalarFieldEnum
    having?: ReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewCountAggregateInputType | true
    _avg?: ReviewAvgAggregateInputType
    _sum?: ReviewSumAggregateInputType
    _min?: ReviewMinAggregateInputType
    _max?: ReviewMaxAggregateInputType
  }

  export type ReviewGroupByOutputType = {
    id: number
    opinion: string
    date: Date
    idUser: number
    idHospital: number
    idStar: number
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  type GetReviewGroupByPayload<T extends ReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewGroupByOutputType[P]>
        }
      >
    >


  export type ReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    opinion?: boolean
    date?: boolean
    idUser?: boolean
    idHospital?: boolean
    idStar?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    Star?: boolean | StarDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectScalar = {
    id?: boolean
    opinion?: boolean
    date?: boolean
    idUser?: boolean
    idHospital?: boolean
    idStar?: boolean
  }

  export type ReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    Star?: boolean | StarDefaultArgs<ExtArgs>
  }


  export type $ReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Review"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
      Hospital: Prisma.$HospitalPayload<ExtArgs>
      Star: Prisma.$StarPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      opinion: string
      date: Date
      idUser: number
      idHospital: number
      idStar: number
    }, ExtArgs["result"]["review"]>
    composites: {}
  }


  type ReviewGetPayload<S extends boolean | null | undefined | ReviewDefaultArgs> = $Result.GetResult<Prisma.$ReviewPayload, S>

  type ReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReviewFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ReviewCountAggregateInputType | true
    }

  export interface ReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Review'], meta: { name: 'Review' } }
    /**
     * Find zero or one Review that matches the filter.
     * @param {ReviewFindUniqueArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReviewFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewFindUniqueArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Review that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReviewFindUniqueOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReviewFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReviewFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewFindFirstArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Review that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReviewFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.review.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.review.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewWithIdOnly = await prisma.review.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReviewFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Review.
     * @param {ReviewCreateArgs} args - Arguments to create a Review.
     * @example
     * // Create one Review
     * const Review = await prisma.review.create({
     *   data: {
     *     // ... data to create a Review
     *   }
     * })
     * 
    **/
    create<T extends ReviewCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewCreateArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Reviews.
     *     @param {ReviewCreateManyArgs} args - Arguments to create many Reviews.
     *     @example
     *     // Create many Reviews
     *     const review = await prisma.review.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReviewCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Review.
     * @param {ReviewDeleteArgs} args - Arguments to delete one Review.
     * @example
     * // Delete one Review
     * const Review = await prisma.review.delete({
     *   where: {
     *     // ... filter to delete one Review
     *   }
     * })
     * 
    **/
    delete<T extends ReviewDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewDeleteArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Review.
     * @param {ReviewUpdateArgs} args - Arguments to update one Review.
     * @example
     * // Update one Review
     * const review = await prisma.review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReviewUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewUpdateArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Reviews.
     * @param {ReviewDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReviewDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReviewUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Review.
     * @param {ReviewUpsertArgs} args - Arguments to update or create a Review.
     * @example
     * // Update or create a Review
     * const review = await prisma.review.upsert({
     *   create: {
     *     // ... data to create a Review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Review we want to update
     *   }
     * })
    **/
    upsert<T extends ReviewUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewUpsertArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.review.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewCountArgs>(
      args?: Subset<T, ReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewAggregateArgs>(args: Subset<T, ReviewAggregateArgs>): Prisma.PrismaPromise<GetReviewAggregateType<T>>

    /**
     * Group by Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewGroupByArgs['orderBy'] }
        : { orderBy?: ReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Review model
   */
  readonly fields: ReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Hospital<T extends HospitalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HospitalDefaultArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Star<T extends StarDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StarDefaultArgs<ExtArgs>>): Prisma__StarClient<$Result.GetResult<Prisma.$StarPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Review model
   */ 
  interface ReviewFieldRefs {
    readonly id: FieldRef<"Review", 'Int'>
    readonly opinion: FieldRef<"Review", 'String'>
    readonly date: FieldRef<"Review", 'DateTime'>
    readonly idUser: FieldRef<"Review", 'Int'>
    readonly idHospital: FieldRef<"Review", 'Int'>
    readonly idStar: FieldRef<"Review", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Review findUnique
   */
  export type ReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }


  /**
   * Review findUniqueOrThrow
   */
  export type ReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }


  /**
   * Review findFirst
   */
  export type ReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }


  /**
   * Review findFirstOrThrow
   */
  export type ReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }


  /**
   * Review findMany
   */
  export type ReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Reviews to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }


  /**
   * Review create
   */
  export type ReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a Review.
     */
    data: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
  }


  /**
   * Review createMany
   */
  export type ReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Review update
   */
  export type ReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a Review.
     */
    data: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
    /**
     * Choose, which Review to update.
     */
    where: ReviewWhereUniqueInput
  }


  /**
   * Review updateMany
   */
  export type ReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
  }


  /**
   * Review upsert
   */
  export type ReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the Review to update in case it exists.
     */
    where: ReviewWhereUniqueInput
    /**
     * In case the Review found by the `where` argument doesn't exist, create a new Review with this data.
     */
    create: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
    /**
     * In case the Review was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
  }


  /**
   * Review delete
   */
  export type ReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter which Review to delete.
     */
    where: ReviewWhereUniqueInput
  }


  /**
   * Review deleteMany
   */
  export type ReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reviews to delete
     */
    where?: ReviewWhereInput
  }


  /**
   * Review without action
   */
  export type ReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
  }



  /**
   * Model Status
   */

  export type AggregateStatus = {
    _count: StatusCountAggregateOutputType | null
    _avg: StatusAvgAggregateOutputType | null
    _sum: StatusSumAggregateOutputType | null
    _min: StatusMinAggregateOutputType | null
    _max: StatusMaxAggregateOutputType | null
  }

  export type StatusAvgAggregateOutputType = {
    id: number | null
  }

  export type StatusSumAggregateOutputType = {
    id: number | null
  }

  export type StatusMinAggregateOutputType = {
    id: number | null
    status: $Enums.STATUS | null
  }

  export type StatusMaxAggregateOutputType = {
    id: number | null
    status: $Enums.STATUS | null
  }

  export type StatusCountAggregateOutputType = {
    id: number
    status: number
    _all: number
  }


  export type StatusAvgAggregateInputType = {
    id?: true
  }

  export type StatusSumAggregateInputType = {
    id?: true
  }

  export type StatusMinAggregateInputType = {
    id?: true
    status?: true
  }

  export type StatusMaxAggregateInputType = {
    id?: true
    status?: true
  }

  export type StatusCountAggregateInputType = {
    id?: true
    status?: true
    _all?: true
  }

  export type StatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Status to aggregate.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Statuses
    **/
    _count?: true | StatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StatusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StatusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusMaxAggregateInputType
  }

  export type GetStatusAggregateType<T extends StatusAggregateArgs> = {
        [P in keyof T & keyof AggregateStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatus[P]>
      : GetScalarType<T[P], AggregateStatus[P]>
  }




  export type StatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusWhereInput
    orderBy?: StatusOrderByWithAggregationInput | StatusOrderByWithAggregationInput[]
    by: StatusScalarFieldEnum[] | StatusScalarFieldEnum
    having?: StatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusCountAggregateInputType | true
    _avg?: StatusAvgAggregateInputType
    _sum?: StatusSumAggregateInputType
    _min?: StatusMinAggregateInputType
    _max?: StatusMaxAggregateInputType
  }

  export type StatusGroupByOutputType = {
    id: number
    status: $Enums.STATUS
    _count: StatusCountAggregateOutputType | null
    _avg: StatusAvgAggregateOutputType | null
    _sum: StatusSumAggregateOutputType | null
    _min: StatusMinAggregateOutputType | null
    _max: StatusMaxAggregateOutputType | null
  }

  type GetStatusGroupByPayload<T extends StatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusGroupByOutputType[P]>
            : GetScalarType<T[P], StatusGroupByOutputType[P]>
        }
      >
    >


  export type StatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    ScheduleStatus?: boolean | Status$ScheduleStatusArgs<ExtArgs>
    _count?: boolean | StatusCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["status"]>

  export type StatusSelectScalar = {
    id?: boolean
    status?: boolean
  }

  export type StatusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ScheduleStatus?: boolean | Status$ScheduleStatusArgs<ExtArgs>
    _count?: boolean | StatusCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $StatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Status"
    objects: {
      ScheduleStatus: Prisma.$ScheduleStatusPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      status: $Enums.STATUS
    }, ExtArgs["result"]["status"]>
    composites: {}
  }


  type StatusGetPayload<S extends boolean | null | undefined | StatusDefaultArgs> = $Result.GetResult<Prisma.$StatusPayload, S>

  type StatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StatusFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: StatusCountAggregateInputType | true
    }

  export interface StatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Status'], meta: { name: 'Status' } }
    /**
     * Find zero or one Status that matches the filter.
     * @param {StatusFindUniqueArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StatusFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StatusFindUniqueArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Status that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StatusFindUniqueOrThrowArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StatusFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Status that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindFirstArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StatusFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusFindFirstArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Status that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindFirstOrThrowArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StatusFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Statuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Statuses
     * const statuses = await prisma.status.findMany()
     * 
     * // Get first 10 Statuses
     * const statuses = await prisma.status.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statusWithIdOnly = await prisma.status.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StatusFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Status.
     * @param {StatusCreateArgs} args - Arguments to create a Status.
     * @example
     * // Create one Status
     * const Status = await prisma.status.create({
     *   data: {
     *     // ... data to create a Status
     *   }
     * })
     * 
    **/
    create<T extends StatusCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StatusCreateArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Statuses.
     *     @param {StatusCreateManyArgs} args - Arguments to create many Statuses.
     *     @example
     *     // Create many Statuses
     *     const status = await prisma.status.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StatusCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Status.
     * @param {StatusDeleteArgs} args - Arguments to delete one Status.
     * @example
     * // Delete one Status
     * const Status = await prisma.status.delete({
     *   where: {
     *     // ... filter to delete one Status
     *   }
     * })
     * 
    **/
    delete<T extends StatusDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StatusDeleteArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Status.
     * @param {StatusUpdateArgs} args - Arguments to update one Status.
     * @example
     * // Update one Status
     * const status = await prisma.status.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StatusUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StatusUpdateArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Statuses.
     * @param {StatusDeleteManyArgs} args - Arguments to filter Statuses to delete.
     * @example
     * // Delete a few Statuses
     * const { count } = await prisma.status.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StatusDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Statuses
     * const status = await prisma.status.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StatusUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StatusUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Status.
     * @param {StatusUpsertArgs} args - Arguments to update or create a Status.
     * @example
     * // Update or create a Status
     * const status = await prisma.status.upsert({
     *   create: {
     *     // ... data to create a Status
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Status we want to update
     *   }
     * })
    **/
    upsert<T extends StatusUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StatusUpsertArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusCountArgs} args - Arguments to filter Statuses to count.
     * @example
     * // Count the number of Statuses
     * const count = await prisma.status.count({
     *   where: {
     *     // ... the filter for the Statuses we want to count
     *   }
     * })
    **/
    count<T extends StatusCountArgs>(
      args?: Subset<T, StatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusAggregateArgs>(args: Subset<T, StatusAggregateArgs>): Prisma.PrismaPromise<GetStatusAggregateType<T>>

    /**
     * Group by Status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatusGroupByArgs['orderBy'] }
        : { orderBy?: StatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Status model
   */
  readonly fields: StatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Status.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    ScheduleStatus<T extends Status$ScheduleStatusArgs<ExtArgs> = {}>(args?: Subset<T, Status$ScheduleStatusArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduleStatusPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Status model
   */ 
  interface StatusFieldRefs {
    readonly id: FieldRef<"Status", 'Int'>
    readonly status: FieldRef<"Status", 'STATUS'>
  }
    

  // Custom InputTypes

  /**
   * Status findUnique
   */
  export type StatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where: StatusWhereUniqueInput
  }


  /**
   * Status findUniqueOrThrow
   */
  export type StatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where: StatusWhereUniqueInput
  }


  /**
   * Status findFirst
   */
  export type StatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statuses.
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statuses.
     */
    distinct?: StatusScalarFieldEnum | StatusScalarFieldEnum[]
  }


  /**
   * Status findFirstOrThrow
   */
  export type StatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statuses.
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statuses.
     */
    distinct?: StatusScalarFieldEnum | StatusScalarFieldEnum[]
  }


  /**
   * Status findMany
   */
  export type StatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Statuses to fetch.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Statuses.
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    distinct?: StatusScalarFieldEnum | StatusScalarFieldEnum[]
  }


  /**
   * Status create
   */
  export type StatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * The data needed to create a Status.
     */
    data: XOR<StatusCreateInput, StatusUncheckedCreateInput>
  }


  /**
   * Status createMany
   */
  export type StatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Statuses.
     */
    data: StatusCreateManyInput | StatusCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Status update
   */
  export type StatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * The data needed to update a Status.
     */
    data: XOR<StatusUpdateInput, StatusUncheckedUpdateInput>
    /**
     * Choose, which Status to update.
     */
    where: StatusWhereUniqueInput
  }


  /**
   * Status updateMany
   */
  export type StatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Statuses.
     */
    data: XOR<StatusUpdateManyMutationInput, StatusUncheckedUpdateManyInput>
    /**
     * Filter which Statuses to update
     */
    where?: StatusWhereInput
  }


  /**
   * Status upsert
   */
  export type StatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * The filter to search for the Status to update in case it exists.
     */
    where: StatusWhereUniqueInput
    /**
     * In case the Status found by the `where` argument doesn't exist, create a new Status with this data.
     */
    create: XOR<StatusCreateInput, StatusUncheckedCreateInput>
    /**
     * In case the Status was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StatusUpdateInput, StatusUncheckedUpdateInput>
  }


  /**
   * Status delete
   */
  export type StatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter which Status to delete.
     */
    where: StatusWhereUniqueInput
  }


  /**
   * Status deleteMany
   */
  export type StatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Statuses to delete
     */
    where?: StatusWhereInput
  }


  /**
   * Status.ScheduleStatus
   */
  export type Status$ScheduleStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleStatus
     */
    select?: ScheduleStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleStatusInclude<ExtArgs> | null
    where?: ScheduleStatusWhereInput
    orderBy?: ScheduleStatusOrderByWithRelationInput | ScheduleStatusOrderByWithRelationInput[]
    cursor?: ScheduleStatusWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleStatusScalarFieldEnum | ScheduleStatusScalarFieldEnum[]
  }


  /**
   * Status without action
   */
  export type StatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude<ExtArgs> | null
  }



  /**
   * Model BookSchedule
   */

  export type AggregateBookSchedule = {
    _count: BookScheduleCountAggregateOutputType | null
    _avg: BookScheduleAvgAggregateOutputType | null
    _sum: BookScheduleSumAggregateOutputType | null
    _min: BookScheduleMinAggregateOutputType | null
    _max: BookScheduleMaxAggregateOutputType | null
  }

  export type BookScheduleAvgAggregateOutputType = {
    id: number | null
    idHospitalSite: number | null
  }

  export type BookScheduleSumAggregateOutputType = {
    id: number | null
    idHospitalSite: number | null
  }

  export type BookScheduleMinAggregateOutputType = {
    id: number | null
    date: Date | null
    hour: Date | null
    idHospitalSite: number | null
  }

  export type BookScheduleMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    hour: Date | null
    idHospitalSite: number | null
  }

  export type BookScheduleCountAggregateOutputType = {
    id: number
    date: number
    hour: number
    idHospitalSite: number
    _all: number
  }


  export type BookScheduleAvgAggregateInputType = {
    id?: true
    idHospitalSite?: true
  }

  export type BookScheduleSumAggregateInputType = {
    id?: true
    idHospitalSite?: true
  }

  export type BookScheduleMinAggregateInputType = {
    id?: true
    date?: true
    hour?: true
    idHospitalSite?: true
  }

  export type BookScheduleMaxAggregateInputType = {
    id?: true
    date?: true
    hour?: true
    idHospitalSite?: true
  }

  export type BookScheduleCountAggregateInputType = {
    id?: true
    date?: true
    hour?: true
    idHospitalSite?: true
    _all?: true
  }

  export type BookScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookSchedule to aggregate.
     */
    where?: BookScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookSchedules to fetch.
     */
    orderBy?: BookScheduleOrderByWithRelationInput | BookScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BookSchedules
    **/
    _count?: true | BookScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookScheduleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookScheduleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookScheduleMaxAggregateInputType
  }

  export type GetBookScheduleAggregateType<T extends BookScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateBookSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBookSchedule[P]>
      : GetScalarType<T[P], AggregateBookSchedule[P]>
  }




  export type BookScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookScheduleWhereInput
    orderBy?: BookScheduleOrderByWithAggregationInput | BookScheduleOrderByWithAggregationInput[]
    by: BookScheduleScalarFieldEnum[] | BookScheduleScalarFieldEnum
    having?: BookScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookScheduleCountAggregateInputType | true
    _avg?: BookScheduleAvgAggregateInputType
    _sum?: BookScheduleSumAggregateInputType
    _min?: BookScheduleMinAggregateInputType
    _max?: BookScheduleMaxAggregateInputType
  }

  export type BookScheduleGroupByOutputType = {
    id: number
    date: Date
    hour: Date
    idHospitalSite: number
    _count: BookScheduleCountAggregateOutputType | null
    _avg: BookScheduleAvgAggregateOutputType | null
    _sum: BookScheduleSumAggregateOutputType | null
    _min: BookScheduleMinAggregateOutputType | null
    _max: BookScheduleMaxAggregateOutputType | null
  }

  type GetBookScheduleGroupByPayload<T extends BookScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], BookScheduleGroupByOutputType[P]>
        }
      >
    >


  export type BookScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    hour?: boolean
    idHospitalSite?: boolean
    HospitalSite?: boolean | HospitalSiteDefaultArgs<ExtArgs>
    Schedule?: boolean | BookSchedule$ScheduleArgs<ExtArgs>
    _count?: boolean | BookScheduleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookSchedule"]>

  export type BookScheduleSelectScalar = {
    id?: boolean
    date?: boolean
    hour?: boolean
    idHospitalSite?: boolean
  }

  export type BookScheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    HospitalSite?: boolean | HospitalSiteDefaultArgs<ExtArgs>
    Schedule?: boolean | BookSchedule$ScheduleArgs<ExtArgs>
    _count?: boolean | BookScheduleCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $BookSchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BookSchedule"
    objects: {
      HospitalSite: Prisma.$HospitalSitePayload<ExtArgs>
      Schedule: Prisma.$SchedulePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      hour: Date
      idHospitalSite: number
    }, ExtArgs["result"]["bookSchedule"]>
    composites: {}
  }


  type BookScheduleGetPayload<S extends boolean | null | undefined | BookScheduleDefaultArgs> = $Result.GetResult<Prisma.$BookSchedulePayload, S>

  type BookScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BookScheduleFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: BookScheduleCountAggregateInputType | true
    }

  export interface BookScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BookSchedule'], meta: { name: 'BookSchedule' } }
    /**
     * Find zero or one BookSchedule that matches the filter.
     * @param {BookScheduleFindUniqueArgs} args - Arguments to find a BookSchedule
     * @example
     * // Get one BookSchedule
     * const bookSchedule = await prisma.bookSchedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BookScheduleFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BookScheduleFindUniqueArgs<ExtArgs>>
    ): Prisma__BookScheduleClient<$Result.GetResult<Prisma.$BookSchedulePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one BookSchedule that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BookScheduleFindUniqueOrThrowArgs} args - Arguments to find a BookSchedule
     * @example
     * // Get one BookSchedule
     * const bookSchedule = await prisma.bookSchedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BookScheduleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BookScheduleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BookScheduleClient<$Result.GetResult<Prisma.$BookSchedulePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first BookSchedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookScheduleFindFirstArgs} args - Arguments to find a BookSchedule
     * @example
     * // Get one BookSchedule
     * const bookSchedule = await prisma.bookSchedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BookScheduleFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BookScheduleFindFirstArgs<ExtArgs>>
    ): Prisma__BookScheduleClient<$Result.GetResult<Prisma.$BookSchedulePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first BookSchedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookScheduleFindFirstOrThrowArgs} args - Arguments to find a BookSchedule
     * @example
     * // Get one BookSchedule
     * const bookSchedule = await prisma.bookSchedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BookScheduleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BookScheduleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BookScheduleClient<$Result.GetResult<Prisma.$BookSchedulePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more BookSchedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookScheduleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BookSchedules
     * const bookSchedules = await prisma.bookSchedule.findMany()
     * 
     * // Get first 10 BookSchedules
     * const bookSchedules = await prisma.bookSchedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookScheduleWithIdOnly = await prisma.bookSchedule.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BookScheduleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BookScheduleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookSchedulePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a BookSchedule.
     * @param {BookScheduleCreateArgs} args - Arguments to create a BookSchedule.
     * @example
     * // Create one BookSchedule
     * const BookSchedule = await prisma.bookSchedule.create({
     *   data: {
     *     // ... data to create a BookSchedule
     *   }
     * })
     * 
    **/
    create<T extends BookScheduleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BookScheduleCreateArgs<ExtArgs>>
    ): Prisma__BookScheduleClient<$Result.GetResult<Prisma.$BookSchedulePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many BookSchedules.
     *     @param {BookScheduleCreateManyArgs} args - Arguments to create many BookSchedules.
     *     @example
     *     // Create many BookSchedules
     *     const bookSchedule = await prisma.bookSchedule.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BookScheduleCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BookScheduleCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BookSchedule.
     * @param {BookScheduleDeleteArgs} args - Arguments to delete one BookSchedule.
     * @example
     * // Delete one BookSchedule
     * const BookSchedule = await prisma.bookSchedule.delete({
     *   where: {
     *     // ... filter to delete one BookSchedule
     *   }
     * })
     * 
    **/
    delete<T extends BookScheduleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BookScheduleDeleteArgs<ExtArgs>>
    ): Prisma__BookScheduleClient<$Result.GetResult<Prisma.$BookSchedulePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one BookSchedule.
     * @param {BookScheduleUpdateArgs} args - Arguments to update one BookSchedule.
     * @example
     * // Update one BookSchedule
     * const bookSchedule = await prisma.bookSchedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BookScheduleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BookScheduleUpdateArgs<ExtArgs>>
    ): Prisma__BookScheduleClient<$Result.GetResult<Prisma.$BookSchedulePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more BookSchedules.
     * @param {BookScheduleDeleteManyArgs} args - Arguments to filter BookSchedules to delete.
     * @example
     * // Delete a few BookSchedules
     * const { count } = await prisma.bookSchedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BookScheduleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BookScheduleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BookSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BookSchedules
     * const bookSchedule = await prisma.bookSchedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BookScheduleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BookScheduleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BookSchedule.
     * @param {BookScheduleUpsertArgs} args - Arguments to update or create a BookSchedule.
     * @example
     * // Update or create a BookSchedule
     * const bookSchedule = await prisma.bookSchedule.upsert({
     *   create: {
     *     // ... data to create a BookSchedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BookSchedule we want to update
     *   }
     * })
    **/
    upsert<T extends BookScheduleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BookScheduleUpsertArgs<ExtArgs>>
    ): Prisma__BookScheduleClient<$Result.GetResult<Prisma.$BookSchedulePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of BookSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookScheduleCountArgs} args - Arguments to filter BookSchedules to count.
     * @example
     * // Count the number of BookSchedules
     * const count = await prisma.bookSchedule.count({
     *   where: {
     *     // ... the filter for the BookSchedules we want to count
     *   }
     * })
    **/
    count<T extends BookScheduleCountArgs>(
      args?: Subset<T, BookScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BookSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookScheduleAggregateArgs>(args: Subset<T, BookScheduleAggregateArgs>): Prisma.PrismaPromise<GetBookScheduleAggregateType<T>>

    /**
     * Group by BookSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookScheduleGroupByArgs['orderBy'] }
        : { orderBy?: BookScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BookSchedule model
   */
  readonly fields: BookScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BookSchedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    HospitalSite<T extends HospitalSiteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HospitalSiteDefaultArgs<ExtArgs>>): Prisma__HospitalSiteClient<$Result.GetResult<Prisma.$HospitalSitePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Schedule<T extends BookSchedule$ScheduleArgs<ExtArgs> = {}>(args?: Subset<T, BookSchedule$ScheduleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the BookSchedule model
   */ 
  interface BookScheduleFieldRefs {
    readonly id: FieldRef<"BookSchedule", 'Int'>
    readonly date: FieldRef<"BookSchedule", 'DateTime'>
    readonly hour: FieldRef<"BookSchedule", 'DateTime'>
    readonly idHospitalSite: FieldRef<"BookSchedule", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * BookSchedule findUnique
   */
  export type BookScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSchedule
     */
    select?: BookScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookScheduleInclude<ExtArgs> | null
    /**
     * Filter, which BookSchedule to fetch.
     */
    where: BookScheduleWhereUniqueInput
  }


  /**
   * BookSchedule findUniqueOrThrow
   */
  export type BookScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSchedule
     */
    select?: BookScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookScheduleInclude<ExtArgs> | null
    /**
     * Filter, which BookSchedule to fetch.
     */
    where: BookScheduleWhereUniqueInput
  }


  /**
   * BookSchedule findFirst
   */
  export type BookScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSchedule
     */
    select?: BookScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookScheduleInclude<ExtArgs> | null
    /**
     * Filter, which BookSchedule to fetch.
     */
    where?: BookScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookSchedules to fetch.
     */
    orderBy?: BookScheduleOrderByWithRelationInput | BookScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookSchedules.
     */
    cursor?: BookScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookSchedules.
     */
    distinct?: BookScheduleScalarFieldEnum | BookScheduleScalarFieldEnum[]
  }


  /**
   * BookSchedule findFirstOrThrow
   */
  export type BookScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSchedule
     */
    select?: BookScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookScheduleInclude<ExtArgs> | null
    /**
     * Filter, which BookSchedule to fetch.
     */
    where?: BookScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookSchedules to fetch.
     */
    orderBy?: BookScheduleOrderByWithRelationInput | BookScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookSchedules.
     */
    cursor?: BookScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookSchedules.
     */
    distinct?: BookScheduleScalarFieldEnum | BookScheduleScalarFieldEnum[]
  }


  /**
   * BookSchedule findMany
   */
  export type BookScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSchedule
     */
    select?: BookScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookScheduleInclude<ExtArgs> | null
    /**
     * Filter, which BookSchedules to fetch.
     */
    where?: BookScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookSchedules to fetch.
     */
    orderBy?: BookScheduleOrderByWithRelationInput | BookScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BookSchedules.
     */
    cursor?: BookScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookSchedules.
     */
    skip?: number
    distinct?: BookScheduleScalarFieldEnum | BookScheduleScalarFieldEnum[]
  }


  /**
   * BookSchedule create
   */
  export type BookScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSchedule
     */
    select?: BookScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a BookSchedule.
     */
    data: XOR<BookScheduleCreateInput, BookScheduleUncheckedCreateInput>
  }


  /**
   * BookSchedule createMany
   */
  export type BookScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BookSchedules.
     */
    data: BookScheduleCreateManyInput | BookScheduleCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * BookSchedule update
   */
  export type BookScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSchedule
     */
    select?: BookScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a BookSchedule.
     */
    data: XOR<BookScheduleUpdateInput, BookScheduleUncheckedUpdateInput>
    /**
     * Choose, which BookSchedule to update.
     */
    where: BookScheduleWhereUniqueInput
  }


  /**
   * BookSchedule updateMany
   */
  export type BookScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BookSchedules.
     */
    data: XOR<BookScheduleUpdateManyMutationInput, BookScheduleUncheckedUpdateManyInput>
    /**
     * Filter which BookSchedules to update
     */
    where?: BookScheduleWhereInput
  }


  /**
   * BookSchedule upsert
   */
  export type BookScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSchedule
     */
    select?: BookScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the BookSchedule to update in case it exists.
     */
    where: BookScheduleWhereUniqueInput
    /**
     * In case the BookSchedule found by the `where` argument doesn't exist, create a new BookSchedule with this data.
     */
    create: XOR<BookScheduleCreateInput, BookScheduleUncheckedCreateInput>
    /**
     * In case the BookSchedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookScheduleUpdateInput, BookScheduleUncheckedUpdateInput>
  }


  /**
   * BookSchedule delete
   */
  export type BookScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSchedule
     */
    select?: BookScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookScheduleInclude<ExtArgs> | null
    /**
     * Filter which BookSchedule to delete.
     */
    where: BookScheduleWhereUniqueInput
  }


  /**
   * BookSchedule deleteMany
   */
  export type BookScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookSchedules to delete
     */
    where?: BookScheduleWhereInput
  }


  /**
   * BookSchedule.Schedule
   */
  export type BookSchedule$ScheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleInclude<ExtArgs> | null
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    cursor?: ScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }


  /**
   * BookSchedule without action
   */
  export type BookScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSchedule
     */
    select?: BookScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookScheduleInclude<ExtArgs> | null
  }



  /**
   * Model Schedule
   */

  export type AggregateSchedule = {
    _count: ScheduleCountAggregateOutputType | null
    _avg: ScheduleAvgAggregateOutputType | null
    _sum: ScheduleSumAggregateOutputType | null
    _min: ScheduleMinAggregateOutputType | null
    _max: ScheduleMaxAggregateOutputType | null
  }

  export type ScheduleAvgAggregateOutputType = {
    id: number | null
    idUser: number | null
    idBookSchedule: number | null
  }

  export type ScheduleSumAggregateOutputType = {
    id: number | null
    idUser: number | null
    idBookSchedule: number | null
  }

  export type ScheduleMinAggregateOutputType = {
    id: number | null
    idUser: number | null
    idBookSchedule: number | null
  }

  export type ScheduleMaxAggregateOutputType = {
    id: number | null
    idUser: number | null
    idBookSchedule: number | null
  }

  export type ScheduleCountAggregateOutputType = {
    id: number
    idUser: number
    idBookSchedule: number
    _all: number
  }


  export type ScheduleAvgAggregateInputType = {
    id?: true
    idUser?: true
    idBookSchedule?: true
  }

  export type ScheduleSumAggregateInputType = {
    id?: true
    idUser?: true
    idBookSchedule?: true
  }

  export type ScheduleMinAggregateInputType = {
    id?: true
    idUser?: true
    idBookSchedule?: true
  }

  export type ScheduleMaxAggregateInputType = {
    id?: true
    idUser?: true
    idBookSchedule?: true
  }

  export type ScheduleCountAggregateInputType = {
    id?: true
    idUser?: true
    idBookSchedule?: true
    _all?: true
  }

  export type ScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schedule to aggregate.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Schedules
    **/
    _count?: true | ScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScheduleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScheduleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScheduleMaxAggregateInputType
  }

  export type GetScheduleAggregateType<T extends ScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchedule[P]>
      : GetScalarType<T[P], AggregateSchedule[P]>
  }




  export type ScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithAggregationInput | ScheduleOrderByWithAggregationInput[]
    by: ScheduleScalarFieldEnum[] | ScheduleScalarFieldEnum
    having?: ScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScheduleCountAggregateInputType | true
    _avg?: ScheduleAvgAggregateInputType
    _sum?: ScheduleSumAggregateInputType
    _min?: ScheduleMinAggregateInputType
    _max?: ScheduleMaxAggregateInputType
  }

  export type ScheduleGroupByOutputType = {
    id: number
    idUser: number
    idBookSchedule: number
    _count: ScheduleCountAggregateOutputType | null
    _avg: ScheduleAvgAggregateOutputType | null
    _sum: ScheduleSumAggregateOutputType | null
    _min: ScheduleMinAggregateOutputType | null
    _max: ScheduleMaxAggregateOutputType | null
  }

  type GetScheduleGroupByPayload<T extends ScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], ScheduleGroupByOutputType[P]>
        }
      >
    >


  export type ScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    idUser?: boolean
    idBookSchedule?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    BookSchedule?: boolean | BookScheduleDefaultArgs<ExtArgs>
    ScheduleStatus?: boolean | Schedule$ScheduleStatusArgs<ExtArgs>
    _count?: boolean | ScheduleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schedule"]>

  export type ScheduleSelectScalar = {
    id?: boolean
    idUser?: boolean
    idBookSchedule?: boolean
  }

  export type ScheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    BookSchedule?: boolean | BookScheduleDefaultArgs<ExtArgs>
    ScheduleStatus?: boolean | Schedule$ScheduleStatusArgs<ExtArgs>
    _count?: boolean | ScheduleCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Schedule"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
      BookSchedule: Prisma.$BookSchedulePayload<ExtArgs>
      ScheduleStatus: Prisma.$ScheduleStatusPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      idUser: number
      idBookSchedule: number
    }, ExtArgs["result"]["schedule"]>
    composites: {}
  }


  type ScheduleGetPayload<S extends boolean | null | undefined | ScheduleDefaultArgs> = $Result.GetResult<Prisma.$SchedulePayload, S>

  type ScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ScheduleFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ScheduleCountAggregateInputType | true
    }

  export interface ScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Schedule'], meta: { name: 'Schedule' } }
    /**
     * Find zero or one Schedule that matches the filter.
     * @param {ScheduleFindUniqueArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ScheduleFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ScheduleFindUniqueArgs<ExtArgs>>
    ): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Schedule that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ScheduleFindUniqueOrThrowArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ScheduleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ScheduleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Schedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindFirstArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ScheduleFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ScheduleFindFirstArgs<ExtArgs>>
    ): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Schedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindFirstOrThrowArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ScheduleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ScheduleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Schedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Schedules
     * const schedules = await prisma.schedule.findMany()
     * 
     * // Get first 10 Schedules
     * const schedules = await prisma.schedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scheduleWithIdOnly = await prisma.schedule.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ScheduleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ScheduleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Schedule.
     * @param {ScheduleCreateArgs} args - Arguments to create a Schedule.
     * @example
     * // Create one Schedule
     * const Schedule = await prisma.schedule.create({
     *   data: {
     *     // ... data to create a Schedule
     *   }
     * })
     * 
    **/
    create<T extends ScheduleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ScheduleCreateArgs<ExtArgs>>
    ): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Schedules.
     *     @param {ScheduleCreateManyArgs} args - Arguments to create many Schedules.
     *     @example
     *     // Create many Schedules
     *     const schedule = await prisma.schedule.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ScheduleCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ScheduleCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Schedule.
     * @param {ScheduleDeleteArgs} args - Arguments to delete one Schedule.
     * @example
     * // Delete one Schedule
     * const Schedule = await prisma.schedule.delete({
     *   where: {
     *     // ... filter to delete one Schedule
     *   }
     * })
     * 
    **/
    delete<T extends ScheduleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ScheduleDeleteArgs<ExtArgs>>
    ): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Schedule.
     * @param {ScheduleUpdateArgs} args - Arguments to update one Schedule.
     * @example
     * // Update one Schedule
     * const schedule = await prisma.schedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ScheduleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ScheduleUpdateArgs<ExtArgs>>
    ): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Schedules.
     * @param {ScheduleDeleteManyArgs} args - Arguments to filter Schedules to delete.
     * @example
     * // Delete a few Schedules
     * const { count } = await prisma.schedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ScheduleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ScheduleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Schedules
     * const schedule = await prisma.schedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ScheduleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ScheduleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Schedule.
     * @param {ScheduleUpsertArgs} args - Arguments to update or create a Schedule.
     * @example
     * // Update or create a Schedule
     * const schedule = await prisma.schedule.upsert({
     *   create: {
     *     // ... data to create a Schedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Schedule we want to update
     *   }
     * })
    **/
    upsert<T extends ScheduleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ScheduleUpsertArgs<ExtArgs>>
    ): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleCountArgs} args - Arguments to filter Schedules to count.
     * @example
     * // Count the number of Schedules
     * const count = await prisma.schedule.count({
     *   where: {
     *     // ... the filter for the Schedules we want to count
     *   }
     * })
    **/
    count<T extends ScheduleCountArgs>(
      args?: Subset<T, ScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Schedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScheduleAggregateArgs>(args: Subset<T, ScheduleAggregateArgs>): Prisma.PrismaPromise<GetScheduleAggregateType<T>>

    /**
     * Group by Schedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScheduleGroupByArgs['orderBy'] }
        : { orderBy?: ScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Schedule model
   */
  readonly fields: ScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Schedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    BookSchedule<T extends BookScheduleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BookScheduleDefaultArgs<ExtArgs>>): Prisma__BookScheduleClient<$Result.GetResult<Prisma.$BookSchedulePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    ScheduleStatus<T extends Schedule$ScheduleStatusArgs<ExtArgs> = {}>(args?: Subset<T, Schedule$ScheduleStatusArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduleStatusPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Schedule model
   */ 
  interface ScheduleFieldRefs {
    readonly id: FieldRef<"Schedule", 'Int'>
    readonly idUser: FieldRef<"Schedule", 'Int'>
    readonly idBookSchedule: FieldRef<"Schedule", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Schedule findUnique
   */
  export type ScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where: ScheduleWhereUniqueInput
  }


  /**
   * Schedule findUniqueOrThrow
   */
  export type ScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where: ScheduleWhereUniqueInput
  }


  /**
   * Schedule findFirst
   */
  export type ScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schedules.
     */
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }


  /**
   * Schedule findFirstOrThrow
   */
  export type ScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schedules.
     */
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }


  /**
   * Schedule findMany
   */
  export type ScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedules to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }


  /**
   * Schedule create
   */
  export type ScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a Schedule.
     */
    data: XOR<ScheduleCreateInput, ScheduleUncheckedCreateInput>
  }


  /**
   * Schedule createMany
   */
  export type ScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Schedules.
     */
    data: ScheduleCreateManyInput | ScheduleCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Schedule update
   */
  export type ScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a Schedule.
     */
    data: XOR<ScheduleUpdateInput, ScheduleUncheckedUpdateInput>
    /**
     * Choose, which Schedule to update.
     */
    where: ScheduleWhereUniqueInput
  }


  /**
   * Schedule updateMany
   */
  export type ScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Schedules.
     */
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyInput>
    /**
     * Filter which Schedules to update
     */
    where?: ScheduleWhereInput
  }


  /**
   * Schedule upsert
   */
  export type ScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the Schedule to update in case it exists.
     */
    where: ScheduleWhereUniqueInput
    /**
     * In case the Schedule found by the `where` argument doesn't exist, create a new Schedule with this data.
     */
    create: XOR<ScheduleCreateInput, ScheduleUncheckedCreateInput>
    /**
     * In case the Schedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScheduleUpdateInput, ScheduleUncheckedUpdateInput>
  }


  /**
   * Schedule delete
   */
  export type ScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter which Schedule to delete.
     */
    where: ScheduleWhereUniqueInput
  }


  /**
   * Schedule deleteMany
   */
  export type ScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schedules to delete
     */
    where?: ScheduleWhereInput
  }


  /**
   * Schedule.ScheduleStatus
   */
  export type Schedule$ScheduleStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleStatus
     */
    select?: ScheduleStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleStatusInclude<ExtArgs> | null
    where?: ScheduleStatusWhereInput
    orderBy?: ScheduleStatusOrderByWithRelationInput | ScheduleStatusOrderByWithRelationInput[]
    cursor?: ScheduleStatusWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleStatusScalarFieldEnum | ScheduleStatusScalarFieldEnum[]
  }


  /**
   * Schedule without action
   */
  export type ScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleInclude<ExtArgs> | null
  }



  /**
   * Model ScheduleStatus
   */

  export type AggregateScheduleStatus = {
    _count: ScheduleStatusCountAggregateOutputType | null
    _avg: ScheduleStatusAvgAggregateOutputType | null
    _sum: ScheduleStatusSumAggregateOutputType | null
    _min: ScheduleStatusMinAggregateOutputType | null
    _max: ScheduleStatusMaxAggregateOutputType | null
  }

  export type ScheduleStatusAvgAggregateOutputType = {
    id: number | null
    idSchedule: number | null
    idStatus: number | null
  }

  export type ScheduleStatusSumAggregateOutputType = {
    id: number | null
    idSchedule: number | null
    idStatus: number | null
  }

  export type ScheduleStatusMinAggregateOutputType = {
    id: number | null
    observation: string | null
    idSchedule: number | null
    idStatus: number | null
  }

  export type ScheduleStatusMaxAggregateOutputType = {
    id: number | null
    observation: string | null
    idSchedule: number | null
    idStatus: number | null
  }

  export type ScheduleStatusCountAggregateOutputType = {
    id: number
    observation: number
    idSchedule: number
    idStatus: number
    _all: number
  }


  export type ScheduleStatusAvgAggregateInputType = {
    id?: true
    idSchedule?: true
    idStatus?: true
  }

  export type ScheduleStatusSumAggregateInputType = {
    id?: true
    idSchedule?: true
    idStatus?: true
  }

  export type ScheduleStatusMinAggregateInputType = {
    id?: true
    observation?: true
    idSchedule?: true
    idStatus?: true
  }

  export type ScheduleStatusMaxAggregateInputType = {
    id?: true
    observation?: true
    idSchedule?: true
    idStatus?: true
  }

  export type ScheduleStatusCountAggregateInputType = {
    id?: true
    observation?: true
    idSchedule?: true
    idStatus?: true
    _all?: true
  }

  export type ScheduleStatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScheduleStatus to aggregate.
     */
    where?: ScheduleStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduleStatuses to fetch.
     */
    orderBy?: ScheduleStatusOrderByWithRelationInput | ScheduleStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScheduleStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduleStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduleStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScheduleStatuses
    **/
    _count?: true | ScheduleStatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScheduleStatusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScheduleStatusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScheduleStatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScheduleStatusMaxAggregateInputType
  }

  export type GetScheduleStatusAggregateType<T extends ScheduleStatusAggregateArgs> = {
        [P in keyof T & keyof AggregateScheduleStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScheduleStatus[P]>
      : GetScalarType<T[P], AggregateScheduleStatus[P]>
  }




  export type ScheduleStatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleStatusWhereInput
    orderBy?: ScheduleStatusOrderByWithAggregationInput | ScheduleStatusOrderByWithAggregationInput[]
    by: ScheduleStatusScalarFieldEnum[] | ScheduleStatusScalarFieldEnum
    having?: ScheduleStatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScheduleStatusCountAggregateInputType | true
    _avg?: ScheduleStatusAvgAggregateInputType
    _sum?: ScheduleStatusSumAggregateInputType
    _min?: ScheduleStatusMinAggregateInputType
    _max?: ScheduleStatusMaxAggregateInputType
  }

  export type ScheduleStatusGroupByOutputType = {
    id: number
    observation: string | null
    idSchedule: number
    idStatus: number
    _count: ScheduleStatusCountAggregateOutputType | null
    _avg: ScheduleStatusAvgAggregateOutputType | null
    _sum: ScheduleStatusSumAggregateOutputType | null
    _min: ScheduleStatusMinAggregateOutputType | null
    _max: ScheduleStatusMaxAggregateOutputType | null
  }

  type GetScheduleStatusGroupByPayload<T extends ScheduleStatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScheduleStatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScheduleStatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScheduleStatusGroupByOutputType[P]>
            : GetScalarType<T[P], ScheduleStatusGroupByOutputType[P]>
        }
      >
    >


  export type ScheduleStatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    observation?: boolean
    idSchedule?: boolean
    idStatus?: boolean
    Schedule?: boolean | ScheduleDefaultArgs<ExtArgs>
    Status?: boolean | StatusDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scheduleStatus"]>

  export type ScheduleStatusSelectScalar = {
    id?: boolean
    observation?: boolean
    idSchedule?: boolean
    idStatus?: boolean
  }

  export type ScheduleStatusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Schedule?: boolean | ScheduleDefaultArgs<ExtArgs>
    Status?: boolean | StatusDefaultArgs<ExtArgs>
  }


  export type $ScheduleStatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScheduleStatus"
    objects: {
      Schedule: Prisma.$SchedulePayload<ExtArgs>
      Status: Prisma.$StatusPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      observation: string | null
      idSchedule: number
      idStatus: number
    }, ExtArgs["result"]["scheduleStatus"]>
    composites: {}
  }


  type ScheduleStatusGetPayload<S extends boolean | null | undefined | ScheduleStatusDefaultArgs> = $Result.GetResult<Prisma.$ScheduleStatusPayload, S>

  type ScheduleStatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ScheduleStatusFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ScheduleStatusCountAggregateInputType | true
    }

  export interface ScheduleStatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScheduleStatus'], meta: { name: 'ScheduleStatus' } }
    /**
     * Find zero or one ScheduleStatus that matches the filter.
     * @param {ScheduleStatusFindUniqueArgs} args - Arguments to find a ScheduleStatus
     * @example
     * // Get one ScheduleStatus
     * const scheduleStatus = await prisma.scheduleStatus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ScheduleStatusFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ScheduleStatusFindUniqueArgs<ExtArgs>>
    ): Prisma__ScheduleStatusClient<$Result.GetResult<Prisma.$ScheduleStatusPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ScheduleStatus that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ScheduleStatusFindUniqueOrThrowArgs} args - Arguments to find a ScheduleStatus
     * @example
     * // Get one ScheduleStatus
     * const scheduleStatus = await prisma.scheduleStatus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ScheduleStatusFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ScheduleStatusFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ScheduleStatusClient<$Result.GetResult<Prisma.$ScheduleStatusPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ScheduleStatus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleStatusFindFirstArgs} args - Arguments to find a ScheduleStatus
     * @example
     * // Get one ScheduleStatus
     * const scheduleStatus = await prisma.scheduleStatus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ScheduleStatusFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ScheduleStatusFindFirstArgs<ExtArgs>>
    ): Prisma__ScheduleStatusClient<$Result.GetResult<Prisma.$ScheduleStatusPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ScheduleStatus that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleStatusFindFirstOrThrowArgs} args - Arguments to find a ScheduleStatus
     * @example
     * // Get one ScheduleStatus
     * const scheduleStatus = await prisma.scheduleStatus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ScheduleStatusFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ScheduleStatusFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ScheduleStatusClient<$Result.GetResult<Prisma.$ScheduleStatusPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ScheduleStatuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleStatusFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScheduleStatuses
     * const scheduleStatuses = await prisma.scheduleStatus.findMany()
     * 
     * // Get first 10 ScheduleStatuses
     * const scheduleStatuses = await prisma.scheduleStatus.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scheduleStatusWithIdOnly = await prisma.scheduleStatus.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ScheduleStatusFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ScheduleStatusFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduleStatusPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ScheduleStatus.
     * @param {ScheduleStatusCreateArgs} args - Arguments to create a ScheduleStatus.
     * @example
     * // Create one ScheduleStatus
     * const ScheduleStatus = await prisma.scheduleStatus.create({
     *   data: {
     *     // ... data to create a ScheduleStatus
     *   }
     * })
     * 
    **/
    create<T extends ScheduleStatusCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ScheduleStatusCreateArgs<ExtArgs>>
    ): Prisma__ScheduleStatusClient<$Result.GetResult<Prisma.$ScheduleStatusPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ScheduleStatuses.
     *     @param {ScheduleStatusCreateManyArgs} args - Arguments to create many ScheduleStatuses.
     *     @example
     *     // Create many ScheduleStatuses
     *     const scheduleStatus = await prisma.scheduleStatus.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ScheduleStatusCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ScheduleStatusCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ScheduleStatus.
     * @param {ScheduleStatusDeleteArgs} args - Arguments to delete one ScheduleStatus.
     * @example
     * // Delete one ScheduleStatus
     * const ScheduleStatus = await prisma.scheduleStatus.delete({
     *   where: {
     *     // ... filter to delete one ScheduleStatus
     *   }
     * })
     * 
    **/
    delete<T extends ScheduleStatusDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ScheduleStatusDeleteArgs<ExtArgs>>
    ): Prisma__ScheduleStatusClient<$Result.GetResult<Prisma.$ScheduleStatusPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ScheduleStatus.
     * @param {ScheduleStatusUpdateArgs} args - Arguments to update one ScheduleStatus.
     * @example
     * // Update one ScheduleStatus
     * const scheduleStatus = await prisma.scheduleStatus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ScheduleStatusUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ScheduleStatusUpdateArgs<ExtArgs>>
    ): Prisma__ScheduleStatusClient<$Result.GetResult<Prisma.$ScheduleStatusPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ScheduleStatuses.
     * @param {ScheduleStatusDeleteManyArgs} args - Arguments to filter ScheduleStatuses to delete.
     * @example
     * // Delete a few ScheduleStatuses
     * const { count } = await prisma.scheduleStatus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ScheduleStatusDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ScheduleStatusDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScheduleStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleStatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScheduleStatuses
     * const scheduleStatus = await prisma.scheduleStatus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ScheduleStatusUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ScheduleStatusUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ScheduleStatus.
     * @param {ScheduleStatusUpsertArgs} args - Arguments to update or create a ScheduleStatus.
     * @example
     * // Update or create a ScheduleStatus
     * const scheduleStatus = await prisma.scheduleStatus.upsert({
     *   create: {
     *     // ... data to create a ScheduleStatus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScheduleStatus we want to update
     *   }
     * })
    **/
    upsert<T extends ScheduleStatusUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ScheduleStatusUpsertArgs<ExtArgs>>
    ): Prisma__ScheduleStatusClient<$Result.GetResult<Prisma.$ScheduleStatusPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ScheduleStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleStatusCountArgs} args - Arguments to filter ScheduleStatuses to count.
     * @example
     * // Count the number of ScheduleStatuses
     * const count = await prisma.scheduleStatus.count({
     *   where: {
     *     // ... the filter for the ScheduleStatuses we want to count
     *   }
     * })
    **/
    count<T extends ScheduleStatusCountArgs>(
      args?: Subset<T, ScheduleStatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScheduleStatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScheduleStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleStatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScheduleStatusAggregateArgs>(args: Subset<T, ScheduleStatusAggregateArgs>): Prisma.PrismaPromise<GetScheduleStatusAggregateType<T>>

    /**
     * Group by ScheduleStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleStatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScheduleStatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScheduleStatusGroupByArgs['orderBy'] }
        : { orderBy?: ScheduleStatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScheduleStatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScheduleStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScheduleStatus model
   */
  readonly fields: ScheduleStatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScheduleStatus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScheduleStatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Schedule<T extends ScheduleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ScheduleDefaultArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Status<T extends StatusDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StatusDefaultArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ScheduleStatus model
   */ 
  interface ScheduleStatusFieldRefs {
    readonly id: FieldRef<"ScheduleStatus", 'Int'>
    readonly observation: FieldRef<"ScheduleStatus", 'String'>
    readonly idSchedule: FieldRef<"ScheduleStatus", 'Int'>
    readonly idStatus: FieldRef<"ScheduleStatus", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * ScheduleStatus findUnique
   */
  export type ScheduleStatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleStatus
     */
    select?: ScheduleStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleStatusInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleStatus to fetch.
     */
    where: ScheduleStatusWhereUniqueInput
  }


  /**
   * ScheduleStatus findUniqueOrThrow
   */
  export type ScheduleStatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleStatus
     */
    select?: ScheduleStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleStatusInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleStatus to fetch.
     */
    where: ScheduleStatusWhereUniqueInput
  }


  /**
   * ScheduleStatus findFirst
   */
  export type ScheduleStatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleStatus
     */
    select?: ScheduleStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleStatusInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleStatus to fetch.
     */
    where?: ScheduleStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduleStatuses to fetch.
     */
    orderBy?: ScheduleStatusOrderByWithRelationInput | ScheduleStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScheduleStatuses.
     */
    cursor?: ScheduleStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduleStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduleStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScheduleStatuses.
     */
    distinct?: ScheduleStatusScalarFieldEnum | ScheduleStatusScalarFieldEnum[]
  }


  /**
   * ScheduleStatus findFirstOrThrow
   */
  export type ScheduleStatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleStatus
     */
    select?: ScheduleStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleStatusInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleStatus to fetch.
     */
    where?: ScheduleStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduleStatuses to fetch.
     */
    orderBy?: ScheduleStatusOrderByWithRelationInput | ScheduleStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScheduleStatuses.
     */
    cursor?: ScheduleStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduleStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduleStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScheduleStatuses.
     */
    distinct?: ScheduleStatusScalarFieldEnum | ScheduleStatusScalarFieldEnum[]
  }


  /**
   * ScheduleStatus findMany
   */
  export type ScheduleStatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleStatus
     */
    select?: ScheduleStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleStatusInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleStatuses to fetch.
     */
    where?: ScheduleStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduleStatuses to fetch.
     */
    orderBy?: ScheduleStatusOrderByWithRelationInput | ScheduleStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScheduleStatuses.
     */
    cursor?: ScheduleStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduleStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduleStatuses.
     */
    skip?: number
    distinct?: ScheduleStatusScalarFieldEnum | ScheduleStatusScalarFieldEnum[]
  }


  /**
   * ScheduleStatus create
   */
  export type ScheduleStatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleStatus
     */
    select?: ScheduleStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleStatusInclude<ExtArgs> | null
    /**
     * The data needed to create a ScheduleStatus.
     */
    data: XOR<ScheduleStatusCreateInput, ScheduleStatusUncheckedCreateInput>
  }


  /**
   * ScheduleStatus createMany
   */
  export type ScheduleStatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScheduleStatuses.
     */
    data: ScheduleStatusCreateManyInput | ScheduleStatusCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ScheduleStatus update
   */
  export type ScheduleStatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleStatus
     */
    select?: ScheduleStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleStatusInclude<ExtArgs> | null
    /**
     * The data needed to update a ScheduleStatus.
     */
    data: XOR<ScheduleStatusUpdateInput, ScheduleStatusUncheckedUpdateInput>
    /**
     * Choose, which ScheduleStatus to update.
     */
    where: ScheduleStatusWhereUniqueInput
  }


  /**
   * ScheduleStatus updateMany
   */
  export type ScheduleStatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScheduleStatuses.
     */
    data: XOR<ScheduleStatusUpdateManyMutationInput, ScheduleStatusUncheckedUpdateManyInput>
    /**
     * Filter which ScheduleStatuses to update
     */
    where?: ScheduleStatusWhereInput
  }


  /**
   * ScheduleStatus upsert
   */
  export type ScheduleStatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleStatus
     */
    select?: ScheduleStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleStatusInclude<ExtArgs> | null
    /**
     * The filter to search for the ScheduleStatus to update in case it exists.
     */
    where: ScheduleStatusWhereUniqueInput
    /**
     * In case the ScheduleStatus found by the `where` argument doesn't exist, create a new ScheduleStatus with this data.
     */
    create: XOR<ScheduleStatusCreateInput, ScheduleStatusUncheckedCreateInput>
    /**
     * In case the ScheduleStatus was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScheduleStatusUpdateInput, ScheduleStatusUncheckedUpdateInput>
  }


  /**
   * ScheduleStatus delete
   */
  export type ScheduleStatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleStatus
     */
    select?: ScheduleStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleStatusInclude<ExtArgs> | null
    /**
     * Filter which ScheduleStatus to delete.
     */
    where: ScheduleStatusWhereUniqueInput
  }


  /**
   * ScheduleStatus deleteMany
   */
  export type ScheduleStatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScheduleStatuses to delete
     */
    where?: ScheduleStatusWhereInput
  }


  /**
   * ScheduleStatus without action
   */
  export type ScheduleStatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleStatus
     */
    select?: ScheduleStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleStatusInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const BloodTypeScalarFieldEnum: {
    id: 'id',
    type: 'type'
  };

  export type BloodTypeScalarFieldEnum = (typeof BloodTypeScalarFieldEnum)[keyof typeof BloodTypeScalarFieldEnum]


  export const SexScalarFieldEnum: {
    id: 'id',
    sex: 'sex'
  };

  export type SexScalarFieldEnum = (typeof SexScalarFieldEnum)[keyof typeof SexScalarFieldEnum]


  export const AddressScalarFieldEnum: {
    id: 'id',
    cep: 'cep',
    uf: 'uf',
    city: 'city',
    neighborhood: 'neighborhood',
    street: 'street',
    number: 'number',
    complement: 'complement'
  };

  export type AddressScalarFieldEnum = (typeof AddressScalarFieldEnum)[keyof typeof AddressScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    cpf: 'cpf',
    dateOfBirth: 'dateOfBirth',
    password: 'password',
    weight: 'weight',
    email: 'email',
    photoUrl: 'photoUrl',
    phone: 'phone',
    passwordResetToken: 'passwordResetToken',
    passwordResetExpires: 'passwordResetExpires',
    idAddress: 'idAddress',
    idSex: 'idSex',
    idBloodType: 'idBloodType'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const HospitalScalarFieldEnum: {
    id: 'id',
    name: 'name',
    cnpj: 'cnpj',
    email: 'email',
    websiteUrl: 'websiteUrl',
    password: 'password',
    idAddress: 'idAddress'
  };

  export type HospitalScalarFieldEnum = (typeof HospitalScalarFieldEnum)[keyof typeof HospitalScalarFieldEnum]


  export const CampaignScalarFieldEnum: {
    id: 'id',
    date: 'date',
    hour: 'hour',
    description: 'description',
    image: 'image',
    idHospital: 'idHospital'
  };

  export type CampaignScalarFieldEnum = (typeof CampaignScalarFieldEnum)[keyof typeof CampaignScalarFieldEnum]


  export const DonationBankScalarFieldEnum: {
    id: 'id',
    year: 'year',
    bloodMl: 'bloodMl',
    idHospital: 'idHospital',
    idBloodType: 'idBloodType'
  };

  export type DonationBankScalarFieldEnum = (typeof DonationBankScalarFieldEnum)[keyof typeof DonationBankScalarFieldEnum]


  export const SiteScalarFieldEnum: {
    id: 'id',
    site: 'site'
  };

  export type SiteScalarFieldEnum = (typeof SiteScalarFieldEnum)[keyof typeof SiteScalarFieldEnum]


  export const HospitalSiteScalarFieldEnum: {
    id: 'id',
    idHospital: 'idHospital',
    idSite: 'idSite'
  };

  export type HospitalSiteScalarFieldEnum = (typeof HospitalSiteScalarFieldEnum)[keyof typeof HospitalSiteScalarFieldEnum]


  export const PhoneScalarFieldEnum: {
    id: 'id',
    phone: 'phone',
    idHospital: 'idHospital'
  };

  export type PhoneScalarFieldEnum = (typeof PhoneScalarFieldEnum)[keyof typeof PhoneScalarFieldEnum]


  export const PhotoScalarFieldEnum: {
    id: 'id',
    url: 'url',
    idHospital: 'idHospital'
  };

  export type PhotoScalarFieldEnum = (typeof PhotoScalarFieldEnum)[keyof typeof PhotoScalarFieldEnum]


  export const StarScalarFieldEnum: {
    id: 'id',
    starNumber: 'starNumber'
  };

  export type StarScalarFieldEnum = (typeof StarScalarFieldEnum)[keyof typeof StarScalarFieldEnum]


  export const ReviewScalarFieldEnum: {
    id: 'id',
    opinion: 'opinion',
    date: 'date',
    idUser: 'idUser',
    idHospital: 'idHospital',
    idStar: 'idStar'
  };

  export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


  export const StatusScalarFieldEnum: {
    id: 'id',
    status: 'status'
  };

  export type StatusScalarFieldEnum = (typeof StatusScalarFieldEnum)[keyof typeof StatusScalarFieldEnum]


  export const BookScheduleScalarFieldEnum: {
    id: 'id',
    date: 'date',
    hour: 'hour',
    idHospitalSite: 'idHospitalSite'
  };

  export type BookScheduleScalarFieldEnum = (typeof BookScheduleScalarFieldEnum)[keyof typeof BookScheduleScalarFieldEnum]


  export const ScheduleScalarFieldEnum: {
    id: 'id',
    idUser: 'idUser',
    idBookSchedule: 'idBookSchedule'
  };

  export type ScheduleScalarFieldEnum = (typeof ScheduleScalarFieldEnum)[keyof typeof ScheduleScalarFieldEnum]


  export const ScheduleStatusScalarFieldEnum: {
    id: 'id',
    observation: 'observation',
    idSchedule: 'idSchedule',
    idStatus: 'idStatus'
  };

  export type ScheduleStatusScalarFieldEnum = (typeof ScheduleStatusScalarFieldEnum)[keyof typeof ScheduleStatusScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'STATUS'
   */
  export type EnumSTATUSFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'STATUS'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type BloodTypeWhereInput = {
    AND?: BloodTypeWhereInput | BloodTypeWhereInput[]
    OR?: BloodTypeWhereInput[]
    NOT?: BloodTypeWhereInput | BloodTypeWhereInput[]
    id?: IntFilter<"BloodType"> | number
    type?: StringFilter<"BloodType"> | string
    User?: UserListRelationFilter
    DonationBank?: DonationBankListRelationFilter
  }

  export type BloodTypeOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    User?: UserOrderByRelationAggregateInput
    DonationBank?: DonationBankOrderByRelationAggregateInput
  }

  export type BloodTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    type?: string
    AND?: BloodTypeWhereInput | BloodTypeWhereInput[]
    OR?: BloodTypeWhereInput[]
    NOT?: BloodTypeWhereInput | BloodTypeWhereInput[]
    User?: UserListRelationFilter
    DonationBank?: DonationBankListRelationFilter
  }, "id" | "id" | "type">

  export type BloodTypeOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    _count?: BloodTypeCountOrderByAggregateInput
    _avg?: BloodTypeAvgOrderByAggregateInput
    _max?: BloodTypeMaxOrderByAggregateInput
    _min?: BloodTypeMinOrderByAggregateInput
    _sum?: BloodTypeSumOrderByAggregateInput
  }

  export type BloodTypeScalarWhereWithAggregatesInput = {
    AND?: BloodTypeScalarWhereWithAggregatesInput | BloodTypeScalarWhereWithAggregatesInput[]
    OR?: BloodTypeScalarWhereWithAggregatesInput[]
    NOT?: BloodTypeScalarWhereWithAggregatesInput | BloodTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BloodType"> | number
    type?: StringWithAggregatesFilter<"BloodType"> | string
  }

  export type SexWhereInput = {
    AND?: SexWhereInput | SexWhereInput[]
    OR?: SexWhereInput[]
    NOT?: SexWhereInput | SexWhereInput[]
    id?: IntFilter<"Sex"> | number
    sex?: StringFilter<"Sex"> | string
    User?: UserListRelationFilter
  }

  export type SexOrderByWithRelationInput = {
    id?: SortOrder
    sex?: SortOrder
    User?: UserOrderByRelationAggregateInput
  }

  export type SexWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SexWhereInput | SexWhereInput[]
    OR?: SexWhereInput[]
    NOT?: SexWhereInput | SexWhereInput[]
    sex?: StringFilter<"Sex"> | string
    User?: UserListRelationFilter
  }, "id" | "id">

  export type SexOrderByWithAggregationInput = {
    id?: SortOrder
    sex?: SortOrder
    _count?: SexCountOrderByAggregateInput
    _avg?: SexAvgOrderByAggregateInput
    _max?: SexMaxOrderByAggregateInput
    _min?: SexMinOrderByAggregateInput
    _sum?: SexSumOrderByAggregateInput
  }

  export type SexScalarWhereWithAggregatesInput = {
    AND?: SexScalarWhereWithAggregatesInput | SexScalarWhereWithAggregatesInput[]
    OR?: SexScalarWhereWithAggregatesInput[]
    NOT?: SexScalarWhereWithAggregatesInput | SexScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Sex"> | number
    sex?: StringWithAggregatesFilter<"Sex"> | string
  }

  export type AddressWhereInput = {
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    id?: IntFilter<"Address"> | number
    cep?: StringFilter<"Address"> | string
    uf?: StringFilter<"Address"> | string
    city?: StringFilter<"Address"> | string
    neighborhood?: StringFilter<"Address"> | string
    street?: StringFilter<"Address"> | string
    number?: StringFilter<"Address"> | string
    complement?: StringNullableFilter<"Address"> | string | null
    Hospital?: HospitalListRelationFilter
    User?: UserListRelationFilter
  }

  export type AddressOrderByWithRelationInput = {
    id?: SortOrder
    cep?: SortOrder
    uf?: SortOrder
    city?: SortOrder
    neighborhood?: SortOrder
    street?: SortOrder
    number?: SortOrder
    complement?: SortOrderInput | SortOrder
    Hospital?: HospitalOrderByRelationAggregateInput
    User?: UserOrderByRelationAggregateInput
  }

  export type AddressWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    cep?: StringFilter<"Address"> | string
    uf?: StringFilter<"Address"> | string
    city?: StringFilter<"Address"> | string
    neighborhood?: StringFilter<"Address"> | string
    street?: StringFilter<"Address"> | string
    number?: StringFilter<"Address"> | string
    complement?: StringNullableFilter<"Address"> | string | null
    Hospital?: HospitalListRelationFilter
    User?: UserListRelationFilter
  }, "id" | "id">

  export type AddressOrderByWithAggregationInput = {
    id?: SortOrder
    cep?: SortOrder
    uf?: SortOrder
    city?: SortOrder
    neighborhood?: SortOrder
    street?: SortOrder
    number?: SortOrder
    complement?: SortOrderInput | SortOrder
    _count?: AddressCountOrderByAggregateInput
    _avg?: AddressAvgOrderByAggregateInput
    _max?: AddressMaxOrderByAggregateInput
    _min?: AddressMinOrderByAggregateInput
    _sum?: AddressSumOrderByAggregateInput
  }

  export type AddressScalarWhereWithAggregatesInput = {
    AND?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    OR?: AddressScalarWhereWithAggregatesInput[]
    NOT?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Address"> | number
    cep?: StringWithAggregatesFilter<"Address"> | string
    uf?: StringWithAggregatesFilter<"Address"> | string
    city?: StringWithAggregatesFilter<"Address"> | string
    neighborhood?: StringWithAggregatesFilter<"Address"> | string
    street?: StringWithAggregatesFilter<"Address"> | string
    number?: StringWithAggregatesFilter<"Address"> | string
    complement?: StringNullableWithAggregatesFilter<"Address"> | string | null
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    cpf?: StringFilter<"User"> | string
    dateOfBirth?: DateTimeFilter<"User"> | Date | string
    password?: StringFilter<"User"> | string
    weight?: DecimalFilter<"User"> | Decimal | DecimalJsLike | number | string
    email?: StringFilter<"User"> | string
    photoUrl?: StringNullableFilter<"User"> | string | null
    phone?: StringFilter<"User"> | string
    passwordResetToken?: StringNullableFilter<"User"> | string | null
    passwordResetExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    idAddress?: IntFilter<"User"> | number
    idSex?: IntFilter<"User"> | number
    idBloodType?: IntFilter<"User"> | number
    Address?: XOR<AddressRelationFilter, AddressWhereInput>
    Sex?: XOR<SexRelationFilter, SexWhereInput>
    BloodType?: XOR<BloodTypeRelationFilter, BloodTypeWhereInput>
    Review?: ReviewListRelationFilter
    Schedule?: ScheduleListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    dateOfBirth?: SortOrder
    password?: SortOrder
    weight?: SortOrder
    email?: SortOrder
    photoUrl?: SortOrderInput | SortOrder
    phone?: SortOrder
    passwordResetToken?: SortOrderInput | SortOrder
    passwordResetExpires?: SortOrderInput | SortOrder
    idAddress?: SortOrder
    idSex?: SortOrder
    idBloodType?: SortOrder
    Address?: AddressOrderByWithRelationInput
    Sex?: SexOrderByWithRelationInput
    BloodType?: BloodTypeOrderByWithRelationInput
    Review?: ReviewOrderByRelationAggregateInput
    Schedule?: ScheduleOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    cpf?: StringFilter<"User"> | string
    dateOfBirth?: DateTimeFilter<"User"> | Date | string
    password?: StringFilter<"User"> | string
    weight?: DecimalFilter<"User"> | Decimal | DecimalJsLike | number | string
    email?: StringFilter<"User"> | string
    photoUrl?: StringNullableFilter<"User"> | string | null
    phone?: StringFilter<"User"> | string
    passwordResetToken?: StringNullableFilter<"User"> | string | null
    passwordResetExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    idAddress?: IntFilter<"User"> | number
    idSex?: IntFilter<"User"> | number
    idBloodType?: IntFilter<"User"> | number
    Address?: XOR<AddressRelationFilter, AddressWhereInput>
    Sex?: XOR<SexRelationFilter, SexWhereInput>
    BloodType?: XOR<BloodTypeRelationFilter, BloodTypeWhereInput>
    Review?: ReviewListRelationFilter
    Schedule?: ScheduleListRelationFilter
  }, "id" | "id">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    dateOfBirth?: SortOrder
    password?: SortOrder
    weight?: SortOrder
    email?: SortOrder
    photoUrl?: SortOrderInput | SortOrder
    phone?: SortOrder
    passwordResetToken?: SortOrderInput | SortOrder
    passwordResetExpires?: SortOrderInput | SortOrder
    idAddress?: SortOrder
    idSex?: SortOrder
    idBloodType?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    cpf?: StringWithAggregatesFilter<"User"> | string
    dateOfBirth?: DateTimeWithAggregatesFilter<"User"> | Date | string
    password?: StringWithAggregatesFilter<"User"> | string
    weight?: DecimalWithAggregatesFilter<"User"> | Decimal | DecimalJsLike | number | string
    email?: StringWithAggregatesFilter<"User"> | string
    photoUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    phone?: StringWithAggregatesFilter<"User"> | string
    passwordResetToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    passwordResetExpires?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    idAddress?: IntWithAggregatesFilter<"User"> | number
    idSex?: IntWithAggregatesFilter<"User"> | number
    idBloodType?: IntWithAggregatesFilter<"User"> | number
  }

  export type HospitalWhereInput = {
    AND?: HospitalWhereInput | HospitalWhereInput[]
    OR?: HospitalWhereInput[]
    NOT?: HospitalWhereInput | HospitalWhereInput[]
    id?: IntFilter<"Hospital"> | number
    name?: StringFilter<"Hospital"> | string
    cnpj?: StringFilter<"Hospital"> | string
    email?: StringFilter<"Hospital"> | string
    websiteUrl?: StringNullableFilter<"Hospital"> | string | null
    password?: StringFilter<"Hospital"> | string
    idAddress?: IntFilter<"Hospital"> | number
    Address?: XOR<AddressRelationFilter, AddressWhereInput>
    HospitalSite?: HospitalSiteListRelationFilter
    Phone?: PhoneListRelationFilter
    Photo?: PhotoListRelationFilter
    Review?: ReviewListRelationFilter
    Campaign?: CampaignListRelationFilter
    DonationBank?: DonationBankListRelationFilter
  }

  export type HospitalOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    cnpj?: SortOrder
    email?: SortOrder
    websiteUrl?: SortOrderInput | SortOrder
    password?: SortOrder
    idAddress?: SortOrder
    Address?: AddressOrderByWithRelationInput
    HospitalSite?: HospitalSiteOrderByRelationAggregateInput
    Phone?: PhoneOrderByRelationAggregateInput
    Photo?: PhotoOrderByRelationAggregateInput
    Review?: ReviewOrderByRelationAggregateInput
    Campaign?: CampaignOrderByRelationAggregateInput
    DonationBank?: DonationBankOrderByRelationAggregateInput
  }

  export type HospitalWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: HospitalWhereInput | HospitalWhereInput[]
    OR?: HospitalWhereInput[]
    NOT?: HospitalWhereInput | HospitalWhereInput[]
    name?: StringFilter<"Hospital"> | string
    cnpj?: StringFilter<"Hospital"> | string
    email?: StringFilter<"Hospital"> | string
    websiteUrl?: StringNullableFilter<"Hospital"> | string | null
    password?: StringFilter<"Hospital"> | string
    idAddress?: IntFilter<"Hospital"> | number
    Address?: XOR<AddressRelationFilter, AddressWhereInput>
    HospitalSite?: HospitalSiteListRelationFilter
    Phone?: PhoneListRelationFilter
    Photo?: PhotoListRelationFilter
    Review?: ReviewListRelationFilter
    Campaign?: CampaignListRelationFilter
    DonationBank?: DonationBankListRelationFilter
  }, "id" | "id">

  export type HospitalOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    cnpj?: SortOrder
    email?: SortOrder
    websiteUrl?: SortOrderInput | SortOrder
    password?: SortOrder
    idAddress?: SortOrder
    _count?: HospitalCountOrderByAggregateInput
    _avg?: HospitalAvgOrderByAggregateInput
    _max?: HospitalMaxOrderByAggregateInput
    _min?: HospitalMinOrderByAggregateInput
    _sum?: HospitalSumOrderByAggregateInput
  }

  export type HospitalScalarWhereWithAggregatesInput = {
    AND?: HospitalScalarWhereWithAggregatesInput | HospitalScalarWhereWithAggregatesInput[]
    OR?: HospitalScalarWhereWithAggregatesInput[]
    NOT?: HospitalScalarWhereWithAggregatesInput | HospitalScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Hospital"> | number
    name?: StringWithAggregatesFilter<"Hospital"> | string
    cnpj?: StringWithAggregatesFilter<"Hospital"> | string
    email?: StringWithAggregatesFilter<"Hospital"> | string
    websiteUrl?: StringNullableWithAggregatesFilter<"Hospital"> | string | null
    password?: StringWithAggregatesFilter<"Hospital"> | string
    idAddress?: IntWithAggregatesFilter<"Hospital"> | number
  }

  export type CampaignWhereInput = {
    AND?: CampaignWhereInput | CampaignWhereInput[]
    OR?: CampaignWhereInput[]
    NOT?: CampaignWhereInput | CampaignWhereInput[]
    id?: IntFilter<"Campaign"> | number
    date?: DateTimeFilter<"Campaign"> | Date | string
    hour?: DateTimeFilter<"Campaign"> | Date | string
    description?: StringFilter<"Campaign"> | string
    image?: StringFilter<"Campaign"> | string
    idHospital?: IntFilter<"Campaign"> | number
    Hospital?: XOR<HospitalRelationFilter, HospitalWhereInput>
  }

  export type CampaignOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    hour?: SortOrder
    description?: SortOrder
    image?: SortOrder
    idHospital?: SortOrder
    Hospital?: HospitalOrderByWithRelationInput
  }

  export type CampaignWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CampaignWhereInput | CampaignWhereInput[]
    OR?: CampaignWhereInput[]
    NOT?: CampaignWhereInput | CampaignWhereInput[]
    date?: DateTimeFilter<"Campaign"> | Date | string
    hour?: DateTimeFilter<"Campaign"> | Date | string
    description?: StringFilter<"Campaign"> | string
    image?: StringFilter<"Campaign"> | string
    idHospital?: IntFilter<"Campaign"> | number
    Hospital?: XOR<HospitalRelationFilter, HospitalWhereInput>
  }, "id" | "id">

  export type CampaignOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    hour?: SortOrder
    description?: SortOrder
    image?: SortOrder
    idHospital?: SortOrder
    _count?: CampaignCountOrderByAggregateInput
    _avg?: CampaignAvgOrderByAggregateInput
    _max?: CampaignMaxOrderByAggregateInput
    _min?: CampaignMinOrderByAggregateInput
    _sum?: CampaignSumOrderByAggregateInput
  }

  export type CampaignScalarWhereWithAggregatesInput = {
    AND?: CampaignScalarWhereWithAggregatesInput | CampaignScalarWhereWithAggregatesInput[]
    OR?: CampaignScalarWhereWithAggregatesInput[]
    NOT?: CampaignScalarWhereWithAggregatesInput | CampaignScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Campaign"> | number
    date?: DateTimeWithAggregatesFilter<"Campaign"> | Date | string
    hour?: DateTimeWithAggregatesFilter<"Campaign"> | Date | string
    description?: StringWithAggregatesFilter<"Campaign"> | string
    image?: StringWithAggregatesFilter<"Campaign"> | string
    idHospital?: IntWithAggregatesFilter<"Campaign"> | number
  }

  export type DonationBankWhereInput = {
    AND?: DonationBankWhereInput | DonationBankWhereInput[]
    OR?: DonationBankWhereInput[]
    NOT?: DonationBankWhereInput | DonationBankWhereInput[]
    id?: IntFilter<"DonationBank"> | number
    year?: IntFilter<"DonationBank"> | number
    bloodMl?: DecimalFilter<"DonationBank"> | Decimal | DecimalJsLike | number | string
    idHospital?: IntFilter<"DonationBank"> | number
    idBloodType?: IntFilter<"DonationBank"> | number
    Hospital?: XOR<HospitalRelationFilter, HospitalWhereInput>
    BloodType?: XOR<BloodTypeRelationFilter, BloodTypeWhereInput>
  }

  export type DonationBankOrderByWithRelationInput = {
    id?: SortOrder
    year?: SortOrder
    bloodMl?: SortOrder
    idHospital?: SortOrder
    idBloodType?: SortOrder
    Hospital?: HospitalOrderByWithRelationInput
    BloodType?: BloodTypeOrderByWithRelationInput
  }

  export type DonationBankWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DonationBankWhereInput | DonationBankWhereInput[]
    OR?: DonationBankWhereInput[]
    NOT?: DonationBankWhereInput | DonationBankWhereInput[]
    year?: IntFilter<"DonationBank"> | number
    bloodMl?: DecimalFilter<"DonationBank"> | Decimal | DecimalJsLike | number | string
    idHospital?: IntFilter<"DonationBank"> | number
    idBloodType?: IntFilter<"DonationBank"> | number
    Hospital?: XOR<HospitalRelationFilter, HospitalWhereInput>
    BloodType?: XOR<BloodTypeRelationFilter, BloodTypeWhereInput>
  }, "id" | "id">

  export type DonationBankOrderByWithAggregationInput = {
    id?: SortOrder
    year?: SortOrder
    bloodMl?: SortOrder
    idHospital?: SortOrder
    idBloodType?: SortOrder
    _count?: DonationBankCountOrderByAggregateInput
    _avg?: DonationBankAvgOrderByAggregateInput
    _max?: DonationBankMaxOrderByAggregateInput
    _min?: DonationBankMinOrderByAggregateInput
    _sum?: DonationBankSumOrderByAggregateInput
  }

  export type DonationBankScalarWhereWithAggregatesInput = {
    AND?: DonationBankScalarWhereWithAggregatesInput | DonationBankScalarWhereWithAggregatesInput[]
    OR?: DonationBankScalarWhereWithAggregatesInput[]
    NOT?: DonationBankScalarWhereWithAggregatesInput | DonationBankScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DonationBank"> | number
    year?: IntWithAggregatesFilter<"DonationBank"> | number
    bloodMl?: DecimalWithAggregatesFilter<"DonationBank"> | Decimal | DecimalJsLike | number | string
    idHospital?: IntWithAggregatesFilter<"DonationBank"> | number
    idBloodType?: IntWithAggregatesFilter<"DonationBank"> | number
  }

  export type SiteWhereInput = {
    AND?: SiteWhereInput | SiteWhereInput[]
    OR?: SiteWhereInput[]
    NOT?: SiteWhereInput | SiteWhereInput[]
    id?: IntFilter<"Site"> | number
    site?: StringNullableFilter<"Site"> | string | null
    HospitalSite?: HospitalSiteListRelationFilter
  }

  export type SiteOrderByWithRelationInput = {
    id?: SortOrder
    site?: SortOrderInput | SortOrder
    HospitalSite?: HospitalSiteOrderByRelationAggregateInput
  }

  export type SiteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SiteWhereInput | SiteWhereInput[]
    OR?: SiteWhereInput[]
    NOT?: SiteWhereInput | SiteWhereInput[]
    site?: StringNullableFilter<"Site"> | string | null
    HospitalSite?: HospitalSiteListRelationFilter
  }, "id" | "id">

  export type SiteOrderByWithAggregationInput = {
    id?: SortOrder
    site?: SortOrderInput | SortOrder
    _count?: SiteCountOrderByAggregateInput
    _avg?: SiteAvgOrderByAggregateInput
    _max?: SiteMaxOrderByAggregateInput
    _min?: SiteMinOrderByAggregateInput
    _sum?: SiteSumOrderByAggregateInput
  }

  export type SiteScalarWhereWithAggregatesInput = {
    AND?: SiteScalarWhereWithAggregatesInput | SiteScalarWhereWithAggregatesInput[]
    OR?: SiteScalarWhereWithAggregatesInput[]
    NOT?: SiteScalarWhereWithAggregatesInput | SiteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Site"> | number
    site?: StringNullableWithAggregatesFilter<"Site"> | string | null
  }

  export type HospitalSiteWhereInput = {
    AND?: HospitalSiteWhereInput | HospitalSiteWhereInput[]
    OR?: HospitalSiteWhereInput[]
    NOT?: HospitalSiteWhereInput | HospitalSiteWhereInput[]
    id?: IntFilter<"HospitalSite"> | number
    idHospital?: IntFilter<"HospitalSite"> | number
    idSite?: IntFilter<"HospitalSite"> | number
    Hospital?: XOR<HospitalRelationFilter, HospitalWhereInput>
    Site?: XOR<SiteRelationFilter, SiteWhereInput>
    BookSchedule?: BookScheduleListRelationFilter
  }

  export type HospitalSiteOrderByWithRelationInput = {
    id?: SortOrder
    idHospital?: SortOrder
    idSite?: SortOrder
    Hospital?: HospitalOrderByWithRelationInput
    Site?: SiteOrderByWithRelationInput
    BookSchedule?: BookScheduleOrderByRelationAggregateInput
  }

  export type HospitalSiteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: HospitalSiteWhereInput | HospitalSiteWhereInput[]
    OR?: HospitalSiteWhereInput[]
    NOT?: HospitalSiteWhereInput | HospitalSiteWhereInput[]
    idHospital?: IntFilter<"HospitalSite"> | number
    idSite?: IntFilter<"HospitalSite"> | number
    Hospital?: XOR<HospitalRelationFilter, HospitalWhereInput>
    Site?: XOR<SiteRelationFilter, SiteWhereInput>
    BookSchedule?: BookScheduleListRelationFilter
  }, "id" | "id">

  export type HospitalSiteOrderByWithAggregationInput = {
    id?: SortOrder
    idHospital?: SortOrder
    idSite?: SortOrder
    _count?: HospitalSiteCountOrderByAggregateInput
    _avg?: HospitalSiteAvgOrderByAggregateInput
    _max?: HospitalSiteMaxOrderByAggregateInput
    _min?: HospitalSiteMinOrderByAggregateInput
    _sum?: HospitalSiteSumOrderByAggregateInput
  }

  export type HospitalSiteScalarWhereWithAggregatesInput = {
    AND?: HospitalSiteScalarWhereWithAggregatesInput | HospitalSiteScalarWhereWithAggregatesInput[]
    OR?: HospitalSiteScalarWhereWithAggregatesInput[]
    NOT?: HospitalSiteScalarWhereWithAggregatesInput | HospitalSiteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"HospitalSite"> | number
    idHospital?: IntWithAggregatesFilter<"HospitalSite"> | number
    idSite?: IntWithAggregatesFilter<"HospitalSite"> | number
  }

  export type PhoneWhereInput = {
    AND?: PhoneWhereInput | PhoneWhereInput[]
    OR?: PhoneWhereInput[]
    NOT?: PhoneWhereInput | PhoneWhereInput[]
    id?: IntFilter<"Phone"> | number
    phone?: StringFilter<"Phone"> | string
    idHospital?: IntFilter<"Phone"> | number
    Hospital?: XOR<HospitalRelationFilter, HospitalWhereInput>
  }

  export type PhoneOrderByWithRelationInput = {
    id?: SortOrder
    phone?: SortOrder
    idHospital?: SortOrder
    Hospital?: HospitalOrderByWithRelationInput
  }

  export type PhoneWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PhoneWhereInput | PhoneWhereInput[]
    OR?: PhoneWhereInput[]
    NOT?: PhoneWhereInput | PhoneWhereInput[]
    phone?: StringFilter<"Phone"> | string
    idHospital?: IntFilter<"Phone"> | number
    Hospital?: XOR<HospitalRelationFilter, HospitalWhereInput>
  }, "id" | "id">

  export type PhoneOrderByWithAggregationInput = {
    id?: SortOrder
    phone?: SortOrder
    idHospital?: SortOrder
    _count?: PhoneCountOrderByAggregateInput
    _avg?: PhoneAvgOrderByAggregateInput
    _max?: PhoneMaxOrderByAggregateInput
    _min?: PhoneMinOrderByAggregateInput
    _sum?: PhoneSumOrderByAggregateInput
  }

  export type PhoneScalarWhereWithAggregatesInput = {
    AND?: PhoneScalarWhereWithAggregatesInput | PhoneScalarWhereWithAggregatesInput[]
    OR?: PhoneScalarWhereWithAggregatesInput[]
    NOT?: PhoneScalarWhereWithAggregatesInput | PhoneScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Phone"> | number
    phone?: StringWithAggregatesFilter<"Phone"> | string
    idHospital?: IntWithAggregatesFilter<"Phone"> | number
  }

  export type PhotoWhereInput = {
    AND?: PhotoWhereInput | PhotoWhereInput[]
    OR?: PhotoWhereInput[]
    NOT?: PhotoWhereInput | PhotoWhereInput[]
    id?: IntFilter<"Photo"> | number
    url?: StringFilter<"Photo"> | string
    idHospital?: IntFilter<"Photo"> | number
    Hospital?: XOR<HospitalRelationFilter, HospitalWhereInput>
  }

  export type PhotoOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    idHospital?: SortOrder
    Hospital?: HospitalOrderByWithRelationInput
  }

  export type PhotoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PhotoWhereInput | PhotoWhereInput[]
    OR?: PhotoWhereInput[]
    NOT?: PhotoWhereInput | PhotoWhereInput[]
    url?: StringFilter<"Photo"> | string
    idHospital?: IntFilter<"Photo"> | number
    Hospital?: XOR<HospitalRelationFilter, HospitalWhereInput>
  }, "id" | "id">

  export type PhotoOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    idHospital?: SortOrder
    _count?: PhotoCountOrderByAggregateInput
    _avg?: PhotoAvgOrderByAggregateInput
    _max?: PhotoMaxOrderByAggregateInput
    _min?: PhotoMinOrderByAggregateInput
    _sum?: PhotoSumOrderByAggregateInput
  }

  export type PhotoScalarWhereWithAggregatesInput = {
    AND?: PhotoScalarWhereWithAggregatesInput | PhotoScalarWhereWithAggregatesInput[]
    OR?: PhotoScalarWhereWithAggregatesInput[]
    NOT?: PhotoScalarWhereWithAggregatesInput | PhotoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Photo"> | number
    url?: StringWithAggregatesFilter<"Photo"> | string
    idHospital?: IntWithAggregatesFilter<"Photo"> | number
  }

  export type StarWhereInput = {
    AND?: StarWhereInput | StarWhereInput[]
    OR?: StarWhereInput[]
    NOT?: StarWhereInput | StarWhereInput[]
    id?: IntFilter<"Star"> | number
    starNumber?: IntFilter<"Star"> | number
    Review?: ReviewListRelationFilter
  }

  export type StarOrderByWithRelationInput = {
    id?: SortOrder
    starNumber?: SortOrder
    Review?: ReviewOrderByRelationAggregateInput
  }

  export type StarWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StarWhereInput | StarWhereInput[]
    OR?: StarWhereInput[]
    NOT?: StarWhereInput | StarWhereInput[]
    starNumber?: IntFilter<"Star"> | number
    Review?: ReviewListRelationFilter
  }, "id" | "id">

  export type StarOrderByWithAggregationInput = {
    id?: SortOrder
    starNumber?: SortOrder
    _count?: StarCountOrderByAggregateInput
    _avg?: StarAvgOrderByAggregateInput
    _max?: StarMaxOrderByAggregateInput
    _min?: StarMinOrderByAggregateInput
    _sum?: StarSumOrderByAggregateInput
  }

  export type StarScalarWhereWithAggregatesInput = {
    AND?: StarScalarWhereWithAggregatesInput | StarScalarWhereWithAggregatesInput[]
    OR?: StarScalarWhereWithAggregatesInput[]
    NOT?: StarScalarWhereWithAggregatesInput | StarScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Star"> | number
    starNumber?: IntWithAggregatesFilter<"Star"> | number
  }

  export type ReviewWhereInput = {
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    id?: IntFilter<"Review"> | number
    opinion?: StringFilter<"Review"> | string
    date?: DateTimeFilter<"Review"> | Date | string
    idUser?: IntFilter<"Review"> | number
    idHospital?: IntFilter<"Review"> | number
    idStar?: IntFilter<"Review"> | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    Hospital?: XOR<HospitalRelationFilter, HospitalWhereInput>
    Star?: XOR<StarRelationFilter, StarWhereInput>
  }

  export type ReviewOrderByWithRelationInput = {
    id?: SortOrder
    opinion?: SortOrder
    date?: SortOrder
    idUser?: SortOrder
    idHospital?: SortOrder
    idStar?: SortOrder
    User?: UserOrderByWithRelationInput
    Hospital?: HospitalOrderByWithRelationInput
    Star?: StarOrderByWithRelationInput
  }

  export type ReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    opinion?: StringFilter<"Review"> | string
    date?: DateTimeFilter<"Review"> | Date | string
    idUser?: IntFilter<"Review"> | number
    idHospital?: IntFilter<"Review"> | number
    idStar?: IntFilter<"Review"> | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    Hospital?: XOR<HospitalRelationFilter, HospitalWhereInput>
    Star?: XOR<StarRelationFilter, StarWhereInput>
  }, "id" | "id">

  export type ReviewOrderByWithAggregationInput = {
    id?: SortOrder
    opinion?: SortOrder
    date?: SortOrder
    idUser?: SortOrder
    idHospital?: SortOrder
    idStar?: SortOrder
    _count?: ReviewCountOrderByAggregateInput
    _avg?: ReviewAvgOrderByAggregateInput
    _max?: ReviewMaxOrderByAggregateInput
    _min?: ReviewMinOrderByAggregateInput
    _sum?: ReviewSumOrderByAggregateInput
  }

  export type ReviewScalarWhereWithAggregatesInput = {
    AND?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    OR?: ReviewScalarWhereWithAggregatesInput[]
    NOT?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Review"> | number
    opinion?: StringWithAggregatesFilter<"Review"> | string
    date?: DateTimeWithAggregatesFilter<"Review"> | Date | string
    idUser?: IntWithAggregatesFilter<"Review"> | number
    idHospital?: IntWithAggregatesFilter<"Review"> | number
    idStar?: IntWithAggregatesFilter<"Review"> | number
  }

  export type StatusWhereInput = {
    AND?: StatusWhereInput | StatusWhereInput[]
    OR?: StatusWhereInput[]
    NOT?: StatusWhereInput | StatusWhereInput[]
    id?: IntFilter<"Status"> | number
    status?: EnumSTATUSFilter<"Status"> | $Enums.STATUS
    ScheduleStatus?: ScheduleStatusListRelationFilter
  }

  export type StatusOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    ScheduleStatus?: ScheduleStatusOrderByRelationAggregateInput
  }

  export type StatusWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StatusWhereInput | StatusWhereInput[]
    OR?: StatusWhereInput[]
    NOT?: StatusWhereInput | StatusWhereInput[]
    status?: EnumSTATUSFilter<"Status"> | $Enums.STATUS
    ScheduleStatus?: ScheduleStatusListRelationFilter
  }, "id" | "id">

  export type StatusOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    _count?: StatusCountOrderByAggregateInput
    _avg?: StatusAvgOrderByAggregateInput
    _max?: StatusMaxOrderByAggregateInput
    _min?: StatusMinOrderByAggregateInput
    _sum?: StatusSumOrderByAggregateInput
  }

  export type StatusScalarWhereWithAggregatesInput = {
    AND?: StatusScalarWhereWithAggregatesInput | StatusScalarWhereWithAggregatesInput[]
    OR?: StatusScalarWhereWithAggregatesInput[]
    NOT?: StatusScalarWhereWithAggregatesInput | StatusScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Status"> | number
    status?: EnumSTATUSWithAggregatesFilter<"Status"> | $Enums.STATUS
  }

  export type BookScheduleWhereInput = {
    AND?: BookScheduleWhereInput | BookScheduleWhereInput[]
    OR?: BookScheduleWhereInput[]
    NOT?: BookScheduleWhereInput | BookScheduleWhereInput[]
    id?: IntFilter<"BookSchedule"> | number
    date?: DateTimeFilter<"BookSchedule"> | Date | string
    hour?: DateTimeFilter<"BookSchedule"> | Date | string
    idHospitalSite?: IntFilter<"BookSchedule"> | number
    HospitalSite?: XOR<HospitalSiteRelationFilter, HospitalSiteWhereInput>
    Schedule?: ScheduleListRelationFilter
  }

  export type BookScheduleOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    hour?: SortOrder
    idHospitalSite?: SortOrder
    HospitalSite?: HospitalSiteOrderByWithRelationInput
    Schedule?: ScheduleOrderByRelationAggregateInput
  }

  export type BookScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BookScheduleWhereInput | BookScheduleWhereInput[]
    OR?: BookScheduleWhereInput[]
    NOT?: BookScheduleWhereInput | BookScheduleWhereInput[]
    date?: DateTimeFilter<"BookSchedule"> | Date | string
    hour?: DateTimeFilter<"BookSchedule"> | Date | string
    idHospitalSite?: IntFilter<"BookSchedule"> | number
    HospitalSite?: XOR<HospitalSiteRelationFilter, HospitalSiteWhereInput>
    Schedule?: ScheduleListRelationFilter
  }, "id" | "id">

  export type BookScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    hour?: SortOrder
    idHospitalSite?: SortOrder
    _count?: BookScheduleCountOrderByAggregateInput
    _avg?: BookScheduleAvgOrderByAggregateInput
    _max?: BookScheduleMaxOrderByAggregateInput
    _min?: BookScheduleMinOrderByAggregateInput
    _sum?: BookScheduleSumOrderByAggregateInput
  }

  export type BookScheduleScalarWhereWithAggregatesInput = {
    AND?: BookScheduleScalarWhereWithAggregatesInput | BookScheduleScalarWhereWithAggregatesInput[]
    OR?: BookScheduleScalarWhereWithAggregatesInput[]
    NOT?: BookScheduleScalarWhereWithAggregatesInput | BookScheduleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BookSchedule"> | number
    date?: DateTimeWithAggregatesFilter<"BookSchedule"> | Date | string
    hour?: DateTimeWithAggregatesFilter<"BookSchedule"> | Date | string
    idHospitalSite?: IntWithAggregatesFilter<"BookSchedule"> | number
  }

  export type ScheduleWhereInput = {
    AND?: ScheduleWhereInput | ScheduleWhereInput[]
    OR?: ScheduleWhereInput[]
    NOT?: ScheduleWhereInput | ScheduleWhereInput[]
    id?: IntFilter<"Schedule"> | number
    idUser?: IntFilter<"Schedule"> | number
    idBookSchedule?: IntFilter<"Schedule"> | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    BookSchedule?: XOR<BookScheduleRelationFilter, BookScheduleWhereInput>
    ScheduleStatus?: ScheduleStatusListRelationFilter
  }

  export type ScheduleOrderByWithRelationInput = {
    id?: SortOrder
    idUser?: SortOrder
    idBookSchedule?: SortOrder
    User?: UserOrderByWithRelationInput
    BookSchedule?: BookScheduleOrderByWithRelationInput
    ScheduleStatus?: ScheduleStatusOrderByRelationAggregateInput
  }

  export type ScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ScheduleWhereInput | ScheduleWhereInput[]
    OR?: ScheduleWhereInput[]
    NOT?: ScheduleWhereInput | ScheduleWhereInput[]
    idUser?: IntFilter<"Schedule"> | number
    idBookSchedule?: IntFilter<"Schedule"> | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    BookSchedule?: XOR<BookScheduleRelationFilter, BookScheduleWhereInput>
    ScheduleStatus?: ScheduleStatusListRelationFilter
  }, "id" | "id">

  export type ScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    idUser?: SortOrder
    idBookSchedule?: SortOrder
    _count?: ScheduleCountOrderByAggregateInput
    _avg?: ScheduleAvgOrderByAggregateInput
    _max?: ScheduleMaxOrderByAggregateInput
    _min?: ScheduleMinOrderByAggregateInput
    _sum?: ScheduleSumOrderByAggregateInput
  }

  export type ScheduleScalarWhereWithAggregatesInput = {
    AND?: ScheduleScalarWhereWithAggregatesInput | ScheduleScalarWhereWithAggregatesInput[]
    OR?: ScheduleScalarWhereWithAggregatesInput[]
    NOT?: ScheduleScalarWhereWithAggregatesInput | ScheduleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Schedule"> | number
    idUser?: IntWithAggregatesFilter<"Schedule"> | number
    idBookSchedule?: IntWithAggregatesFilter<"Schedule"> | number
  }

  export type ScheduleStatusWhereInput = {
    AND?: ScheduleStatusWhereInput | ScheduleStatusWhereInput[]
    OR?: ScheduleStatusWhereInput[]
    NOT?: ScheduleStatusWhereInput | ScheduleStatusWhereInput[]
    id?: IntFilter<"ScheduleStatus"> | number
    observation?: StringNullableFilter<"ScheduleStatus"> | string | null
    idSchedule?: IntFilter<"ScheduleStatus"> | number
    idStatus?: IntFilter<"ScheduleStatus"> | number
    Schedule?: XOR<ScheduleRelationFilter, ScheduleWhereInput>
    Status?: XOR<StatusRelationFilter, StatusWhereInput>
  }

  export type ScheduleStatusOrderByWithRelationInput = {
    id?: SortOrder
    observation?: SortOrderInput | SortOrder
    idSchedule?: SortOrder
    idStatus?: SortOrder
    Schedule?: ScheduleOrderByWithRelationInput
    Status?: StatusOrderByWithRelationInput
  }

  export type ScheduleStatusWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ScheduleStatusWhereInput | ScheduleStatusWhereInput[]
    OR?: ScheduleStatusWhereInput[]
    NOT?: ScheduleStatusWhereInput | ScheduleStatusWhereInput[]
    observation?: StringNullableFilter<"ScheduleStatus"> | string | null
    idSchedule?: IntFilter<"ScheduleStatus"> | number
    idStatus?: IntFilter<"ScheduleStatus"> | number
    Schedule?: XOR<ScheduleRelationFilter, ScheduleWhereInput>
    Status?: XOR<StatusRelationFilter, StatusWhereInput>
  }, "id" | "id">

  export type ScheduleStatusOrderByWithAggregationInput = {
    id?: SortOrder
    observation?: SortOrderInput | SortOrder
    idSchedule?: SortOrder
    idStatus?: SortOrder
    _count?: ScheduleStatusCountOrderByAggregateInput
    _avg?: ScheduleStatusAvgOrderByAggregateInput
    _max?: ScheduleStatusMaxOrderByAggregateInput
    _min?: ScheduleStatusMinOrderByAggregateInput
    _sum?: ScheduleStatusSumOrderByAggregateInput
  }

  export type ScheduleStatusScalarWhereWithAggregatesInput = {
    AND?: ScheduleStatusScalarWhereWithAggregatesInput | ScheduleStatusScalarWhereWithAggregatesInput[]
    OR?: ScheduleStatusScalarWhereWithAggregatesInput[]
    NOT?: ScheduleStatusScalarWhereWithAggregatesInput | ScheduleStatusScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ScheduleStatus"> | number
    observation?: StringNullableWithAggregatesFilter<"ScheduleStatus"> | string | null
    idSchedule?: IntWithAggregatesFilter<"ScheduleStatus"> | number
    idStatus?: IntWithAggregatesFilter<"ScheduleStatus"> | number
  }

  export type BloodTypeCreateInput = {
    type: string
    User?: UserCreateNestedManyWithoutBloodTypeInput
    DonationBank?: DonationBankCreateNestedManyWithoutBloodTypeInput
  }

  export type BloodTypeUncheckedCreateInput = {
    id?: number
    type: string
    User?: UserUncheckedCreateNestedManyWithoutBloodTypeInput
    DonationBank?: DonationBankUncheckedCreateNestedManyWithoutBloodTypeInput
  }

  export type BloodTypeUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateManyWithoutBloodTypeNestedInput
    DonationBank?: DonationBankUpdateManyWithoutBloodTypeNestedInput
  }

  export type BloodTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    User?: UserUncheckedUpdateManyWithoutBloodTypeNestedInput
    DonationBank?: DonationBankUncheckedUpdateManyWithoutBloodTypeNestedInput
  }

  export type BloodTypeCreateManyInput = {
    id?: number
    type: string
  }

  export type BloodTypeUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
  }

  export type BloodTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type SexCreateInput = {
    sex: string
    User?: UserCreateNestedManyWithoutSexInput
  }

  export type SexUncheckedCreateInput = {
    id?: number
    sex: string
    User?: UserUncheckedCreateNestedManyWithoutSexInput
  }

  export type SexUpdateInput = {
    sex?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateManyWithoutSexNestedInput
  }

  export type SexUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sex?: StringFieldUpdateOperationsInput | string
    User?: UserUncheckedUpdateManyWithoutSexNestedInput
  }

  export type SexCreateManyInput = {
    id?: number
    sex: string
  }

  export type SexUpdateManyMutationInput = {
    sex?: StringFieldUpdateOperationsInput | string
  }

  export type SexUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sex?: StringFieldUpdateOperationsInput | string
  }

  export type AddressCreateInput = {
    cep: string
    uf: string
    city: string
    neighborhood: string
    street: string
    number: string
    complement?: string | null
    Hospital?: HospitalCreateNestedManyWithoutAddressInput
    User?: UserCreateNestedManyWithoutAddressInput
  }

  export type AddressUncheckedCreateInput = {
    id?: number
    cep: string
    uf: string
    city: string
    neighborhood: string
    street: string
    number: string
    complement?: string | null
    Hospital?: HospitalUncheckedCreateNestedManyWithoutAddressInput
    User?: UserUncheckedCreateNestedManyWithoutAddressInput
  }

  export type AddressUpdateInput = {
    cep?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    Hospital?: HospitalUpdateManyWithoutAddressNestedInput
    User?: UserUpdateManyWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cep?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    Hospital?: HospitalUncheckedUpdateManyWithoutAddressNestedInput
    User?: UserUncheckedUpdateManyWithoutAddressNestedInput
  }

  export type AddressCreateManyInput = {
    id?: number
    cep: string
    uf: string
    city: string
    neighborhood: string
    street: string
    number: string
    complement?: string | null
  }

  export type AddressUpdateManyMutationInput = {
    cep?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    complement?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AddressUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cep?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    complement?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateInput = {
    name: string
    cpf: string
    dateOfBirth: Date | string
    password: string
    weight: Decimal | DecimalJsLike | number | string
    email: string
    photoUrl?: string | null
    phone: string
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    Address: AddressCreateNestedOneWithoutUserInput
    Sex: SexCreateNestedOneWithoutUserInput
    BloodType?: BloodTypeCreateNestedOneWithoutUserInput
    Review?: ReviewCreateNestedManyWithoutUserInput
    Schedule?: ScheduleCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    cpf: string
    dateOfBirth: Date | string
    password: string
    weight: Decimal | DecimalJsLike | number | string
    email: string
    photoUrl?: string | null
    phone: string
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    idAddress: number
    idSex: number
    idBloodType?: number
    Review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    Schedule?: ScheduleUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    weight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    email?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Address?: AddressUpdateOneRequiredWithoutUserNestedInput
    Sex?: SexUpdateOneRequiredWithoutUserNestedInput
    BloodType?: BloodTypeUpdateOneRequiredWithoutUserNestedInput
    Review?: ReviewUpdateManyWithoutUserNestedInput
    Schedule?: ScheduleUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    weight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    email?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idAddress?: IntFieldUpdateOperationsInput | number
    idSex?: IntFieldUpdateOperationsInput | number
    idBloodType?: IntFieldUpdateOperationsInput | number
    Review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    Schedule?: ScheduleUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    cpf: string
    dateOfBirth: Date | string
    password: string
    weight: Decimal | DecimalJsLike | number | string
    email: string
    photoUrl?: string | null
    phone: string
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    idAddress: number
    idSex: number
    idBloodType?: number
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    weight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    email?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    weight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    email?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idAddress?: IntFieldUpdateOperationsInput | number
    idSex?: IntFieldUpdateOperationsInput | number
    idBloodType?: IntFieldUpdateOperationsInput | number
  }

  export type HospitalCreateInput = {
    name: string
    cnpj: string
    email: string
    websiteUrl?: string | null
    password: string
    Address: AddressCreateNestedOneWithoutHospitalInput
    HospitalSite?: HospitalSiteCreateNestedManyWithoutHospitalInput
    Phone?: PhoneCreateNestedManyWithoutHospitalInput
    Photo?: PhotoCreateNestedManyWithoutHospitalInput
    Review?: ReviewCreateNestedManyWithoutHospitalInput
    Campaign?: CampaignCreateNestedManyWithoutHospitalInput
    DonationBank?: DonationBankCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateInput = {
    id?: number
    name: string
    cnpj: string
    email: string
    websiteUrl?: string | null
    password: string
    idAddress: number
    HospitalSite?: HospitalSiteUncheckedCreateNestedManyWithoutHospitalInput
    Phone?: PhoneUncheckedCreateNestedManyWithoutHospitalInput
    Photo?: PhotoUncheckedCreateNestedManyWithoutHospitalInput
    Review?: ReviewUncheckedCreateNestedManyWithoutHospitalInput
    Campaign?: CampaignUncheckedCreateNestedManyWithoutHospitalInput
    DonationBank?: DonationBankUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    Address?: AddressUpdateOneRequiredWithoutHospitalNestedInput
    HospitalSite?: HospitalSiteUpdateManyWithoutHospitalNestedInput
    Phone?: PhoneUpdateManyWithoutHospitalNestedInput
    Photo?: PhotoUpdateManyWithoutHospitalNestedInput
    Review?: ReviewUpdateManyWithoutHospitalNestedInput
    Campaign?: CampaignUpdateManyWithoutHospitalNestedInput
    DonationBank?: DonationBankUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    idAddress?: IntFieldUpdateOperationsInput | number
    HospitalSite?: HospitalSiteUncheckedUpdateManyWithoutHospitalNestedInput
    Phone?: PhoneUncheckedUpdateManyWithoutHospitalNestedInput
    Photo?: PhotoUncheckedUpdateManyWithoutHospitalNestedInput
    Review?: ReviewUncheckedUpdateManyWithoutHospitalNestedInput
    Campaign?: CampaignUncheckedUpdateManyWithoutHospitalNestedInput
    DonationBank?: DonationBankUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalCreateManyInput = {
    id?: number
    name: string
    cnpj: string
    email: string
    websiteUrl?: string | null
    password: string
    idAddress: number
  }

  export type HospitalUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
  }

  export type HospitalUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    idAddress?: IntFieldUpdateOperationsInput | number
  }

  export type CampaignCreateInput = {
    date: Date | string
    hour: Date | string
    description: string
    image: string
    Hospital: HospitalCreateNestedOneWithoutCampaignInput
  }

  export type CampaignUncheckedCreateInput = {
    id?: number
    date: Date | string
    hour: Date | string
    description: string
    image: string
    idHospital: number
  }

  export type CampaignUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hour?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    Hospital?: HospitalUpdateOneRequiredWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hour?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    idHospital?: IntFieldUpdateOperationsInput | number
  }

  export type CampaignCreateManyInput = {
    id?: number
    date: Date | string
    hour: Date | string
    description: string
    image: string
    idHospital: number
  }

  export type CampaignUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hour?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type CampaignUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hour?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    idHospital?: IntFieldUpdateOperationsInput | number
  }

  export type DonationBankCreateInput = {
    year: number
    bloodMl: Decimal | DecimalJsLike | number | string
    Hospital: HospitalCreateNestedOneWithoutDonationBankInput
    BloodType: BloodTypeCreateNestedOneWithoutDonationBankInput
  }

  export type DonationBankUncheckedCreateInput = {
    id?: number
    year: number
    bloodMl: Decimal | DecimalJsLike | number | string
    idHospital: number
    idBloodType: number
  }

  export type DonationBankUpdateInput = {
    year?: IntFieldUpdateOperationsInput | number
    bloodMl?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Hospital?: HospitalUpdateOneRequiredWithoutDonationBankNestedInput
    BloodType?: BloodTypeUpdateOneRequiredWithoutDonationBankNestedInput
  }

  export type DonationBankUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    bloodMl?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    idHospital?: IntFieldUpdateOperationsInput | number
    idBloodType?: IntFieldUpdateOperationsInput | number
  }

  export type DonationBankCreateManyInput = {
    id?: number
    year: number
    bloodMl: Decimal | DecimalJsLike | number | string
    idHospital: number
    idBloodType: number
  }

  export type DonationBankUpdateManyMutationInput = {
    year?: IntFieldUpdateOperationsInput | number
    bloodMl?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type DonationBankUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    bloodMl?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    idHospital?: IntFieldUpdateOperationsInput | number
    idBloodType?: IntFieldUpdateOperationsInput | number
  }

  export type SiteCreateInput = {
    site?: string | null
    HospitalSite?: HospitalSiteCreateNestedManyWithoutSiteInput
  }

  export type SiteUncheckedCreateInput = {
    id?: number
    site?: string | null
    HospitalSite?: HospitalSiteUncheckedCreateNestedManyWithoutSiteInput
  }

  export type SiteUpdateInput = {
    site?: NullableStringFieldUpdateOperationsInput | string | null
    HospitalSite?: HospitalSiteUpdateManyWithoutSiteNestedInput
  }

  export type SiteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    site?: NullableStringFieldUpdateOperationsInput | string | null
    HospitalSite?: HospitalSiteUncheckedUpdateManyWithoutSiteNestedInput
  }

  export type SiteCreateManyInput = {
    id?: number
    site?: string | null
  }

  export type SiteUpdateManyMutationInput = {
    site?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SiteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    site?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HospitalSiteCreateInput = {
    Hospital: HospitalCreateNestedOneWithoutHospitalSiteInput
    Site: SiteCreateNestedOneWithoutHospitalSiteInput
    BookSchedule?: BookScheduleCreateNestedManyWithoutHospitalSiteInput
  }

  export type HospitalSiteUncheckedCreateInput = {
    id?: number
    idHospital: number
    idSite: number
    BookSchedule?: BookScheduleUncheckedCreateNestedManyWithoutHospitalSiteInput
  }

  export type HospitalSiteUpdateInput = {
    Hospital?: HospitalUpdateOneRequiredWithoutHospitalSiteNestedInput
    Site?: SiteUpdateOneRequiredWithoutHospitalSiteNestedInput
    BookSchedule?: BookScheduleUpdateManyWithoutHospitalSiteNestedInput
  }

  export type HospitalSiteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    idHospital?: IntFieldUpdateOperationsInput | number
    idSite?: IntFieldUpdateOperationsInput | number
    BookSchedule?: BookScheduleUncheckedUpdateManyWithoutHospitalSiteNestedInput
  }

  export type HospitalSiteCreateManyInput = {
    id?: number
    idHospital: number
    idSite: number
  }

  export type HospitalSiteUpdateManyMutationInput = {

  }

  export type HospitalSiteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    idHospital?: IntFieldUpdateOperationsInput | number
    idSite?: IntFieldUpdateOperationsInput | number
  }

  export type PhoneCreateInput = {
    phone: string
    Hospital: HospitalCreateNestedOneWithoutPhoneInput
  }

  export type PhoneUncheckedCreateInput = {
    id?: number
    phone: string
    idHospital: number
  }

  export type PhoneUpdateInput = {
    phone?: StringFieldUpdateOperationsInput | string
    Hospital?: HospitalUpdateOneRequiredWithoutPhoneNestedInput
  }

  export type PhoneUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    idHospital?: IntFieldUpdateOperationsInput | number
  }

  export type PhoneCreateManyInput = {
    id?: number
    phone: string
    idHospital: number
  }

  export type PhoneUpdateManyMutationInput = {
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type PhoneUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    idHospital?: IntFieldUpdateOperationsInput | number
  }

  export type PhotoCreateInput = {
    url: string
    Hospital: HospitalCreateNestedOneWithoutPhotoInput
  }

  export type PhotoUncheckedCreateInput = {
    id?: number
    url: string
    idHospital: number
  }

  export type PhotoUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    Hospital?: HospitalUpdateOneRequiredWithoutPhotoNestedInput
  }

  export type PhotoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    idHospital?: IntFieldUpdateOperationsInput | number
  }

  export type PhotoCreateManyInput = {
    id?: number
    url: string
    idHospital: number
  }

  export type PhotoUpdateManyMutationInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type PhotoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    idHospital?: IntFieldUpdateOperationsInput | number
  }

  export type StarCreateInput = {
    starNumber: number
    Review?: ReviewCreateNestedManyWithoutStarInput
  }

  export type StarUncheckedCreateInput = {
    id?: number
    starNumber: number
    Review?: ReviewUncheckedCreateNestedManyWithoutStarInput
  }

  export type StarUpdateInput = {
    starNumber?: IntFieldUpdateOperationsInput | number
    Review?: ReviewUpdateManyWithoutStarNestedInput
  }

  export type StarUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    starNumber?: IntFieldUpdateOperationsInput | number
    Review?: ReviewUncheckedUpdateManyWithoutStarNestedInput
  }

  export type StarCreateManyInput = {
    id?: number
    starNumber: number
  }

  export type StarUpdateManyMutationInput = {
    starNumber?: IntFieldUpdateOperationsInput | number
  }

  export type StarUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    starNumber?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewCreateInput = {
    opinion: string
    date?: Date | string
    User: UserCreateNestedOneWithoutReviewInput
    Hospital: HospitalCreateNestedOneWithoutReviewInput
    Star: StarCreateNestedOneWithoutReviewInput
  }

  export type ReviewUncheckedCreateInput = {
    id?: number
    opinion: string
    date?: Date | string
    idUser: number
    idHospital: number
    idStar: number
  }

  export type ReviewUpdateInput = {
    opinion?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutReviewNestedInput
    Hospital?: HospitalUpdateOneRequiredWithoutReviewNestedInput
    Star?: StarUpdateOneRequiredWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    opinion?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    idUser?: IntFieldUpdateOperationsInput | number
    idHospital?: IntFieldUpdateOperationsInput | number
    idStar?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewCreateManyInput = {
    id?: number
    opinion: string
    date?: Date | string
    idUser: number
    idHospital: number
    idStar: number
  }

  export type ReviewUpdateManyMutationInput = {
    opinion?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    opinion?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    idUser?: IntFieldUpdateOperationsInput | number
    idHospital?: IntFieldUpdateOperationsInput | number
    idStar?: IntFieldUpdateOperationsInput | number
  }

  export type StatusCreateInput = {
    status: $Enums.STATUS
    ScheduleStatus?: ScheduleStatusCreateNestedManyWithoutStatusInput
  }

  export type StatusUncheckedCreateInput = {
    id?: number
    status: $Enums.STATUS
    ScheduleStatus?: ScheduleStatusUncheckedCreateNestedManyWithoutStatusInput
  }

  export type StatusUpdateInput = {
    status?: EnumSTATUSFieldUpdateOperationsInput | $Enums.STATUS
    ScheduleStatus?: ScheduleStatusUpdateManyWithoutStatusNestedInput
  }

  export type StatusUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: EnumSTATUSFieldUpdateOperationsInput | $Enums.STATUS
    ScheduleStatus?: ScheduleStatusUncheckedUpdateManyWithoutStatusNestedInput
  }

  export type StatusCreateManyInput = {
    id?: number
    status: $Enums.STATUS
  }

  export type StatusUpdateManyMutationInput = {
    status?: EnumSTATUSFieldUpdateOperationsInput | $Enums.STATUS
  }

  export type StatusUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: EnumSTATUSFieldUpdateOperationsInput | $Enums.STATUS
  }

  export type BookScheduleCreateInput = {
    date: Date | string
    hour: Date | string
    HospitalSite: HospitalSiteCreateNestedOneWithoutBookScheduleInput
    Schedule?: ScheduleCreateNestedManyWithoutBookScheduleInput
  }

  export type BookScheduleUncheckedCreateInput = {
    id?: number
    date: Date | string
    hour: Date | string
    idHospitalSite: number
    Schedule?: ScheduleUncheckedCreateNestedManyWithoutBookScheduleInput
  }

  export type BookScheduleUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hour?: DateTimeFieldUpdateOperationsInput | Date | string
    HospitalSite?: HospitalSiteUpdateOneRequiredWithoutBookScheduleNestedInput
    Schedule?: ScheduleUpdateManyWithoutBookScheduleNestedInput
  }

  export type BookScheduleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hour?: DateTimeFieldUpdateOperationsInput | Date | string
    idHospitalSite?: IntFieldUpdateOperationsInput | number
    Schedule?: ScheduleUncheckedUpdateManyWithoutBookScheduleNestedInput
  }

  export type BookScheduleCreateManyInput = {
    id?: number
    date: Date | string
    hour: Date | string
    idHospitalSite: number
  }

  export type BookScheduleUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hour?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookScheduleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hour?: DateTimeFieldUpdateOperationsInput | Date | string
    idHospitalSite?: IntFieldUpdateOperationsInput | number
  }

  export type ScheduleCreateInput = {
    User: UserCreateNestedOneWithoutScheduleInput
    BookSchedule: BookScheduleCreateNestedOneWithoutScheduleInput
    ScheduleStatus?: ScheduleStatusCreateNestedManyWithoutScheduleInput
  }

  export type ScheduleUncheckedCreateInput = {
    id?: number
    idUser: number
    idBookSchedule: number
    ScheduleStatus?: ScheduleStatusUncheckedCreateNestedManyWithoutScheduleInput
  }

  export type ScheduleUpdateInput = {
    User?: UserUpdateOneRequiredWithoutScheduleNestedInput
    BookSchedule?: BookScheduleUpdateOneRequiredWithoutScheduleNestedInput
    ScheduleStatus?: ScheduleStatusUpdateManyWithoutScheduleNestedInput
  }

  export type ScheduleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    idUser?: IntFieldUpdateOperationsInput | number
    idBookSchedule?: IntFieldUpdateOperationsInput | number
    ScheduleStatus?: ScheduleStatusUncheckedUpdateManyWithoutScheduleNestedInput
  }

  export type ScheduleCreateManyInput = {
    id?: number
    idUser: number
    idBookSchedule: number
  }

  export type ScheduleUpdateManyMutationInput = {

  }

  export type ScheduleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    idUser?: IntFieldUpdateOperationsInput | number
    idBookSchedule?: IntFieldUpdateOperationsInput | number
  }

  export type ScheduleStatusCreateInput = {
    observation?: string | null
    Schedule: ScheduleCreateNestedOneWithoutScheduleStatusInput
    Status: StatusCreateNestedOneWithoutScheduleStatusInput
  }

  export type ScheduleStatusUncheckedCreateInput = {
    id?: number
    observation?: string | null
    idSchedule: number
    idStatus: number
  }

  export type ScheduleStatusUpdateInput = {
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    Schedule?: ScheduleUpdateOneRequiredWithoutScheduleStatusNestedInput
    Status?: StatusUpdateOneRequiredWithoutScheduleStatusNestedInput
  }

  export type ScheduleStatusUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    idSchedule?: IntFieldUpdateOperationsInput | number
    idStatus?: IntFieldUpdateOperationsInput | number
  }

  export type ScheduleStatusCreateManyInput = {
    id?: number
    observation?: string | null
    idSchedule: number
    idStatus: number
  }

  export type ScheduleStatusUpdateManyMutationInput = {
    observation?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ScheduleStatusUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    idSchedule?: IntFieldUpdateOperationsInput | number
    idStatus?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type DonationBankListRelationFilter = {
    every?: DonationBankWhereInput
    some?: DonationBankWhereInput
    none?: DonationBankWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DonationBankOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BloodTypeCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type BloodTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BloodTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type BloodTypeMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type BloodTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type SexCountOrderByAggregateInput = {
    id?: SortOrder
    sex?: SortOrder
  }

  export type SexAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SexMaxOrderByAggregateInput = {
    id?: SortOrder
    sex?: SortOrder
  }

  export type SexMinOrderByAggregateInput = {
    id?: SortOrder
    sex?: SortOrder
  }

  export type SexSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type HospitalListRelationFilter = {
    every?: HospitalWhereInput
    some?: HospitalWhereInput
    none?: HospitalWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type HospitalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AddressCountOrderByAggregateInput = {
    id?: SortOrder
    cep?: SortOrder
    uf?: SortOrder
    city?: SortOrder
    neighborhood?: SortOrder
    street?: SortOrder
    number?: SortOrder
    complement?: SortOrder
  }

  export type AddressAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AddressMaxOrderByAggregateInput = {
    id?: SortOrder
    cep?: SortOrder
    uf?: SortOrder
    city?: SortOrder
    neighborhood?: SortOrder
    street?: SortOrder
    number?: SortOrder
    complement?: SortOrder
  }

  export type AddressMinOrderByAggregateInput = {
    id?: SortOrder
    cep?: SortOrder
    uf?: SortOrder
    city?: SortOrder
    neighborhood?: SortOrder
    street?: SortOrder
    number?: SortOrder
    complement?: SortOrder
  }

  export type AddressSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type AddressRelationFilter = {
    is?: AddressWhereInput
    isNot?: AddressWhereInput
  }

  export type SexRelationFilter = {
    is?: SexWhereInput
    isNot?: SexWhereInput
  }

  export type BloodTypeRelationFilter = {
    is?: BloodTypeWhereInput
    isNot?: BloodTypeWhereInput
  }

  export type ReviewListRelationFilter = {
    every?: ReviewWhereInput
    some?: ReviewWhereInput
    none?: ReviewWhereInput
  }

  export type ScheduleListRelationFilter = {
    every?: ScheduleWhereInput
    some?: ScheduleWhereInput
    none?: ScheduleWhereInput
  }

  export type ReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    dateOfBirth?: SortOrder
    password?: SortOrder
    weight?: SortOrder
    email?: SortOrder
    photoUrl?: SortOrder
    phone?: SortOrder
    passwordResetToken?: SortOrder
    passwordResetExpires?: SortOrder
    idAddress?: SortOrder
    idSex?: SortOrder
    idBloodType?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    weight?: SortOrder
    idAddress?: SortOrder
    idSex?: SortOrder
    idBloodType?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    dateOfBirth?: SortOrder
    password?: SortOrder
    weight?: SortOrder
    email?: SortOrder
    photoUrl?: SortOrder
    phone?: SortOrder
    passwordResetToken?: SortOrder
    passwordResetExpires?: SortOrder
    idAddress?: SortOrder
    idSex?: SortOrder
    idBloodType?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    dateOfBirth?: SortOrder
    password?: SortOrder
    weight?: SortOrder
    email?: SortOrder
    photoUrl?: SortOrder
    phone?: SortOrder
    passwordResetToken?: SortOrder
    passwordResetExpires?: SortOrder
    idAddress?: SortOrder
    idSex?: SortOrder
    idBloodType?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    weight?: SortOrder
    idAddress?: SortOrder
    idSex?: SortOrder
    idBloodType?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type HospitalSiteListRelationFilter = {
    every?: HospitalSiteWhereInput
    some?: HospitalSiteWhereInput
    none?: HospitalSiteWhereInput
  }

  export type PhoneListRelationFilter = {
    every?: PhoneWhereInput
    some?: PhoneWhereInput
    none?: PhoneWhereInput
  }

  export type PhotoListRelationFilter = {
    every?: PhotoWhereInput
    some?: PhotoWhereInput
    none?: PhotoWhereInput
  }

  export type CampaignListRelationFilter = {
    every?: CampaignWhereInput
    some?: CampaignWhereInput
    none?: CampaignWhereInput
  }

  export type HospitalSiteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PhoneOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PhotoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CampaignOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HospitalCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cnpj?: SortOrder
    email?: SortOrder
    websiteUrl?: SortOrder
    password?: SortOrder
    idAddress?: SortOrder
  }

  export type HospitalAvgOrderByAggregateInput = {
    id?: SortOrder
    idAddress?: SortOrder
  }

  export type HospitalMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cnpj?: SortOrder
    email?: SortOrder
    websiteUrl?: SortOrder
    password?: SortOrder
    idAddress?: SortOrder
  }

  export type HospitalMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cnpj?: SortOrder
    email?: SortOrder
    websiteUrl?: SortOrder
    password?: SortOrder
    idAddress?: SortOrder
  }

  export type HospitalSumOrderByAggregateInput = {
    id?: SortOrder
    idAddress?: SortOrder
  }

  export type HospitalRelationFilter = {
    is?: HospitalWhereInput
    isNot?: HospitalWhereInput
  }

  export type CampaignCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    hour?: SortOrder
    description?: SortOrder
    image?: SortOrder
    idHospital?: SortOrder
  }

  export type CampaignAvgOrderByAggregateInput = {
    id?: SortOrder
    idHospital?: SortOrder
  }

  export type CampaignMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    hour?: SortOrder
    description?: SortOrder
    image?: SortOrder
    idHospital?: SortOrder
  }

  export type CampaignMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    hour?: SortOrder
    description?: SortOrder
    image?: SortOrder
    idHospital?: SortOrder
  }

  export type CampaignSumOrderByAggregateInput = {
    id?: SortOrder
    idHospital?: SortOrder
  }

  export type DonationBankCountOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    bloodMl?: SortOrder
    idHospital?: SortOrder
    idBloodType?: SortOrder
  }

  export type DonationBankAvgOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    bloodMl?: SortOrder
    idHospital?: SortOrder
    idBloodType?: SortOrder
  }

  export type DonationBankMaxOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    bloodMl?: SortOrder
    idHospital?: SortOrder
    idBloodType?: SortOrder
  }

  export type DonationBankMinOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    bloodMl?: SortOrder
    idHospital?: SortOrder
    idBloodType?: SortOrder
  }

  export type DonationBankSumOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    bloodMl?: SortOrder
    idHospital?: SortOrder
    idBloodType?: SortOrder
  }

  export type SiteCountOrderByAggregateInput = {
    id?: SortOrder
    site?: SortOrder
  }

  export type SiteAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SiteMaxOrderByAggregateInput = {
    id?: SortOrder
    site?: SortOrder
  }

  export type SiteMinOrderByAggregateInput = {
    id?: SortOrder
    site?: SortOrder
  }

  export type SiteSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SiteRelationFilter = {
    is?: SiteWhereInput
    isNot?: SiteWhereInput
  }

  export type BookScheduleListRelationFilter = {
    every?: BookScheduleWhereInput
    some?: BookScheduleWhereInput
    none?: BookScheduleWhereInput
  }

  export type BookScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HospitalSiteCountOrderByAggregateInput = {
    id?: SortOrder
    idHospital?: SortOrder
    idSite?: SortOrder
  }

  export type HospitalSiteAvgOrderByAggregateInput = {
    id?: SortOrder
    idHospital?: SortOrder
    idSite?: SortOrder
  }

  export type HospitalSiteMaxOrderByAggregateInput = {
    id?: SortOrder
    idHospital?: SortOrder
    idSite?: SortOrder
  }

  export type HospitalSiteMinOrderByAggregateInput = {
    id?: SortOrder
    idHospital?: SortOrder
    idSite?: SortOrder
  }

  export type HospitalSiteSumOrderByAggregateInput = {
    id?: SortOrder
    idHospital?: SortOrder
    idSite?: SortOrder
  }

  export type PhoneCountOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    idHospital?: SortOrder
  }

  export type PhoneAvgOrderByAggregateInput = {
    id?: SortOrder
    idHospital?: SortOrder
  }

  export type PhoneMaxOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    idHospital?: SortOrder
  }

  export type PhoneMinOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    idHospital?: SortOrder
  }

  export type PhoneSumOrderByAggregateInput = {
    id?: SortOrder
    idHospital?: SortOrder
  }

  export type PhotoCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    idHospital?: SortOrder
  }

  export type PhotoAvgOrderByAggregateInput = {
    id?: SortOrder
    idHospital?: SortOrder
  }

  export type PhotoMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    idHospital?: SortOrder
  }

  export type PhotoMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    idHospital?: SortOrder
  }

  export type PhotoSumOrderByAggregateInput = {
    id?: SortOrder
    idHospital?: SortOrder
  }

  export type StarCountOrderByAggregateInput = {
    id?: SortOrder
    starNumber?: SortOrder
  }

  export type StarAvgOrderByAggregateInput = {
    id?: SortOrder
    starNumber?: SortOrder
  }

  export type StarMaxOrderByAggregateInput = {
    id?: SortOrder
    starNumber?: SortOrder
  }

  export type StarMinOrderByAggregateInput = {
    id?: SortOrder
    starNumber?: SortOrder
  }

  export type StarSumOrderByAggregateInput = {
    id?: SortOrder
    starNumber?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type StarRelationFilter = {
    is?: StarWhereInput
    isNot?: StarWhereInput
  }

  export type ReviewCountOrderByAggregateInput = {
    id?: SortOrder
    opinion?: SortOrder
    date?: SortOrder
    idUser?: SortOrder
    idHospital?: SortOrder
    idStar?: SortOrder
  }

  export type ReviewAvgOrderByAggregateInput = {
    id?: SortOrder
    idUser?: SortOrder
    idHospital?: SortOrder
    idStar?: SortOrder
  }

  export type ReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    opinion?: SortOrder
    date?: SortOrder
    idUser?: SortOrder
    idHospital?: SortOrder
    idStar?: SortOrder
  }

  export type ReviewMinOrderByAggregateInput = {
    id?: SortOrder
    opinion?: SortOrder
    date?: SortOrder
    idUser?: SortOrder
    idHospital?: SortOrder
    idStar?: SortOrder
  }

  export type ReviewSumOrderByAggregateInput = {
    id?: SortOrder
    idUser?: SortOrder
    idHospital?: SortOrder
    idStar?: SortOrder
  }

  export type EnumSTATUSFilter<$PrismaModel = never> = {
    equals?: $Enums.STATUS | EnumSTATUSFieldRefInput<$PrismaModel>
    in?: $Enums.STATUS[]
    notIn?: $Enums.STATUS[]
    not?: NestedEnumSTATUSFilter<$PrismaModel> | $Enums.STATUS
  }

  export type ScheduleStatusListRelationFilter = {
    every?: ScheduleStatusWhereInput
    some?: ScheduleStatusWhereInput
    none?: ScheduleStatusWhereInput
  }

  export type ScheduleStatusOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StatusCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
  }

  export type StatusAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StatusMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
  }

  export type StatusMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
  }

  export type StatusSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumSTATUSWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.STATUS | EnumSTATUSFieldRefInput<$PrismaModel>
    in?: $Enums.STATUS[]
    notIn?: $Enums.STATUS[]
    not?: NestedEnumSTATUSWithAggregatesFilter<$PrismaModel> | $Enums.STATUS
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSTATUSFilter<$PrismaModel>
    _max?: NestedEnumSTATUSFilter<$PrismaModel>
  }

  export type HospitalSiteRelationFilter = {
    is?: HospitalSiteWhereInput
    isNot?: HospitalSiteWhereInput
  }

  export type BookScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    hour?: SortOrder
    idHospitalSite?: SortOrder
  }

  export type BookScheduleAvgOrderByAggregateInput = {
    id?: SortOrder
    idHospitalSite?: SortOrder
  }

  export type BookScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    hour?: SortOrder
    idHospitalSite?: SortOrder
  }

  export type BookScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    hour?: SortOrder
    idHospitalSite?: SortOrder
  }

  export type BookScheduleSumOrderByAggregateInput = {
    id?: SortOrder
    idHospitalSite?: SortOrder
  }

  export type BookScheduleRelationFilter = {
    is?: BookScheduleWhereInput
    isNot?: BookScheduleWhereInput
  }

  export type ScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    idUser?: SortOrder
    idBookSchedule?: SortOrder
  }

  export type ScheduleAvgOrderByAggregateInput = {
    id?: SortOrder
    idUser?: SortOrder
    idBookSchedule?: SortOrder
  }

  export type ScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    idUser?: SortOrder
    idBookSchedule?: SortOrder
  }

  export type ScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    idUser?: SortOrder
    idBookSchedule?: SortOrder
  }

  export type ScheduleSumOrderByAggregateInput = {
    id?: SortOrder
    idUser?: SortOrder
    idBookSchedule?: SortOrder
  }

  export type ScheduleRelationFilter = {
    is?: ScheduleWhereInput
    isNot?: ScheduleWhereInput
  }

  export type StatusRelationFilter = {
    is?: StatusWhereInput
    isNot?: StatusWhereInput
  }

  export type ScheduleStatusCountOrderByAggregateInput = {
    id?: SortOrder
    observation?: SortOrder
    idSchedule?: SortOrder
    idStatus?: SortOrder
  }

  export type ScheduleStatusAvgOrderByAggregateInput = {
    id?: SortOrder
    idSchedule?: SortOrder
    idStatus?: SortOrder
  }

  export type ScheduleStatusMaxOrderByAggregateInput = {
    id?: SortOrder
    observation?: SortOrder
    idSchedule?: SortOrder
    idStatus?: SortOrder
  }

  export type ScheduleStatusMinOrderByAggregateInput = {
    id?: SortOrder
    observation?: SortOrder
    idSchedule?: SortOrder
    idStatus?: SortOrder
  }

  export type ScheduleStatusSumOrderByAggregateInput = {
    id?: SortOrder
    idSchedule?: SortOrder
    idStatus?: SortOrder
  }

  export type UserCreateNestedManyWithoutBloodTypeInput = {
    create?: XOR<UserCreateWithoutBloodTypeInput, UserUncheckedCreateWithoutBloodTypeInput> | UserCreateWithoutBloodTypeInput[] | UserUncheckedCreateWithoutBloodTypeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutBloodTypeInput | UserCreateOrConnectWithoutBloodTypeInput[]
    createMany?: UserCreateManyBloodTypeInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type DonationBankCreateNestedManyWithoutBloodTypeInput = {
    create?: XOR<DonationBankCreateWithoutBloodTypeInput, DonationBankUncheckedCreateWithoutBloodTypeInput> | DonationBankCreateWithoutBloodTypeInput[] | DonationBankUncheckedCreateWithoutBloodTypeInput[]
    connectOrCreate?: DonationBankCreateOrConnectWithoutBloodTypeInput | DonationBankCreateOrConnectWithoutBloodTypeInput[]
    createMany?: DonationBankCreateManyBloodTypeInputEnvelope
    connect?: DonationBankWhereUniqueInput | DonationBankWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutBloodTypeInput = {
    create?: XOR<UserCreateWithoutBloodTypeInput, UserUncheckedCreateWithoutBloodTypeInput> | UserCreateWithoutBloodTypeInput[] | UserUncheckedCreateWithoutBloodTypeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutBloodTypeInput | UserCreateOrConnectWithoutBloodTypeInput[]
    createMany?: UserCreateManyBloodTypeInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type DonationBankUncheckedCreateNestedManyWithoutBloodTypeInput = {
    create?: XOR<DonationBankCreateWithoutBloodTypeInput, DonationBankUncheckedCreateWithoutBloodTypeInput> | DonationBankCreateWithoutBloodTypeInput[] | DonationBankUncheckedCreateWithoutBloodTypeInput[]
    connectOrCreate?: DonationBankCreateOrConnectWithoutBloodTypeInput | DonationBankCreateOrConnectWithoutBloodTypeInput[]
    createMany?: DonationBankCreateManyBloodTypeInputEnvelope
    connect?: DonationBankWhereUniqueInput | DonationBankWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserUpdateManyWithoutBloodTypeNestedInput = {
    create?: XOR<UserCreateWithoutBloodTypeInput, UserUncheckedCreateWithoutBloodTypeInput> | UserCreateWithoutBloodTypeInput[] | UserUncheckedCreateWithoutBloodTypeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutBloodTypeInput | UserCreateOrConnectWithoutBloodTypeInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutBloodTypeInput | UserUpsertWithWhereUniqueWithoutBloodTypeInput[]
    createMany?: UserCreateManyBloodTypeInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutBloodTypeInput | UserUpdateWithWhereUniqueWithoutBloodTypeInput[]
    updateMany?: UserUpdateManyWithWhereWithoutBloodTypeInput | UserUpdateManyWithWhereWithoutBloodTypeInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type DonationBankUpdateManyWithoutBloodTypeNestedInput = {
    create?: XOR<DonationBankCreateWithoutBloodTypeInput, DonationBankUncheckedCreateWithoutBloodTypeInput> | DonationBankCreateWithoutBloodTypeInput[] | DonationBankUncheckedCreateWithoutBloodTypeInput[]
    connectOrCreate?: DonationBankCreateOrConnectWithoutBloodTypeInput | DonationBankCreateOrConnectWithoutBloodTypeInput[]
    upsert?: DonationBankUpsertWithWhereUniqueWithoutBloodTypeInput | DonationBankUpsertWithWhereUniqueWithoutBloodTypeInput[]
    createMany?: DonationBankCreateManyBloodTypeInputEnvelope
    set?: DonationBankWhereUniqueInput | DonationBankWhereUniqueInput[]
    disconnect?: DonationBankWhereUniqueInput | DonationBankWhereUniqueInput[]
    delete?: DonationBankWhereUniqueInput | DonationBankWhereUniqueInput[]
    connect?: DonationBankWhereUniqueInput | DonationBankWhereUniqueInput[]
    update?: DonationBankUpdateWithWhereUniqueWithoutBloodTypeInput | DonationBankUpdateWithWhereUniqueWithoutBloodTypeInput[]
    updateMany?: DonationBankUpdateManyWithWhereWithoutBloodTypeInput | DonationBankUpdateManyWithWhereWithoutBloodTypeInput[]
    deleteMany?: DonationBankScalarWhereInput | DonationBankScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUncheckedUpdateManyWithoutBloodTypeNestedInput = {
    create?: XOR<UserCreateWithoutBloodTypeInput, UserUncheckedCreateWithoutBloodTypeInput> | UserCreateWithoutBloodTypeInput[] | UserUncheckedCreateWithoutBloodTypeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutBloodTypeInput | UserCreateOrConnectWithoutBloodTypeInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutBloodTypeInput | UserUpsertWithWhereUniqueWithoutBloodTypeInput[]
    createMany?: UserCreateManyBloodTypeInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutBloodTypeInput | UserUpdateWithWhereUniqueWithoutBloodTypeInput[]
    updateMany?: UserUpdateManyWithWhereWithoutBloodTypeInput | UserUpdateManyWithWhereWithoutBloodTypeInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type DonationBankUncheckedUpdateManyWithoutBloodTypeNestedInput = {
    create?: XOR<DonationBankCreateWithoutBloodTypeInput, DonationBankUncheckedCreateWithoutBloodTypeInput> | DonationBankCreateWithoutBloodTypeInput[] | DonationBankUncheckedCreateWithoutBloodTypeInput[]
    connectOrCreate?: DonationBankCreateOrConnectWithoutBloodTypeInput | DonationBankCreateOrConnectWithoutBloodTypeInput[]
    upsert?: DonationBankUpsertWithWhereUniqueWithoutBloodTypeInput | DonationBankUpsertWithWhereUniqueWithoutBloodTypeInput[]
    createMany?: DonationBankCreateManyBloodTypeInputEnvelope
    set?: DonationBankWhereUniqueInput | DonationBankWhereUniqueInput[]
    disconnect?: DonationBankWhereUniqueInput | DonationBankWhereUniqueInput[]
    delete?: DonationBankWhereUniqueInput | DonationBankWhereUniqueInput[]
    connect?: DonationBankWhereUniqueInput | DonationBankWhereUniqueInput[]
    update?: DonationBankUpdateWithWhereUniqueWithoutBloodTypeInput | DonationBankUpdateWithWhereUniqueWithoutBloodTypeInput[]
    updateMany?: DonationBankUpdateManyWithWhereWithoutBloodTypeInput | DonationBankUpdateManyWithWhereWithoutBloodTypeInput[]
    deleteMany?: DonationBankScalarWhereInput | DonationBankScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutSexInput = {
    create?: XOR<UserCreateWithoutSexInput, UserUncheckedCreateWithoutSexInput> | UserCreateWithoutSexInput[] | UserUncheckedCreateWithoutSexInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSexInput | UserCreateOrConnectWithoutSexInput[]
    createMany?: UserCreateManySexInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutSexInput = {
    create?: XOR<UserCreateWithoutSexInput, UserUncheckedCreateWithoutSexInput> | UserCreateWithoutSexInput[] | UserUncheckedCreateWithoutSexInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSexInput | UserCreateOrConnectWithoutSexInput[]
    createMany?: UserCreateManySexInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutSexNestedInput = {
    create?: XOR<UserCreateWithoutSexInput, UserUncheckedCreateWithoutSexInput> | UserCreateWithoutSexInput[] | UserUncheckedCreateWithoutSexInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSexInput | UserCreateOrConnectWithoutSexInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutSexInput | UserUpsertWithWhereUniqueWithoutSexInput[]
    createMany?: UserCreateManySexInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutSexInput | UserUpdateWithWhereUniqueWithoutSexInput[]
    updateMany?: UserUpdateManyWithWhereWithoutSexInput | UserUpdateManyWithWhereWithoutSexInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutSexNestedInput = {
    create?: XOR<UserCreateWithoutSexInput, UserUncheckedCreateWithoutSexInput> | UserCreateWithoutSexInput[] | UserUncheckedCreateWithoutSexInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSexInput | UserCreateOrConnectWithoutSexInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutSexInput | UserUpsertWithWhereUniqueWithoutSexInput[]
    createMany?: UserCreateManySexInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutSexInput | UserUpdateWithWhereUniqueWithoutSexInput[]
    updateMany?: UserUpdateManyWithWhereWithoutSexInput | UserUpdateManyWithWhereWithoutSexInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type HospitalCreateNestedManyWithoutAddressInput = {
    create?: XOR<HospitalCreateWithoutAddressInput, HospitalUncheckedCreateWithoutAddressInput> | HospitalCreateWithoutAddressInput[] | HospitalUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: HospitalCreateOrConnectWithoutAddressInput | HospitalCreateOrConnectWithoutAddressInput[]
    createMany?: HospitalCreateManyAddressInputEnvelope
    connect?: HospitalWhereUniqueInput | HospitalWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutAddressInput = {
    create?: XOR<UserCreateWithoutAddressInput, UserUncheckedCreateWithoutAddressInput> | UserCreateWithoutAddressInput[] | UserUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAddressInput | UserCreateOrConnectWithoutAddressInput[]
    createMany?: UserCreateManyAddressInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type HospitalUncheckedCreateNestedManyWithoutAddressInput = {
    create?: XOR<HospitalCreateWithoutAddressInput, HospitalUncheckedCreateWithoutAddressInput> | HospitalCreateWithoutAddressInput[] | HospitalUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: HospitalCreateOrConnectWithoutAddressInput | HospitalCreateOrConnectWithoutAddressInput[]
    createMany?: HospitalCreateManyAddressInputEnvelope
    connect?: HospitalWhereUniqueInput | HospitalWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutAddressInput = {
    create?: XOR<UserCreateWithoutAddressInput, UserUncheckedCreateWithoutAddressInput> | UserCreateWithoutAddressInput[] | UserUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAddressInput | UserCreateOrConnectWithoutAddressInput[]
    createMany?: UserCreateManyAddressInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type HospitalUpdateManyWithoutAddressNestedInput = {
    create?: XOR<HospitalCreateWithoutAddressInput, HospitalUncheckedCreateWithoutAddressInput> | HospitalCreateWithoutAddressInput[] | HospitalUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: HospitalCreateOrConnectWithoutAddressInput | HospitalCreateOrConnectWithoutAddressInput[]
    upsert?: HospitalUpsertWithWhereUniqueWithoutAddressInput | HospitalUpsertWithWhereUniqueWithoutAddressInput[]
    createMany?: HospitalCreateManyAddressInputEnvelope
    set?: HospitalWhereUniqueInput | HospitalWhereUniqueInput[]
    disconnect?: HospitalWhereUniqueInput | HospitalWhereUniqueInput[]
    delete?: HospitalWhereUniqueInput | HospitalWhereUniqueInput[]
    connect?: HospitalWhereUniqueInput | HospitalWhereUniqueInput[]
    update?: HospitalUpdateWithWhereUniqueWithoutAddressInput | HospitalUpdateWithWhereUniqueWithoutAddressInput[]
    updateMany?: HospitalUpdateManyWithWhereWithoutAddressInput | HospitalUpdateManyWithWhereWithoutAddressInput[]
    deleteMany?: HospitalScalarWhereInput | HospitalScalarWhereInput[]
  }

  export type UserUpdateManyWithoutAddressNestedInput = {
    create?: XOR<UserCreateWithoutAddressInput, UserUncheckedCreateWithoutAddressInput> | UserCreateWithoutAddressInput[] | UserUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAddressInput | UserCreateOrConnectWithoutAddressInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAddressInput | UserUpsertWithWhereUniqueWithoutAddressInput[]
    createMany?: UserCreateManyAddressInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAddressInput | UserUpdateWithWhereUniqueWithoutAddressInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAddressInput | UserUpdateManyWithWhereWithoutAddressInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type HospitalUncheckedUpdateManyWithoutAddressNestedInput = {
    create?: XOR<HospitalCreateWithoutAddressInput, HospitalUncheckedCreateWithoutAddressInput> | HospitalCreateWithoutAddressInput[] | HospitalUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: HospitalCreateOrConnectWithoutAddressInput | HospitalCreateOrConnectWithoutAddressInput[]
    upsert?: HospitalUpsertWithWhereUniqueWithoutAddressInput | HospitalUpsertWithWhereUniqueWithoutAddressInput[]
    createMany?: HospitalCreateManyAddressInputEnvelope
    set?: HospitalWhereUniqueInput | HospitalWhereUniqueInput[]
    disconnect?: HospitalWhereUniqueInput | HospitalWhereUniqueInput[]
    delete?: HospitalWhereUniqueInput | HospitalWhereUniqueInput[]
    connect?: HospitalWhereUniqueInput | HospitalWhereUniqueInput[]
    update?: HospitalUpdateWithWhereUniqueWithoutAddressInput | HospitalUpdateWithWhereUniqueWithoutAddressInput[]
    updateMany?: HospitalUpdateManyWithWhereWithoutAddressInput | HospitalUpdateManyWithWhereWithoutAddressInput[]
    deleteMany?: HospitalScalarWhereInput | HospitalScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutAddressNestedInput = {
    create?: XOR<UserCreateWithoutAddressInput, UserUncheckedCreateWithoutAddressInput> | UserCreateWithoutAddressInput[] | UserUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAddressInput | UserCreateOrConnectWithoutAddressInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAddressInput | UserUpsertWithWhereUniqueWithoutAddressInput[]
    createMany?: UserCreateManyAddressInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAddressInput | UserUpdateWithWhereUniqueWithoutAddressInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAddressInput | UserUpdateManyWithWhereWithoutAddressInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type AddressCreateNestedOneWithoutUserInput = {
    create?: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput>
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput
    connect?: AddressWhereUniqueInput
  }

  export type SexCreateNestedOneWithoutUserInput = {
    create?: XOR<SexCreateWithoutUserInput, SexUncheckedCreateWithoutUserInput>
    connectOrCreate?: SexCreateOrConnectWithoutUserInput
    connect?: SexWhereUniqueInput
  }

  export type BloodTypeCreateNestedOneWithoutUserInput = {
    create?: XOR<BloodTypeCreateWithoutUserInput, BloodTypeUncheckedCreateWithoutUserInput>
    connectOrCreate?: BloodTypeCreateOrConnectWithoutUserInput
    connect?: BloodTypeWhereUniqueInput
  }

  export type ReviewCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ScheduleCreateNestedManyWithoutUserInput = {
    create?: XOR<ScheduleCreateWithoutUserInput, ScheduleUncheckedCreateWithoutUserInput> | ScheduleCreateWithoutUserInput[] | ScheduleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutUserInput | ScheduleCreateOrConnectWithoutUserInput[]
    createMany?: ScheduleCreateManyUserInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ScheduleUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ScheduleCreateWithoutUserInput, ScheduleUncheckedCreateWithoutUserInput> | ScheduleCreateWithoutUserInput[] | ScheduleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutUserInput | ScheduleCreateOrConnectWithoutUserInput[]
    createMany?: ScheduleCreateManyUserInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type AddressUpdateOneRequiredWithoutUserNestedInput = {
    create?: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput>
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput
    upsert?: AddressUpsertWithoutUserInput
    connect?: AddressWhereUniqueInput
    update?: XOR<XOR<AddressUpdateToOneWithWhereWithoutUserInput, AddressUpdateWithoutUserInput>, AddressUncheckedUpdateWithoutUserInput>
  }

  export type SexUpdateOneRequiredWithoutUserNestedInput = {
    create?: XOR<SexCreateWithoutUserInput, SexUncheckedCreateWithoutUserInput>
    connectOrCreate?: SexCreateOrConnectWithoutUserInput
    upsert?: SexUpsertWithoutUserInput
    connect?: SexWhereUniqueInput
    update?: XOR<XOR<SexUpdateToOneWithWhereWithoutUserInput, SexUpdateWithoutUserInput>, SexUncheckedUpdateWithoutUserInput>
  }

  export type BloodTypeUpdateOneRequiredWithoutUserNestedInput = {
    create?: XOR<BloodTypeCreateWithoutUserInput, BloodTypeUncheckedCreateWithoutUserInput>
    connectOrCreate?: BloodTypeCreateOrConnectWithoutUserInput
    upsert?: BloodTypeUpsertWithoutUserInput
    connect?: BloodTypeWhereUniqueInput
    update?: XOR<XOR<BloodTypeUpdateToOneWithWhereWithoutUserInput, BloodTypeUpdateWithoutUserInput>, BloodTypeUncheckedUpdateWithoutUserInput>
  }

  export type ReviewUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ScheduleUpdateManyWithoutUserNestedInput = {
    create?: XOR<ScheduleCreateWithoutUserInput, ScheduleUncheckedCreateWithoutUserInput> | ScheduleCreateWithoutUserInput[] | ScheduleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutUserInput | ScheduleCreateOrConnectWithoutUserInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutUserInput | ScheduleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ScheduleCreateManyUserInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutUserInput | ScheduleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutUserInput | ScheduleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ScheduleUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ScheduleCreateWithoutUserInput, ScheduleUncheckedCreateWithoutUserInput> | ScheduleCreateWithoutUserInput[] | ScheduleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutUserInput | ScheduleCreateOrConnectWithoutUserInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutUserInput | ScheduleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ScheduleCreateManyUserInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutUserInput | ScheduleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutUserInput | ScheduleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type AddressCreateNestedOneWithoutHospitalInput = {
    create?: XOR<AddressCreateWithoutHospitalInput, AddressUncheckedCreateWithoutHospitalInput>
    connectOrCreate?: AddressCreateOrConnectWithoutHospitalInput
    connect?: AddressWhereUniqueInput
  }

  export type HospitalSiteCreateNestedManyWithoutHospitalInput = {
    create?: XOR<HospitalSiteCreateWithoutHospitalInput, HospitalSiteUncheckedCreateWithoutHospitalInput> | HospitalSiteCreateWithoutHospitalInput[] | HospitalSiteUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: HospitalSiteCreateOrConnectWithoutHospitalInput | HospitalSiteCreateOrConnectWithoutHospitalInput[]
    createMany?: HospitalSiteCreateManyHospitalInputEnvelope
    connect?: HospitalSiteWhereUniqueInput | HospitalSiteWhereUniqueInput[]
  }

  export type PhoneCreateNestedManyWithoutHospitalInput = {
    create?: XOR<PhoneCreateWithoutHospitalInput, PhoneUncheckedCreateWithoutHospitalInput> | PhoneCreateWithoutHospitalInput[] | PhoneUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: PhoneCreateOrConnectWithoutHospitalInput | PhoneCreateOrConnectWithoutHospitalInput[]
    createMany?: PhoneCreateManyHospitalInputEnvelope
    connect?: PhoneWhereUniqueInput | PhoneWhereUniqueInput[]
  }

  export type PhotoCreateNestedManyWithoutHospitalInput = {
    create?: XOR<PhotoCreateWithoutHospitalInput, PhotoUncheckedCreateWithoutHospitalInput> | PhotoCreateWithoutHospitalInput[] | PhotoUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: PhotoCreateOrConnectWithoutHospitalInput | PhotoCreateOrConnectWithoutHospitalInput[]
    createMany?: PhotoCreateManyHospitalInputEnvelope
    connect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutHospitalInput = {
    create?: XOR<ReviewCreateWithoutHospitalInput, ReviewUncheckedCreateWithoutHospitalInput> | ReviewCreateWithoutHospitalInput[] | ReviewUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutHospitalInput | ReviewCreateOrConnectWithoutHospitalInput[]
    createMany?: ReviewCreateManyHospitalInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type CampaignCreateNestedManyWithoutHospitalInput = {
    create?: XOR<CampaignCreateWithoutHospitalInput, CampaignUncheckedCreateWithoutHospitalInput> | CampaignCreateWithoutHospitalInput[] | CampaignUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutHospitalInput | CampaignCreateOrConnectWithoutHospitalInput[]
    createMany?: CampaignCreateManyHospitalInputEnvelope
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
  }

  export type DonationBankCreateNestedManyWithoutHospitalInput = {
    create?: XOR<DonationBankCreateWithoutHospitalInput, DonationBankUncheckedCreateWithoutHospitalInput> | DonationBankCreateWithoutHospitalInput[] | DonationBankUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: DonationBankCreateOrConnectWithoutHospitalInput | DonationBankCreateOrConnectWithoutHospitalInput[]
    createMany?: DonationBankCreateManyHospitalInputEnvelope
    connect?: DonationBankWhereUniqueInput | DonationBankWhereUniqueInput[]
  }

  export type HospitalSiteUncheckedCreateNestedManyWithoutHospitalInput = {
    create?: XOR<HospitalSiteCreateWithoutHospitalInput, HospitalSiteUncheckedCreateWithoutHospitalInput> | HospitalSiteCreateWithoutHospitalInput[] | HospitalSiteUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: HospitalSiteCreateOrConnectWithoutHospitalInput | HospitalSiteCreateOrConnectWithoutHospitalInput[]
    createMany?: HospitalSiteCreateManyHospitalInputEnvelope
    connect?: HospitalSiteWhereUniqueInput | HospitalSiteWhereUniqueInput[]
  }

  export type PhoneUncheckedCreateNestedManyWithoutHospitalInput = {
    create?: XOR<PhoneCreateWithoutHospitalInput, PhoneUncheckedCreateWithoutHospitalInput> | PhoneCreateWithoutHospitalInput[] | PhoneUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: PhoneCreateOrConnectWithoutHospitalInput | PhoneCreateOrConnectWithoutHospitalInput[]
    createMany?: PhoneCreateManyHospitalInputEnvelope
    connect?: PhoneWhereUniqueInput | PhoneWhereUniqueInput[]
  }

  export type PhotoUncheckedCreateNestedManyWithoutHospitalInput = {
    create?: XOR<PhotoCreateWithoutHospitalInput, PhotoUncheckedCreateWithoutHospitalInput> | PhotoCreateWithoutHospitalInput[] | PhotoUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: PhotoCreateOrConnectWithoutHospitalInput | PhotoCreateOrConnectWithoutHospitalInput[]
    createMany?: PhotoCreateManyHospitalInputEnvelope
    connect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutHospitalInput = {
    create?: XOR<ReviewCreateWithoutHospitalInput, ReviewUncheckedCreateWithoutHospitalInput> | ReviewCreateWithoutHospitalInput[] | ReviewUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutHospitalInput | ReviewCreateOrConnectWithoutHospitalInput[]
    createMany?: ReviewCreateManyHospitalInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type CampaignUncheckedCreateNestedManyWithoutHospitalInput = {
    create?: XOR<CampaignCreateWithoutHospitalInput, CampaignUncheckedCreateWithoutHospitalInput> | CampaignCreateWithoutHospitalInput[] | CampaignUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutHospitalInput | CampaignCreateOrConnectWithoutHospitalInput[]
    createMany?: CampaignCreateManyHospitalInputEnvelope
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
  }

  export type DonationBankUncheckedCreateNestedManyWithoutHospitalInput = {
    create?: XOR<DonationBankCreateWithoutHospitalInput, DonationBankUncheckedCreateWithoutHospitalInput> | DonationBankCreateWithoutHospitalInput[] | DonationBankUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: DonationBankCreateOrConnectWithoutHospitalInput | DonationBankCreateOrConnectWithoutHospitalInput[]
    createMany?: DonationBankCreateManyHospitalInputEnvelope
    connect?: DonationBankWhereUniqueInput | DonationBankWhereUniqueInput[]
  }

  export type AddressUpdateOneRequiredWithoutHospitalNestedInput = {
    create?: XOR<AddressCreateWithoutHospitalInput, AddressUncheckedCreateWithoutHospitalInput>
    connectOrCreate?: AddressCreateOrConnectWithoutHospitalInput
    upsert?: AddressUpsertWithoutHospitalInput
    connect?: AddressWhereUniqueInput
    update?: XOR<XOR<AddressUpdateToOneWithWhereWithoutHospitalInput, AddressUpdateWithoutHospitalInput>, AddressUncheckedUpdateWithoutHospitalInput>
  }

  export type HospitalSiteUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<HospitalSiteCreateWithoutHospitalInput, HospitalSiteUncheckedCreateWithoutHospitalInput> | HospitalSiteCreateWithoutHospitalInput[] | HospitalSiteUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: HospitalSiteCreateOrConnectWithoutHospitalInput | HospitalSiteCreateOrConnectWithoutHospitalInput[]
    upsert?: HospitalSiteUpsertWithWhereUniqueWithoutHospitalInput | HospitalSiteUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: HospitalSiteCreateManyHospitalInputEnvelope
    set?: HospitalSiteWhereUniqueInput | HospitalSiteWhereUniqueInput[]
    disconnect?: HospitalSiteWhereUniqueInput | HospitalSiteWhereUniqueInput[]
    delete?: HospitalSiteWhereUniqueInput | HospitalSiteWhereUniqueInput[]
    connect?: HospitalSiteWhereUniqueInput | HospitalSiteWhereUniqueInput[]
    update?: HospitalSiteUpdateWithWhereUniqueWithoutHospitalInput | HospitalSiteUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: HospitalSiteUpdateManyWithWhereWithoutHospitalInput | HospitalSiteUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: HospitalSiteScalarWhereInput | HospitalSiteScalarWhereInput[]
  }

  export type PhoneUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<PhoneCreateWithoutHospitalInput, PhoneUncheckedCreateWithoutHospitalInput> | PhoneCreateWithoutHospitalInput[] | PhoneUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: PhoneCreateOrConnectWithoutHospitalInput | PhoneCreateOrConnectWithoutHospitalInput[]
    upsert?: PhoneUpsertWithWhereUniqueWithoutHospitalInput | PhoneUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: PhoneCreateManyHospitalInputEnvelope
    set?: PhoneWhereUniqueInput | PhoneWhereUniqueInput[]
    disconnect?: PhoneWhereUniqueInput | PhoneWhereUniqueInput[]
    delete?: PhoneWhereUniqueInput | PhoneWhereUniqueInput[]
    connect?: PhoneWhereUniqueInput | PhoneWhereUniqueInput[]
    update?: PhoneUpdateWithWhereUniqueWithoutHospitalInput | PhoneUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: PhoneUpdateManyWithWhereWithoutHospitalInput | PhoneUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: PhoneScalarWhereInput | PhoneScalarWhereInput[]
  }

  export type PhotoUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<PhotoCreateWithoutHospitalInput, PhotoUncheckedCreateWithoutHospitalInput> | PhotoCreateWithoutHospitalInput[] | PhotoUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: PhotoCreateOrConnectWithoutHospitalInput | PhotoCreateOrConnectWithoutHospitalInput[]
    upsert?: PhotoUpsertWithWhereUniqueWithoutHospitalInput | PhotoUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: PhotoCreateManyHospitalInputEnvelope
    set?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    disconnect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    delete?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    connect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    update?: PhotoUpdateWithWhereUniqueWithoutHospitalInput | PhotoUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: PhotoUpdateManyWithWhereWithoutHospitalInput | PhotoUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: PhotoScalarWhereInput | PhotoScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<ReviewCreateWithoutHospitalInput, ReviewUncheckedCreateWithoutHospitalInput> | ReviewCreateWithoutHospitalInput[] | ReviewUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutHospitalInput | ReviewCreateOrConnectWithoutHospitalInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutHospitalInput | ReviewUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: ReviewCreateManyHospitalInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutHospitalInput | ReviewUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutHospitalInput | ReviewUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type CampaignUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<CampaignCreateWithoutHospitalInput, CampaignUncheckedCreateWithoutHospitalInput> | CampaignCreateWithoutHospitalInput[] | CampaignUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutHospitalInput | CampaignCreateOrConnectWithoutHospitalInput[]
    upsert?: CampaignUpsertWithWhereUniqueWithoutHospitalInput | CampaignUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: CampaignCreateManyHospitalInputEnvelope
    set?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    disconnect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    delete?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    update?: CampaignUpdateWithWhereUniqueWithoutHospitalInput | CampaignUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: CampaignUpdateManyWithWhereWithoutHospitalInput | CampaignUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
  }

  export type DonationBankUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<DonationBankCreateWithoutHospitalInput, DonationBankUncheckedCreateWithoutHospitalInput> | DonationBankCreateWithoutHospitalInput[] | DonationBankUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: DonationBankCreateOrConnectWithoutHospitalInput | DonationBankCreateOrConnectWithoutHospitalInput[]
    upsert?: DonationBankUpsertWithWhereUniqueWithoutHospitalInput | DonationBankUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: DonationBankCreateManyHospitalInputEnvelope
    set?: DonationBankWhereUniqueInput | DonationBankWhereUniqueInput[]
    disconnect?: DonationBankWhereUniqueInput | DonationBankWhereUniqueInput[]
    delete?: DonationBankWhereUniqueInput | DonationBankWhereUniqueInput[]
    connect?: DonationBankWhereUniqueInput | DonationBankWhereUniqueInput[]
    update?: DonationBankUpdateWithWhereUniqueWithoutHospitalInput | DonationBankUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: DonationBankUpdateManyWithWhereWithoutHospitalInput | DonationBankUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: DonationBankScalarWhereInput | DonationBankScalarWhereInput[]
  }

  export type HospitalSiteUncheckedUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<HospitalSiteCreateWithoutHospitalInput, HospitalSiteUncheckedCreateWithoutHospitalInput> | HospitalSiteCreateWithoutHospitalInput[] | HospitalSiteUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: HospitalSiteCreateOrConnectWithoutHospitalInput | HospitalSiteCreateOrConnectWithoutHospitalInput[]
    upsert?: HospitalSiteUpsertWithWhereUniqueWithoutHospitalInput | HospitalSiteUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: HospitalSiteCreateManyHospitalInputEnvelope
    set?: HospitalSiteWhereUniqueInput | HospitalSiteWhereUniqueInput[]
    disconnect?: HospitalSiteWhereUniqueInput | HospitalSiteWhereUniqueInput[]
    delete?: HospitalSiteWhereUniqueInput | HospitalSiteWhereUniqueInput[]
    connect?: HospitalSiteWhereUniqueInput | HospitalSiteWhereUniqueInput[]
    update?: HospitalSiteUpdateWithWhereUniqueWithoutHospitalInput | HospitalSiteUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: HospitalSiteUpdateManyWithWhereWithoutHospitalInput | HospitalSiteUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: HospitalSiteScalarWhereInput | HospitalSiteScalarWhereInput[]
  }

  export type PhoneUncheckedUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<PhoneCreateWithoutHospitalInput, PhoneUncheckedCreateWithoutHospitalInput> | PhoneCreateWithoutHospitalInput[] | PhoneUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: PhoneCreateOrConnectWithoutHospitalInput | PhoneCreateOrConnectWithoutHospitalInput[]
    upsert?: PhoneUpsertWithWhereUniqueWithoutHospitalInput | PhoneUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: PhoneCreateManyHospitalInputEnvelope
    set?: PhoneWhereUniqueInput | PhoneWhereUniqueInput[]
    disconnect?: PhoneWhereUniqueInput | PhoneWhereUniqueInput[]
    delete?: PhoneWhereUniqueInput | PhoneWhereUniqueInput[]
    connect?: PhoneWhereUniqueInput | PhoneWhereUniqueInput[]
    update?: PhoneUpdateWithWhereUniqueWithoutHospitalInput | PhoneUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: PhoneUpdateManyWithWhereWithoutHospitalInput | PhoneUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: PhoneScalarWhereInput | PhoneScalarWhereInput[]
  }

  export type PhotoUncheckedUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<PhotoCreateWithoutHospitalInput, PhotoUncheckedCreateWithoutHospitalInput> | PhotoCreateWithoutHospitalInput[] | PhotoUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: PhotoCreateOrConnectWithoutHospitalInput | PhotoCreateOrConnectWithoutHospitalInput[]
    upsert?: PhotoUpsertWithWhereUniqueWithoutHospitalInput | PhotoUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: PhotoCreateManyHospitalInputEnvelope
    set?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    disconnect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    delete?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    connect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    update?: PhotoUpdateWithWhereUniqueWithoutHospitalInput | PhotoUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: PhotoUpdateManyWithWhereWithoutHospitalInput | PhotoUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: PhotoScalarWhereInput | PhotoScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<ReviewCreateWithoutHospitalInput, ReviewUncheckedCreateWithoutHospitalInput> | ReviewCreateWithoutHospitalInput[] | ReviewUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutHospitalInput | ReviewCreateOrConnectWithoutHospitalInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutHospitalInput | ReviewUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: ReviewCreateManyHospitalInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutHospitalInput | ReviewUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutHospitalInput | ReviewUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type CampaignUncheckedUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<CampaignCreateWithoutHospitalInput, CampaignUncheckedCreateWithoutHospitalInput> | CampaignCreateWithoutHospitalInput[] | CampaignUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutHospitalInput | CampaignCreateOrConnectWithoutHospitalInput[]
    upsert?: CampaignUpsertWithWhereUniqueWithoutHospitalInput | CampaignUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: CampaignCreateManyHospitalInputEnvelope
    set?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    disconnect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    delete?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    update?: CampaignUpdateWithWhereUniqueWithoutHospitalInput | CampaignUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: CampaignUpdateManyWithWhereWithoutHospitalInput | CampaignUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
  }

  export type DonationBankUncheckedUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<DonationBankCreateWithoutHospitalInput, DonationBankUncheckedCreateWithoutHospitalInput> | DonationBankCreateWithoutHospitalInput[] | DonationBankUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: DonationBankCreateOrConnectWithoutHospitalInput | DonationBankCreateOrConnectWithoutHospitalInput[]
    upsert?: DonationBankUpsertWithWhereUniqueWithoutHospitalInput | DonationBankUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: DonationBankCreateManyHospitalInputEnvelope
    set?: DonationBankWhereUniqueInput | DonationBankWhereUniqueInput[]
    disconnect?: DonationBankWhereUniqueInput | DonationBankWhereUniqueInput[]
    delete?: DonationBankWhereUniqueInput | DonationBankWhereUniqueInput[]
    connect?: DonationBankWhereUniqueInput | DonationBankWhereUniqueInput[]
    update?: DonationBankUpdateWithWhereUniqueWithoutHospitalInput | DonationBankUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: DonationBankUpdateManyWithWhereWithoutHospitalInput | DonationBankUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: DonationBankScalarWhereInput | DonationBankScalarWhereInput[]
  }

  export type HospitalCreateNestedOneWithoutCampaignInput = {
    create?: XOR<HospitalCreateWithoutCampaignInput, HospitalUncheckedCreateWithoutCampaignInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutCampaignInput
    connect?: HospitalWhereUniqueInput
  }

  export type HospitalUpdateOneRequiredWithoutCampaignNestedInput = {
    create?: XOR<HospitalCreateWithoutCampaignInput, HospitalUncheckedCreateWithoutCampaignInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutCampaignInput
    upsert?: HospitalUpsertWithoutCampaignInput
    connect?: HospitalWhereUniqueInput
    update?: XOR<XOR<HospitalUpdateToOneWithWhereWithoutCampaignInput, HospitalUpdateWithoutCampaignInput>, HospitalUncheckedUpdateWithoutCampaignInput>
  }

  export type HospitalCreateNestedOneWithoutDonationBankInput = {
    create?: XOR<HospitalCreateWithoutDonationBankInput, HospitalUncheckedCreateWithoutDonationBankInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutDonationBankInput
    connect?: HospitalWhereUniqueInput
  }

  export type BloodTypeCreateNestedOneWithoutDonationBankInput = {
    create?: XOR<BloodTypeCreateWithoutDonationBankInput, BloodTypeUncheckedCreateWithoutDonationBankInput>
    connectOrCreate?: BloodTypeCreateOrConnectWithoutDonationBankInput
    connect?: BloodTypeWhereUniqueInput
  }

  export type HospitalUpdateOneRequiredWithoutDonationBankNestedInput = {
    create?: XOR<HospitalCreateWithoutDonationBankInput, HospitalUncheckedCreateWithoutDonationBankInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutDonationBankInput
    upsert?: HospitalUpsertWithoutDonationBankInput
    connect?: HospitalWhereUniqueInput
    update?: XOR<XOR<HospitalUpdateToOneWithWhereWithoutDonationBankInput, HospitalUpdateWithoutDonationBankInput>, HospitalUncheckedUpdateWithoutDonationBankInput>
  }

  export type BloodTypeUpdateOneRequiredWithoutDonationBankNestedInput = {
    create?: XOR<BloodTypeCreateWithoutDonationBankInput, BloodTypeUncheckedCreateWithoutDonationBankInput>
    connectOrCreate?: BloodTypeCreateOrConnectWithoutDonationBankInput
    upsert?: BloodTypeUpsertWithoutDonationBankInput
    connect?: BloodTypeWhereUniqueInput
    update?: XOR<XOR<BloodTypeUpdateToOneWithWhereWithoutDonationBankInput, BloodTypeUpdateWithoutDonationBankInput>, BloodTypeUncheckedUpdateWithoutDonationBankInput>
  }

  export type HospitalSiteCreateNestedManyWithoutSiteInput = {
    create?: XOR<HospitalSiteCreateWithoutSiteInput, HospitalSiteUncheckedCreateWithoutSiteInput> | HospitalSiteCreateWithoutSiteInput[] | HospitalSiteUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: HospitalSiteCreateOrConnectWithoutSiteInput | HospitalSiteCreateOrConnectWithoutSiteInput[]
    createMany?: HospitalSiteCreateManySiteInputEnvelope
    connect?: HospitalSiteWhereUniqueInput | HospitalSiteWhereUniqueInput[]
  }

  export type HospitalSiteUncheckedCreateNestedManyWithoutSiteInput = {
    create?: XOR<HospitalSiteCreateWithoutSiteInput, HospitalSiteUncheckedCreateWithoutSiteInput> | HospitalSiteCreateWithoutSiteInput[] | HospitalSiteUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: HospitalSiteCreateOrConnectWithoutSiteInput | HospitalSiteCreateOrConnectWithoutSiteInput[]
    createMany?: HospitalSiteCreateManySiteInputEnvelope
    connect?: HospitalSiteWhereUniqueInput | HospitalSiteWhereUniqueInput[]
  }

  export type HospitalSiteUpdateManyWithoutSiteNestedInput = {
    create?: XOR<HospitalSiteCreateWithoutSiteInput, HospitalSiteUncheckedCreateWithoutSiteInput> | HospitalSiteCreateWithoutSiteInput[] | HospitalSiteUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: HospitalSiteCreateOrConnectWithoutSiteInput | HospitalSiteCreateOrConnectWithoutSiteInput[]
    upsert?: HospitalSiteUpsertWithWhereUniqueWithoutSiteInput | HospitalSiteUpsertWithWhereUniqueWithoutSiteInput[]
    createMany?: HospitalSiteCreateManySiteInputEnvelope
    set?: HospitalSiteWhereUniqueInput | HospitalSiteWhereUniqueInput[]
    disconnect?: HospitalSiteWhereUniqueInput | HospitalSiteWhereUniqueInput[]
    delete?: HospitalSiteWhereUniqueInput | HospitalSiteWhereUniqueInput[]
    connect?: HospitalSiteWhereUniqueInput | HospitalSiteWhereUniqueInput[]
    update?: HospitalSiteUpdateWithWhereUniqueWithoutSiteInput | HospitalSiteUpdateWithWhereUniqueWithoutSiteInput[]
    updateMany?: HospitalSiteUpdateManyWithWhereWithoutSiteInput | HospitalSiteUpdateManyWithWhereWithoutSiteInput[]
    deleteMany?: HospitalSiteScalarWhereInput | HospitalSiteScalarWhereInput[]
  }

  export type HospitalSiteUncheckedUpdateManyWithoutSiteNestedInput = {
    create?: XOR<HospitalSiteCreateWithoutSiteInput, HospitalSiteUncheckedCreateWithoutSiteInput> | HospitalSiteCreateWithoutSiteInput[] | HospitalSiteUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: HospitalSiteCreateOrConnectWithoutSiteInput | HospitalSiteCreateOrConnectWithoutSiteInput[]
    upsert?: HospitalSiteUpsertWithWhereUniqueWithoutSiteInput | HospitalSiteUpsertWithWhereUniqueWithoutSiteInput[]
    createMany?: HospitalSiteCreateManySiteInputEnvelope
    set?: HospitalSiteWhereUniqueInput | HospitalSiteWhereUniqueInput[]
    disconnect?: HospitalSiteWhereUniqueInput | HospitalSiteWhereUniqueInput[]
    delete?: HospitalSiteWhereUniqueInput | HospitalSiteWhereUniqueInput[]
    connect?: HospitalSiteWhereUniqueInput | HospitalSiteWhereUniqueInput[]
    update?: HospitalSiteUpdateWithWhereUniqueWithoutSiteInput | HospitalSiteUpdateWithWhereUniqueWithoutSiteInput[]
    updateMany?: HospitalSiteUpdateManyWithWhereWithoutSiteInput | HospitalSiteUpdateManyWithWhereWithoutSiteInput[]
    deleteMany?: HospitalSiteScalarWhereInput | HospitalSiteScalarWhereInput[]
  }

  export type HospitalCreateNestedOneWithoutHospitalSiteInput = {
    create?: XOR<HospitalCreateWithoutHospitalSiteInput, HospitalUncheckedCreateWithoutHospitalSiteInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutHospitalSiteInput
    connect?: HospitalWhereUniqueInput
  }

  export type SiteCreateNestedOneWithoutHospitalSiteInput = {
    create?: XOR<SiteCreateWithoutHospitalSiteInput, SiteUncheckedCreateWithoutHospitalSiteInput>
    connectOrCreate?: SiteCreateOrConnectWithoutHospitalSiteInput
    connect?: SiteWhereUniqueInput
  }

  export type BookScheduleCreateNestedManyWithoutHospitalSiteInput = {
    create?: XOR<BookScheduleCreateWithoutHospitalSiteInput, BookScheduleUncheckedCreateWithoutHospitalSiteInput> | BookScheduleCreateWithoutHospitalSiteInput[] | BookScheduleUncheckedCreateWithoutHospitalSiteInput[]
    connectOrCreate?: BookScheduleCreateOrConnectWithoutHospitalSiteInput | BookScheduleCreateOrConnectWithoutHospitalSiteInput[]
    createMany?: BookScheduleCreateManyHospitalSiteInputEnvelope
    connect?: BookScheduleWhereUniqueInput | BookScheduleWhereUniqueInput[]
  }

  export type BookScheduleUncheckedCreateNestedManyWithoutHospitalSiteInput = {
    create?: XOR<BookScheduleCreateWithoutHospitalSiteInput, BookScheduleUncheckedCreateWithoutHospitalSiteInput> | BookScheduleCreateWithoutHospitalSiteInput[] | BookScheduleUncheckedCreateWithoutHospitalSiteInput[]
    connectOrCreate?: BookScheduleCreateOrConnectWithoutHospitalSiteInput | BookScheduleCreateOrConnectWithoutHospitalSiteInput[]
    createMany?: BookScheduleCreateManyHospitalSiteInputEnvelope
    connect?: BookScheduleWhereUniqueInput | BookScheduleWhereUniqueInput[]
  }

  export type HospitalUpdateOneRequiredWithoutHospitalSiteNestedInput = {
    create?: XOR<HospitalCreateWithoutHospitalSiteInput, HospitalUncheckedCreateWithoutHospitalSiteInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutHospitalSiteInput
    upsert?: HospitalUpsertWithoutHospitalSiteInput
    connect?: HospitalWhereUniqueInput
    update?: XOR<XOR<HospitalUpdateToOneWithWhereWithoutHospitalSiteInput, HospitalUpdateWithoutHospitalSiteInput>, HospitalUncheckedUpdateWithoutHospitalSiteInput>
  }

  export type SiteUpdateOneRequiredWithoutHospitalSiteNestedInput = {
    create?: XOR<SiteCreateWithoutHospitalSiteInput, SiteUncheckedCreateWithoutHospitalSiteInput>
    connectOrCreate?: SiteCreateOrConnectWithoutHospitalSiteInput
    upsert?: SiteUpsertWithoutHospitalSiteInput
    connect?: SiteWhereUniqueInput
    update?: XOR<XOR<SiteUpdateToOneWithWhereWithoutHospitalSiteInput, SiteUpdateWithoutHospitalSiteInput>, SiteUncheckedUpdateWithoutHospitalSiteInput>
  }

  export type BookScheduleUpdateManyWithoutHospitalSiteNestedInput = {
    create?: XOR<BookScheduleCreateWithoutHospitalSiteInput, BookScheduleUncheckedCreateWithoutHospitalSiteInput> | BookScheduleCreateWithoutHospitalSiteInput[] | BookScheduleUncheckedCreateWithoutHospitalSiteInput[]
    connectOrCreate?: BookScheduleCreateOrConnectWithoutHospitalSiteInput | BookScheduleCreateOrConnectWithoutHospitalSiteInput[]
    upsert?: BookScheduleUpsertWithWhereUniqueWithoutHospitalSiteInput | BookScheduleUpsertWithWhereUniqueWithoutHospitalSiteInput[]
    createMany?: BookScheduleCreateManyHospitalSiteInputEnvelope
    set?: BookScheduleWhereUniqueInput | BookScheduleWhereUniqueInput[]
    disconnect?: BookScheduleWhereUniqueInput | BookScheduleWhereUniqueInput[]
    delete?: BookScheduleWhereUniqueInput | BookScheduleWhereUniqueInput[]
    connect?: BookScheduleWhereUniqueInput | BookScheduleWhereUniqueInput[]
    update?: BookScheduleUpdateWithWhereUniqueWithoutHospitalSiteInput | BookScheduleUpdateWithWhereUniqueWithoutHospitalSiteInput[]
    updateMany?: BookScheduleUpdateManyWithWhereWithoutHospitalSiteInput | BookScheduleUpdateManyWithWhereWithoutHospitalSiteInput[]
    deleteMany?: BookScheduleScalarWhereInput | BookScheduleScalarWhereInput[]
  }

  export type BookScheduleUncheckedUpdateManyWithoutHospitalSiteNestedInput = {
    create?: XOR<BookScheduleCreateWithoutHospitalSiteInput, BookScheduleUncheckedCreateWithoutHospitalSiteInput> | BookScheduleCreateWithoutHospitalSiteInput[] | BookScheduleUncheckedCreateWithoutHospitalSiteInput[]
    connectOrCreate?: BookScheduleCreateOrConnectWithoutHospitalSiteInput | BookScheduleCreateOrConnectWithoutHospitalSiteInput[]
    upsert?: BookScheduleUpsertWithWhereUniqueWithoutHospitalSiteInput | BookScheduleUpsertWithWhereUniqueWithoutHospitalSiteInput[]
    createMany?: BookScheduleCreateManyHospitalSiteInputEnvelope
    set?: BookScheduleWhereUniqueInput | BookScheduleWhereUniqueInput[]
    disconnect?: BookScheduleWhereUniqueInput | BookScheduleWhereUniqueInput[]
    delete?: BookScheduleWhereUniqueInput | BookScheduleWhereUniqueInput[]
    connect?: BookScheduleWhereUniqueInput | BookScheduleWhereUniqueInput[]
    update?: BookScheduleUpdateWithWhereUniqueWithoutHospitalSiteInput | BookScheduleUpdateWithWhereUniqueWithoutHospitalSiteInput[]
    updateMany?: BookScheduleUpdateManyWithWhereWithoutHospitalSiteInput | BookScheduleUpdateManyWithWhereWithoutHospitalSiteInput[]
    deleteMany?: BookScheduleScalarWhereInput | BookScheduleScalarWhereInput[]
  }

  export type HospitalCreateNestedOneWithoutPhoneInput = {
    create?: XOR<HospitalCreateWithoutPhoneInput, HospitalUncheckedCreateWithoutPhoneInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutPhoneInput
    connect?: HospitalWhereUniqueInput
  }

  export type HospitalUpdateOneRequiredWithoutPhoneNestedInput = {
    create?: XOR<HospitalCreateWithoutPhoneInput, HospitalUncheckedCreateWithoutPhoneInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutPhoneInput
    upsert?: HospitalUpsertWithoutPhoneInput
    connect?: HospitalWhereUniqueInput
    update?: XOR<XOR<HospitalUpdateToOneWithWhereWithoutPhoneInput, HospitalUpdateWithoutPhoneInput>, HospitalUncheckedUpdateWithoutPhoneInput>
  }

  export type HospitalCreateNestedOneWithoutPhotoInput = {
    create?: XOR<HospitalCreateWithoutPhotoInput, HospitalUncheckedCreateWithoutPhotoInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutPhotoInput
    connect?: HospitalWhereUniqueInput
  }

  export type HospitalUpdateOneRequiredWithoutPhotoNestedInput = {
    create?: XOR<HospitalCreateWithoutPhotoInput, HospitalUncheckedCreateWithoutPhotoInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutPhotoInput
    upsert?: HospitalUpsertWithoutPhotoInput
    connect?: HospitalWhereUniqueInput
    update?: XOR<XOR<HospitalUpdateToOneWithWhereWithoutPhotoInput, HospitalUpdateWithoutPhotoInput>, HospitalUncheckedUpdateWithoutPhotoInput>
  }

  export type ReviewCreateNestedManyWithoutStarInput = {
    create?: XOR<ReviewCreateWithoutStarInput, ReviewUncheckedCreateWithoutStarInput> | ReviewCreateWithoutStarInput[] | ReviewUncheckedCreateWithoutStarInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutStarInput | ReviewCreateOrConnectWithoutStarInput[]
    createMany?: ReviewCreateManyStarInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutStarInput = {
    create?: XOR<ReviewCreateWithoutStarInput, ReviewUncheckedCreateWithoutStarInput> | ReviewCreateWithoutStarInput[] | ReviewUncheckedCreateWithoutStarInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutStarInput | ReviewCreateOrConnectWithoutStarInput[]
    createMany?: ReviewCreateManyStarInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ReviewUpdateManyWithoutStarNestedInput = {
    create?: XOR<ReviewCreateWithoutStarInput, ReviewUncheckedCreateWithoutStarInput> | ReviewCreateWithoutStarInput[] | ReviewUncheckedCreateWithoutStarInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutStarInput | ReviewCreateOrConnectWithoutStarInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutStarInput | ReviewUpsertWithWhereUniqueWithoutStarInput[]
    createMany?: ReviewCreateManyStarInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutStarInput | ReviewUpdateWithWhereUniqueWithoutStarInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutStarInput | ReviewUpdateManyWithWhereWithoutStarInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutStarNestedInput = {
    create?: XOR<ReviewCreateWithoutStarInput, ReviewUncheckedCreateWithoutStarInput> | ReviewCreateWithoutStarInput[] | ReviewUncheckedCreateWithoutStarInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutStarInput | ReviewCreateOrConnectWithoutStarInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutStarInput | ReviewUpsertWithWhereUniqueWithoutStarInput[]
    createMany?: ReviewCreateManyStarInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutStarInput | ReviewUpdateWithWhereUniqueWithoutStarInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutStarInput | ReviewUpdateManyWithWhereWithoutStarInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutReviewInput = {
    create?: XOR<UserCreateWithoutReviewInput, UserUncheckedCreateWithoutReviewInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewInput
    connect?: UserWhereUniqueInput
  }

  export type HospitalCreateNestedOneWithoutReviewInput = {
    create?: XOR<HospitalCreateWithoutReviewInput, HospitalUncheckedCreateWithoutReviewInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutReviewInput
    connect?: HospitalWhereUniqueInput
  }

  export type StarCreateNestedOneWithoutReviewInput = {
    create?: XOR<StarCreateWithoutReviewInput, StarUncheckedCreateWithoutReviewInput>
    connectOrCreate?: StarCreateOrConnectWithoutReviewInput
    connect?: StarWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutReviewNestedInput = {
    create?: XOR<UserCreateWithoutReviewInput, UserUncheckedCreateWithoutReviewInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewInput
    upsert?: UserUpsertWithoutReviewInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReviewInput, UserUpdateWithoutReviewInput>, UserUncheckedUpdateWithoutReviewInput>
  }

  export type HospitalUpdateOneRequiredWithoutReviewNestedInput = {
    create?: XOR<HospitalCreateWithoutReviewInput, HospitalUncheckedCreateWithoutReviewInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutReviewInput
    upsert?: HospitalUpsertWithoutReviewInput
    connect?: HospitalWhereUniqueInput
    update?: XOR<XOR<HospitalUpdateToOneWithWhereWithoutReviewInput, HospitalUpdateWithoutReviewInput>, HospitalUncheckedUpdateWithoutReviewInput>
  }

  export type StarUpdateOneRequiredWithoutReviewNestedInput = {
    create?: XOR<StarCreateWithoutReviewInput, StarUncheckedCreateWithoutReviewInput>
    connectOrCreate?: StarCreateOrConnectWithoutReviewInput
    upsert?: StarUpsertWithoutReviewInput
    connect?: StarWhereUniqueInput
    update?: XOR<XOR<StarUpdateToOneWithWhereWithoutReviewInput, StarUpdateWithoutReviewInput>, StarUncheckedUpdateWithoutReviewInput>
  }

  export type ScheduleStatusCreateNestedManyWithoutStatusInput = {
    create?: XOR<ScheduleStatusCreateWithoutStatusInput, ScheduleStatusUncheckedCreateWithoutStatusInput> | ScheduleStatusCreateWithoutStatusInput[] | ScheduleStatusUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: ScheduleStatusCreateOrConnectWithoutStatusInput | ScheduleStatusCreateOrConnectWithoutStatusInput[]
    createMany?: ScheduleStatusCreateManyStatusInputEnvelope
    connect?: ScheduleStatusWhereUniqueInput | ScheduleStatusWhereUniqueInput[]
  }

  export type ScheduleStatusUncheckedCreateNestedManyWithoutStatusInput = {
    create?: XOR<ScheduleStatusCreateWithoutStatusInput, ScheduleStatusUncheckedCreateWithoutStatusInput> | ScheduleStatusCreateWithoutStatusInput[] | ScheduleStatusUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: ScheduleStatusCreateOrConnectWithoutStatusInput | ScheduleStatusCreateOrConnectWithoutStatusInput[]
    createMany?: ScheduleStatusCreateManyStatusInputEnvelope
    connect?: ScheduleStatusWhereUniqueInput | ScheduleStatusWhereUniqueInput[]
  }

  export type EnumSTATUSFieldUpdateOperationsInput = {
    set?: $Enums.STATUS
  }

  export type ScheduleStatusUpdateManyWithoutStatusNestedInput = {
    create?: XOR<ScheduleStatusCreateWithoutStatusInput, ScheduleStatusUncheckedCreateWithoutStatusInput> | ScheduleStatusCreateWithoutStatusInput[] | ScheduleStatusUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: ScheduleStatusCreateOrConnectWithoutStatusInput | ScheduleStatusCreateOrConnectWithoutStatusInput[]
    upsert?: ScheduleStatusUpsertWithWhereUniqueWithoutStatusInput | ScheduleStatusUpsertWithWhereUniqueWithoutStatusInput[]
    createMany?: ScheduleStatusCreateManyStatusInputEnvelope
    set?: ScheduleStatusWhereUniqueInput | ScheduleStatusWhereUniqueInput[]
    disconnect?: ScheduleStatusWhereUniqueInput | ScheduleStatusWhereUniqueInput[]
    delete?: ScheduleStatusWhereUniqueInput | ScheduleStatusWhereUniqueInput[]
    connect?: ScheduleStatusWhereUniqueInput | ScheduleStatusWhereUniqueInput[]
    update?: ScheduleStatusUpdateWithWhereUniqueWithoutStatusInput | ScheduleStatusUpdateWithWhereUniqueWithoutStatusInput[]
    updateMany?: ScheduleStatusUpdateManyWithWhereWithoutStatusInput | ScheduleStatusUpdateManyWithWhereWithoutStatusInput[]
    deleteMany?: ScheduleStatusScalarWhereInput | ScheduleStatusScalarWhereInput[]
  }

  export type ScheduleStatusUncheckedUpdateManyWithoutStatusNestedInput = {
    create?: XOR<ScheduleStatusCreateWithoutStatusInput, ScheduleStatusUncheckedCreateWithoutStatusInput> | ScheduleStatusCreateWithoutStatusInput[] | ScheduleStatusUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: ScheduleStatusCreateOrConnectWithoutStatusInput | ScheduleStatusCreateOrConnectWithoutStatusInput[]
    upsert?: ScheduleStatusUpsertWithWhereUniqueWithoutStatusInput | ScheduleStatusUpsertWithWhereUniqueWithoutStatusInput[]
    createMany?: ScheduleStatusCreateManyStatusInputEnvelope
    set?: ScheduleStatusWhereUniqueInput | ScheduleStatusWhereUniqueInput[]
    disconnect?: ScheduleStatusWhereUniqueInput | ScheduleStatusWhereUniqueInput[]
    delete?: ScheduleStatusWhereUniqueInput | ScheduleStatusWhereUniqueInput[]
    connect?: ScheduleStatusWhereUniqueInput | ScheduleStatusWhereUniqueInput[]
    update?: ScheduleStatusUpdateWithWhereUniqueWithoutStatusInput | ScheduleStatusUpdateWithWhereUniqueWithoutStatusInput[]
    updateMany?: ScheduleStatusUpdateManyWithWhereWithoutStatusInput | ScheduleStatusUpdateManyWithWhereWithoutStatusInput[]
    deleteMany?: ScheduleStatusScalarWhereInput | ScheduleStatusScalarWhereInput[]
  }

  export type HospitalSiteCreateNestedOneWithoutBookScheduleInput = {
    create?: XOR<HospitalSiteCreateWithoutBookScheduleInput, HospitalSiteUncheckedCreateWithoutBookScheduleInput>
    connectOrCreate?: HospitalSiteCreateOrConnectWithoutBookScheduleInput
    connect?: HospitalSiteWhereUniqueInput
  }

  export type ScheduleCreateNestedManyWithoutBookScheduleInput = {
    create?: XOR<ScheduleCreateWithoutBookScheduleInput, ScheduleUncheckedCreateWithoutBookScheduleInput> | ScheduleCreateWithoutBookScheduleInput[] | ScheduleUncheckedCreateWithoutBookScheduleInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutBookScheduleInput | ScheduleCreateOrConnectWithoutBookScheduleInput[]
    createMany?: ScheduleCreateManyBookScheduleInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type ScheduleUncheckedCreateNestedManyWithoutBookScheduleInput = {
    create?: XOR<ScheduleCreateWithoutBookScheduleInput, ScheduleUncheckedCreateWithoutBookScheduleInput> | ScheduleCreateWithoutBookScheduleInput[] | ScheduleUncheckedCreateWithoutBookScheduleInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutBookScheduleInput | ScheduleCreateOrConnectWithoutBookScheduleInput[]
    createMany?: ScheduleCreateManyBookScheduleInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type HospitalSiteUpdateOneRequiredWithoutBookScheduleNestedInput = {
    create?: XOR<HospitalSiteCreateWithoutBookScheduleInput, HospitalSiteUncheckedCreateWithoutBookScheduleInput>
    connectOrCreate?: HospitalSiteCreateOrConnectWithoutBookScheduleInput
    upsert?: HospitalSiteUpsertWithoutBookScheduleInput
    connect?: HospitalSiteWhereUniqueInput
    update?: XOR<XOR<HospitalSiteUpdateToOneWithWhereWithoutBookScheduleInput, HospitalSiteUpdateWithoutBookScheduleInput>, HospitalSiteUncheckedUpdateWithoutBookScheduleInput>
  }

  export type ScheduleUpdateManyWithoutBookScheduleNestedInput = {
    create?: XOR<ScheduleCreateWithoutBookScheduleInput, ScheduleUncheckedCreateWithoutBookScheduleInput> | ScheduleCreateWithoutBookScheduleInput[] | ScheduleUncheckedCreateWithoutBookScheduleInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutBookScheduleInput | ScheduleCreateOrConnectWithoutBookScheduleInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutBookScheduleInput | ScheduleUpsertWithWhereUniqueWithoutBookScheduleInput[]
    createMany?: ScheduleCreateManyBookScheduleInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutBookScheduleInput | ScheduleUpdateWithWhereUniqueWithoutBookScheduleInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutBookScheduleInput | ScheduleUpdateManyWithWhereWithoutBookScheduleInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type ScheduleUncheckedUpdateManyWithoutBookScheduleNestedInput = {
    create?: XOR<ScheduleCreateWithoutBookScheduleInput, ScheduleUncheckedCreateWithoutBookScheduleInput> | ScheduleCreateWithoutBookScheduleInput[] | ScheduleUncheckedCreateWithoutBookScheduleInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutBookScheduleInput | ScheduleCreateOrConnectWithoutBookScheduleInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutBookScheduleInput | ScheduleUpsertWithWhereUniqueWithoutBookScheduleInput[]
    createMany?: ScheduleCreateManyBookScheduleInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutBookScheduleInput | ScheduleUpdateWithWhereUniqueWithoutBookScheduleInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutBookScheduleInput | ScheduleUpdateManyWithWhereWithoutBookScheduleInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutScheduleInput = {
    create?: XOR<UserCreateWithoutScheduleInput, UserUncheckedCreateWithoutScheduleInput>
    connectOrCreate?: UserCreateOrConnectWithoutScheduleInput
    connect?: UserWhereUniqueInput
  }

  export type BookScheduleCreateNestedOneWithoutScheduleInput = {
    create?: XOR<BookScheduleCreateWithoutScheduleInput, BookScheduleUncheckedCreateWithoutScheduleInput>
    connectOrCreate?: BookScheduleCreateOrConnectWithoutScheduleInput
    connect?: BookScheduleWhereUniqueInput
  }

  export type ScheduleStatusCreateNestedManyWithoutScheduleInput = {
    create?: XOR<ScheduleStatusCreateWithoutScheduleInput, ScheduleStatusUncheckedCreateWithoutScheduleInput> | ScheduleStatusCreateWithoutScheduleInput[] | ScheduleStatusUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: ScheduleStatusCreateOrConnectWithoutScheduleInput | ScheduleStatusCreateOrConnectWithoutScheduleInput[]
    createMany?: ScheduleStatusCreateManyScheduleInputEnvelope
    connect?: ScheduleStatusWhereUniqueInput | ScheduleStatusWhereUniqueInput[]
  }

  export type ScheduleStatusUncheckedCreateNestedManyWithoutScheduleInput = {
    create?: XOR<ScheduleStatusCreateWithoutScheduleInput, ScheduleStatusUncheckedCreateWithoutScheduleInput> | ScheduleStatusCreateWithoutScheduleInput[] | ScheduleStatusUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: ScheduleStatusCreateOrConnectWithoutScheduleInput | ScheduleStatusCreateOrConnectWithoutScheduleInput[]
    createMany?: ScheduleStatusCreateManyScheduleInputEnvelope
    connect?: ScheduleStatusWhereUniqueInput | ScheduleStatusWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutScheduleNestedInput = {
    create?: XOR<UserCreateWithoutScheduleInput, UserUncheckedCreateWithoutScheduleInput>
    connectOrCreate?: UserCreateOrConnectWithoutScheduleInput
    upsert?: UserUpsertWithoutScheduleInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutScheduleInput, UserUpdateWithoutScheduleInput>, UserUncheckedUpdateWithoutScheduleInput>
  }

  export type BookScheduleUpdateOneRequiredWithoutScheduleNestedInput = {
    create?: XOR<BookScheduleCreateWithoutScheduleInput, BookScheduleUncheckedCreateWithoutScheduleInput>
    connectOrCreate?: BookScheduleCreateOrConnectWithoutScheduleInput
    upsert?: BookScheduleUpsertWithoutScheduleInput
    connect?: BookScheduleWhereUniqueInput
    update?: XOR<XOR<BookScheduleUpdateToOneWithWhereWithoutScheduleInput, BookScheduleUpdateWithoutScheduleInput>, BookScheduleUncheckedUpdateWithoutScheduleInput>
  }

  export type ScheduleStatusUpdateManyWithoutScheduleNestedInput = {
    create?: XOR<ScheduleStatusCreateWithoutScheduleInput, ScheduleStatusUncheckedCreateWithoutScheduleInput> | ScheduleStatusCreateWithoutScheduleInput[] | ScheduleStatusUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: ScheduleStatusCreateOrConnectWithoutScheduleInput | ScheduleStatusCreateOrConnectWithoutScheduleInput[]
    upsert?: ScheduleStatusUpsertWithWhereUniqueWithoutScheduleInput | ScheduleStatusUpsertWithWhereUniqueWithoutScheduleInput[]
    createMany?: ScheduleStatusCreateManyScheduleInputEnvelope
    set?: ScheduleStatusWhereUniqueInput | ScheduleStatusWhereUniqueInput[]
    disconnect?: ScheduleStatusWhereUniqueInput | ScheduleStatusWhereUniqueInput[]
    delete?: ScheduleStatusWhereUniqueInput | ScheduleStatusWhereUniqueInput[]
    connect?: ScheduleStatusWhereUniqueInput | ScheduleStatusWhereUniqueInput[]
    update?: ScheduleStatusUpdateWithWhereUniqueWithoutScheduleInput | ScheduleStatusUpdateWithWhereUniqueWithoutScheduleInput[]
    updateMany?: ScheduleStatusUpdateManyWithWhereWithoutScheduleInput | ScheduleStatusUpdateManyWithWhereWithoutScheduleInput[]
    deleteMany?: ScheduleStatusScalarWhereInput | ScheduleStatusScalarWhereInput[]
  }

  export type ScheduleStatusUncheckedUpdateManyWithoutScheduleNestedInput = {
    create?: XOR<ScheduleStatusCreateWithoutScheduleInput, ScheduleStatusUncheckedCreateWithoutScheduleInput> | ScheduleStatusCreateWithoutScheduleInput[] | ScheduleStatusUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: ScheduleStatusCreateOrConnectWithoutScheduleInput | ScheduleStatusCreateOrConnectWithoutScheduleInput[]
    upsert?: ScheduleStatusUpsertWithWhereUniqueWithoutScheduleInput | ScheduleStatusUpsertWithWhereUniqueWithoutScheduleInput[]
    createMany?: ScheduleStatusCreateManyScheduleInputEnvelope
    set?: ScheduleStatusWhereUniqueInput | ScheduleStatusWhereUniqueInput[]
    disconnect?: ScheduleStatusWhereUniqueInput | ScheduleStatusWhereUniqueInput[]
    delete?: ScheduleStatusWhereUniqueInput | ScheduleStatusWhereUniqueInput[]
    connect?: ScheduleStatusWhereUniqueInput | ScheduleStatusWhereUniqueInput[]
    update?: ScheduleStatusUpdateWithWhereUniqueWithoutScheduleInput | ScheduleStatusUpdateWithWhereUniqueWithoutScheduleInput[]
    updateMany?: ScheduleStatusUpdateManyWithWhereWithoutScheduleInput | ScheduleStatusUpdateManyWithWhereWithoutScheduleInput[]
    deleteMany?: ScheduleStatusScalarWhereInput | ScheduleStatusScalarWhereInput[]
  }

  export type ScheduleCreateNestedOneWithoutScheduleStatusInput = {
    create?: XOR<ScheduleCreateWithoutScheduleStatusInput, ScheduleUncheckedCreateWithoutScheduleStatusInput>
    connectOrCreate?: ScheduleCreateOrConnectWithoutScheduleStatusInput
    connect?: ScheduleWhereUniqueInput
  }

  export type StatusCreateNestedOneWithoutScheduleStatusInput = {
    create?: XOR<StatusCreateWithoutScheduleStatusInput, StatusUncheckedCreateWithoutScheduleStatusInput>
    connectOrCreate?: StatusCreateOrConnectWithoutScheduleStatusInput
    connect?: StatusWhereUniqueInput
  }

  export type ScheduleUpdateOneRequiredWithoutScheduleStatusNestedInput = {
    create?: XOR<ScheduleCreateWithoutScheduleStatusInput, ScheduleUncheckedCreateWithoutScheduleStatusInput>
    connectOrCreate?: ScheduleCreateOrConnectWithoutScheduleStatusInput
    upsert?: ScheduleUpsertWithoutScheduleStatusInput
    connect?: ScheduleWhereUniqueInput
    update?: XOR<XOR<ScheduleUpdateToOneWithWhereWithoutScheduleStatusInput, ScheduleUpdateWithoutScheduleStatusInput>, ScheduleUncheckedUpdateWithoutScheduleStatusInput>
  }

  export type StatusUpdateOneRequiredWithoutScheduleStatusNestedInput = {
    create?: XOR<StatusCreateWithoutScheduleStatusInput, StatusUncheckedCreateWithoutScheduleStatusInput>
    connectOrCreate?: StatusCreateOrConnectWithoutScheduleStatusInput
    upsert?: StatusUpsertWithoutScheduleStatusInput
    connect?: StatusWhereUniqueInput
    update?: XOR<XOR<StatusUpdateToOneWithWhereWithoutScheduleStatusInput, StatusUpdateWithoutScheduleStatusInput>, StatusUncheckedUpdateWithoutScheduleStatusInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumSTATUSFilter<$PrismaModel = never> = {
    equals?: $Enums.STATUS | EnumSTATUSFieldRefInput<$PrismaModel>
    in?: $Enums.STATUS[]
    notIn?: $Enums.STATUS[]
    not?: NestedEnumSTATUSFilter<$PrismaModel> | $Enums.STATUS
  }

  export type NestedEnumSTATUSWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.STATUS | EnumSTATUSFieldRefInput<$PrismaModel>
    in?: $Enums.STATUS[]
    notIn?: $Enums.STATUS[]
    not?: NestedEnumSTATUSWithAggregatesFilter<$PrismaModel> | $Enums.STATUS
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSTATUSFilter<$PrismaModel>
    _max?: NestedEnumSTATUSFilter<$PrismaModel>
  }

  export type UserCreateWithoutBloodTypeInput = {
    name: string
    cpf: string
    dateOfBirth: Date | string
    password: string
    weight: Decimal | DecimalJsLike | number | string
    email: string
    photoUrl?: string | null
    phone: string
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    Address: AddressCreateNestedOneWithoutUserInput
    Sex: SexCreateNestedOneWithoutUserInput
    Review?: ReviewCreateNestedManyWithoutUserInput
    Schedule?: ScheduleCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBloodTypeInput = {
    id?: number
    name: string
    cpf: string
    dateOfBirth: Date | string
    password: string
    weight: Decimal | DecimalJsLike | number | string
    email: string
    photoUrl?: string | null
    phone: string
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    idAddress: number
    idSex: number
    Review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    Schedule?: ScheduleUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBloodTypeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBloodTypeInput, UserUncheckedCreateWithoutBloodTypeInput>
  }

  export type UserCreateManyBloodTypeInputEnvelope = {
    data: UserCreateManyBloodTypeInput | UserCreateManyBloodTypeInput[]
    skipDuplicates?: boolean
  }

  export type DonationBankCreateWithoutBloodTypeInput = {
    year: number
    bloodMl: Decimal | DecimalJsLike | number | string
    Hospital: HospitalCreateNestedOneWithoutDonationBankInput
  }

  export type DonationBankUncheckedCreateWithoutBloodTypeInput = {
    id?: number
    year: number
    bloodMl: Decimal | DecimalJsLike | number | string
    idHospital: number
  }

  export type DonationBankCreateOrConnectWithoutBloodTypeInput = {
    where: DonationBankWhereUniqueInput
    create: XOR<DonationBankCreateWithoutBloodTypeInput, DonationBankUncheckedCreateWithoutBloodTypeInput>
  }

  export type DonationBankCreateManyBloodTypeInputEnvelope = {
    data: DonationBankCreateManyBloodTypeInput | DonationBankCreateManyBloodTypeInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutBloodTypeInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutBloodTypeInput, UserUncheckedUpdateWithoutBloodTypeInput>
    create: XOR<UserCreateWithoutBloodTypeInput, UserUncheckedCreateWithoutBloodTypeInput>
  }

  export type UserUpdateWithWhereUniqueWithoutBloodTypeInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutBloodTypeInput, UserUncheckedUpdateWithoutBloodTypeInput>
  }

  export type UserUpdateManyWithWhereWithoutBloodTypeInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutBloodTypeInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    cpf?: StringFilter<"User"> | string
    dateOfBirth?: DateTimeFilter<"User"> | Date | string
    password?: StringFilter<"User"> | string
    weight?: DecimalFilter<"User"> | Decimal | DecimalJsLike | number | string
    email?: StringFilter<"User"> | string
    photoUrl?: StringNullableFilter<"User"> | string | null
    phone?: StringFilter<"User"> | string
    passwordResetToken?: StringNullableFilter<"User"> | string | null
    passwordResetExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    idAddress?: IntFilter<"User"> | number
    idSex?: IntFilter<"User"> | number
    idBloodType?: IntFilter<"User"> | number
  }

  export type DonationBankUpsertWithWhereUniqueWithoutBloodTypeInput = {
    where: DonationBankWhereUniqueInput
    update: XOR<DonationBankUpdateWithoutBloodTypeInput, DonationBankUncheckedUpdateWithoutBloodTypeInput>
    create: XOR<DonationBankCreateWithoutBloodTypeInput, DonationBankUncheckedCreateWithoutBloodTypeInput>
  }

  export type DonationBankUpdateWithWhereUniqueWithoutBloodTypeInput = {
    where: DonationBankWhereUniqueInput
    data: XOR<DonationBankUpdateWithoutBloodTypeInput, DonationBankUncheckedUpdateWithoutBloodTypeInput>
  }

  export type DonationBankUpdateManyWithWhereWithoutBloodTypeInput = {
    where: DonationBankScalarWhereInput
    data: XOR<DonationBankUpdateManyMutationInput, DonationBankUncheckedUpdateManyWithoutBloodTypeInput>
  }

  export type DonationBankScalarWhereInput = {
    AND?: DonationBankScalarWhereInput | DonationBankScalarWhereInput[]
    OR?: DonationBankScalarWhereInput[]
    NOT?: DonationBankScalarWhereInput | DonationBankScalarWhereInput[]
    id?: IntFilter<"DonationBank"> | number
    year?: IntFilter<"DonationBank"> | number
    bloodMl?: DecimalFilter<"DonationBank"> | Decimal | DecimalJsLike | number | string
    idHospital?: IntFilter<"DonationBank"> | number
    idBloodType?: IntFilter<"DonationBank"> | number
  }

  export type UserCreateWithoutSexInput = {
    name: string
    cpf: string
    dateOfBirth: Date | string
    password: string
    weight: Decimal | DecimalJsLike | number | string
    email: string
    photoUrl?: string | null
    phone: string
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    Address: AddressCreateNestedOneWithoutUserInput
    BloodType?: BloodTypeCreateNestedOneWithoutUserInput
    Review?: ReviewCreateNestedManyWithoutUserInput
    Schedule?: ScheduleCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSexInput = {
    id?: number
    name: string
    cpf: string
    dateOfBirth: Date | string
    password: string
    weight: Decimal | DecimalJsLike | number | string
    email: string
    photoUrl?: string | null
    phone: string
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    idAddress: number
    idBloodType?: number
    Review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    Schedule?: ScheduleUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSexInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSexInput, UserUncheckedCreateWithoutSexInput>
  }

  export type UserCreateManySexInputEnvelope = {
    data: UserCreateManySexInput | UserCreateManySexInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutSexInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutSexInput, UserUncheckedUpdateWithoutSexInput>
    create: XOR<UserCreateWithoutSexInput, UserUncheckedCreateWithoutSexInput>
  }

  export type UserUpdateWithWhereUniqueWithoutSexInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutSexInput, UserUncheckedUpdateWithoutSexInput>
  }

  export type UserUpdateManyWithWhereWithoutSexInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutSexInput>
  }

  export type HospitalCreateWithoutAddressInput = {
    name: string
    cnpj: string
    email: string
    websiteUrl?: string | null
    password: string
    HospitalSite?: HospitalSiteCreateNestedManyWithoutHospitalInput
    Phone?: PhoneCreateNestedManyWithoutHospitalInput
    Photo?: PhotoCreateNestedManyWithoutHospitalInput
    Review?: ReviewCreateNestedManyWithoutHospitalInput
    Campaign?: CampaignCreateNestedManyWithoutHospitalInput
    DonationBank?: DonationBankCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutAddressInput = {
    id?: number
    name: string
    cnpj: string
    email: string
    websiteUrl?: string | null
    password: string
    HospitalSite?: HospitalSiteUncheckedCreateNestedManyWithoutHospitalInput
    Phone?: PhoneUncheckedCreateNestedManyWithoutHospitalInput
    Photo?: PhotoUncheckedCreateNestedManyWithoutHospitalInput
    Review?: ReviewUncheckedCreateNestedManyWithoutHospitalInput
    Campaign?: CampaignUncheckedCreateNestedManyWithoutHospitalInput
    DonationBank?: DonationBankUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutAddressInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutAddressInput, HospitalUncheckedCreateWithoutAddressInput>
  }

  export type HospitalCreateManyAddressInputEnvelope = {
    data: HospitalCreateManyAddressInput | HospitalCreateManyAddressInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutAddressInput = {
    name: string
    cpf: string
    dateOfBirth: Date | string
    password: string
    weight: Decimal | DecimalJsLike | number | string
    email: string
    photoUrl?: string | null
    phone: string
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    Sex: SexCreateNestedOneWithoutUserInput
    BloodType?: BloodTypeCreateNestedOneWithoutUserInput
    Review?: ReviewCreateNestedManyWithoutUserInput
    Schedule?: ScheduleCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAddressInput = {
    id?: number
    name: string
    cpf: string
    dateOfBirth: Date | string
    password: string
    weight: Decimal | DecimalJsLike | number | string
    email: string
    photoUrl?: string | null
    phone: string
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    idSex: number
    idBloodType?: number
    Review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    Schedule?: ScheduleUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAddressInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAddressInput, UserUncheckedCreateWithoutAddressInput>
  }

  export type UserCreateManyAddressInputEnvelope = {
    data: UserCreateManyAddressInput | UserCreateManyAddressInput[]
    skipDuplicates?: boolean
  }

  export type HospitalUpsertWithWhereUniqueWithoutAddressInput = {
    where: HospitalWhereUniqueInput
    update: XOR<HospitalUpdateWithoutAddressInput, HospitalUncheckedUpdateWithoutAddressInput>
    create: XOR<HospitalCreateWithoutAddressInput, HospitalUncheckedCreateWithoutAddressInput>
  }

  export type HospitalUpdateWithWhereUniqueWithoutAddressInput = {
    where: HospitalWhereUniqueInput
    data: XOR<HospitalUpdateWithoutAddressInput, HospitalUncheckedUpdateWithoutAddressInput>
  }

  export type HospitalUpdateManyWithWhereWithoutAddressInput = {
    where: HospitalScalarWhereInput
    data: XOR<HospitalUpdateManyMutationInput, HospitalUncheckedUpdateManyWithoutAddressInput>
  }

  export type HospitalScalarWhereInput = {
    AND?: HospitalScalarWhereInput | HospitalScalarWhereInput[]
    OR?: HospitalScalarWhereInput[]
    NOT?: HospitalScalarWhereInput | HospitalScalarWhereInput[]
    id?: IntFilter<"Hospital"> | number
    name?: StringFilter<"Hospital"> | string
    cnpj?: StringFilter<"Hospital"> | string
    email?: StringFilter<"Hospital"> | string
    websiteUrl?: StringNullableFilter<"Hospital"> | string | null
    password?: StringFilter<"Hospital"> | string
    idAddress?: IntFilter<"Hospital"> | number
  }

  export type UserUpsertWithWhereUniqueWithoutAddressInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutAddressInput, UserUncheckedUpdateWithoutAddressInput>
    create: XOR<UserCreateWithoutAddressInput, UserUncheckedCreateWithoutAddressInput>
  }

  export type UserUpdateWithWhereUniqueWithoutAddressInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutAddressInput, UserUncheckedUpdateWithoutAddressInput>
  }

  export type UserUpdateManyWithWhereWithoutAddressInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutAddressInput>
  }

  export type AddressCreateWithoutUserInput = {
    cep: string
    uf: string
    city: string
    neighborhood: string
    street: string
    number: string
    complement?: string | null
    Hospital?: HospitalCreateNestedManyWithoutAddressInput
  }

  export type AddressUncheckedCreateWithoutUserInput = {
    id?: number
    cep: string
    uf: string
    city: string
    neighborhood: string
    street: string
    number: string
    complement?: string | null
    Hospital?: HospitalUncheckedCreateNestedManyWithoutAddressInput
  }

  export type AddressCreateOrConnectWithoutUserInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput>
  }

  export type SexCreateWithoutUserInput = {
    sex: string
  }

  export type SexUncheckedCreateWithoutUserInput = {
    id?: number
    sex: string
  }

  export type SexCreateOrConnectWithoutUserInput = {
    where: SexWhereUniqueInput
    create: XOR<SexCreateWithoutUserInput, SexUncheckedCreateWithoutUserInput>
  }

  export type BloodTypeCreateWithoutUserInput = {
    type: string
    DonationBank?: DonationBankCreateNestedManyWithoutBloodTypeInput
  }

  export type BloodTypeUncheckedCreateWithoutUserInput = {
    id?: number
    type: string
    DonationBank?: DonationBankUncheckedCreateNestedManyWithoutBloodTypeInput
  }

  export type BloodTypeCreateOrConnectWithoutUserInput = {
    where: BloodTypeWhereUniqueInput
    create: XOR<BloodTypeCreateWithoutUserInput, BloodTypeUncheckedCreateWithoutUserInput>
  }

  export type ReviewCreateWithoutUserInput = {
    opinion: string
    date?: Date | string
    Hospital: HospitalCreateNestedOneWithoutReviewInput
    Star: StarCreateNestedOneWithoutReviewInput
  }

  export type ReviewUncheckedCreateWithoutUserInput = {
    id?: number
    opinion: string
    date?: Date | string
    idHospital: number
    idStar: number
  }

  export type ReviewCreateOrConnectWithoutUserInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewCreateManyUserInputEnvelope = {
    data: ReviewCreateManyUserInput | ReviewCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ScheduleCreateWithoutUserInput = {
    BookSchedule: BookScheduleCreateNestedOneWithoutScheduleInput
    ScheduleStatus?: ScheduleStatusCreateNestedManyWithoutScheduleInput
  }

  export type ScheduleUncheckedCreateWithoutUserInput = {
    id?: number
    idBookSchedule: number
    ScheduleStatus?: ScheduleStatusUncheckedCreateNestedManyWithoutScheduleInput
  }

  export type ScheduleCreateOrConnectWithoutUserInput = {
    where: ScheduleWhereUniqueInput
    create: XOR<ScheduleCreateWithoutUserInput, ScheduleUncheckedCreateWithoutUserInput>
  }

  export type ScheduleCreateManyUserInputEnvelope = {
    data: ScheduleCreateManyUserInput | ScheduleCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AddressUpsertWithoutUserInput = {
    update: XOR<AddressUpdateWithoutUserInput, AddressUncheckedUpdateWithoutUserInput>
    create: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput>
    where?: AddressWhereInput
  }

  export type AddressUpdateToOneWithWhereWithoutUserInput = {
    where?: AddressWhereInput
    data: XOR<AddressUpdateWithoutUserInput, AddressUncheckedUpdateWithoutUserInput>
  }

  export type AddressUpdateWithoutUserInput = {
    cep?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    Hospital?: HospitalUpdateManyWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    cep?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    Hospital?: HospitalUncheckedUpdateManyWithoutAddressNestedInput
  }

  export type SexUpsertWithoutUserInput = {
    update: XOR<SexUpdateWithoutUserInput, SexUncheckedUpdateWithoutUserInput>
    create: XOR<SexCreateWithoutUserInput, SexUncheckedCreateWithoutUserInput>
    where?: SexWhereInput
  }

  export type SexUpdateToOneWithWhereWithoutUserInput = {
    where?: SexWhereInput
    data: XOR<SexUpdateWithoutUserInput, SexUncheckedUpdateWithoutUserInput>
  }

  export type SexUpdateWithoutUserInput = {
    sex?: StringFieldUpdateOperationsInput | string
  }

  export type SexUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    sex?: StringFieldUpdateOperationsInput | string
  }

  export type BloodTypeUpsertWithoutUserInput = {
    update: XOR<BloodTypeUpdateWithoutUserInput, BloodTypeUncheckedUpdateWithoutUserInput>
    create: XOR<BloodTypeCreateWithoutUserInput, BloodTypeUncheckedCreateWithoutUserInput>
    where?: BloodTypeWhereInput
  }

  export type BloodTypeUpdateToOneWithWhereWithoutUserInput = {
    where?: BloodTypeWhereInput
    data: XOR<BloodTypeUpdateWithoutUserInput, BloodTypeUncheckedUpdateWithoutUserInput>
  }

  export type BloodTypeUpdateWithoutUserInput = {
    type?: StringFieldUpdateOperationsInput | string
    DonationBank?: DonationBankUpdateManyWithoutBloodTypeNestedInput
  }

  export type BloodTypeUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    DonationBank?: DonationBankUncheckedUpdateManyWithoutBloodTypeNestedInput
  }

  export type ReviewUpsertWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
  }

  export type ReviewUpdateManyWithWhereWithoutUserInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutUserInput>
  }

  export type ReviewScalarWhereInput = {
    AND?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    OR?: ReviewScalarWhereInput[]
    NOT?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    id?: IntFilter<"Review"> | number
    opinion?: StringFilter<"Review"> | string
    date?: DateTimeFilter<"Review"> | Date | string
    idUser?: IntFilter<"Review"> | number
    idHospital?: IntFilter<"Review"> | number
    idStar?: IntFilter<"Review"> | number
  }

  export type ScheduleUpsertWithWhereUniqueWithoutUserInput = {
    where: ScheduleWhereUniqueInput
    update: XOR<ScheduleUpdateWithoutUserInput, ScheduleUncheckedUpdateWithoutUserInput>
    create: XOR<ScheduleCreateWithoutUserInput, ScheduleUncheckedCreateWithoutUserInput>
  }

  export type ScheduleUpdateWithWhereUniqueWithoutUserInput = {
    where: ScheduleWhereUniqueInput
    data: XOR<ScheduleUpdateWithoutUserInput, ScheduleUncheckedUpdateWithoutUserInput>
  }

  export type ScheduleUpdateManyWithWhereWithoutUserInput = {
    where: ScheduleScalarWhereInput
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyWithoutUserInput>
  }

  export type ScheduleScalarWhereInput = {
    AND?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
    OR?: ScheduleScalarWhereInput[]
    NOT?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
    id?: IntFilter<"Schedule"> | number
    idUser?: IntFilter<"Schedule"> | number
    idBookSchedule?: IntFilter<"Schedule"> | number
  }

  export type AddressCreateWithoutHospitalInput = {
    cep: string
    uf: string
    city: string
    neighborhood: string
    street: string
    number: string
    complement?: string | null
    User?: UserCreateNestedManyWithoutAddressInput
  }

  export type AddressUncheckedCreateWithoutHospitalInput = {
    id?: number
    cep: string
    uf: string
    city: string
    neighborhood: string
    street: string
    number: string
    complement?: string | null
    User?: UserUncheckedCreateNestedManyWithoutAddressInput
  }

  export type AddressCreateOrConnectWithoutHospitalInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutHospitalInput, AddressUncheckedCreateWithoutHospitalInput>
  }

  export type HospitalSiteCreateWithoutHospitalInput = {
    Site: SiteCreateNestedOneWithoutHospitalSiteInput
    BookSchedule?: BookScheduleCreateNestedManyWithoutHospitalSiteInput
  }

  export type HospitalSiteUncheckedCreateWithoutHospitalInput = {
    id?: number
    idSite: number
    BookSchedule?: BookScheduleUncheckedCreateNestedManyWithoutHospitalSiteInput
  }

  export type HospitalSiteCreateOrConnectWithoutHospitalInput = {
    where: HospitalSiteWhereUniqueInput
    create: XOR<HospitalSiteCreateWithoutHospitalInput, HospitalSiteUncheckedCreateWithoutHospitalInput>
  }

  export type HospitalSiteCreateManyHospitalInputEnvelope = {
    data: HospitalSiteCreateManyHospitalInput | HospitalSiteCreateManyHospitalInput[]
    skipDuplicates?: boolean
  }

  export type PhoneCreateWithoutHospitalInput = {
    phone: string
  }

  export type PhoneUncheckedCreateWithoutHospitalInput = {
    id?: number
    phone: string
  }

  export type PhoneCreateOrConnectWithoutHospitalInput = {
    where: PhoneWhereUniqueInput
    create: XOR<PhoneCreateWithoutHospitalInput, PhoneUncheckedCreateWithoutHospitalInput>
  }

  export type PhoneCreateManyHospitalInputEnvelope = {
    data: PhoneCreateManyHospitalInput | PhoneCreateManyHospitalInput[]
    skipDuplicates?: boolean
  }

  export type PhotoCreateWithoutHospitalInput = {
    url: string
  }

  export type PhotoUncheckedCreateWithoutHospitalInput = {
    id?: number
    url: string
  }

  export type PhotoCreateOrConnectWithoutHospitalInput = {
    where: PhotoWhereUniqueInput
    create: XOR<PhotoCreateWithoutHospitalInput, PhotoUncheckedCreateWithoutHospitalInput>
  }

  export type PhotoCreateManyHospitalInputEnvelope = {
    data: PhotoCreateManyHospitalInput | PhotoCreateManyHospitalInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutHospitalInput = {
    opinion: string
    date?: Date | string
    User: UserCreateNestedOneWithoutReviewInput
    Star: StarCreateNestedOneWithoutReviewInput
  }

  export type ReviewUncheckedCreateWithoutHospitalInput = {
    id?: number
    opinion: string
    date?: Date | string
    idUser: number
    idStar: number
  }

  export type ReviewCreateOrConnectWithoutHospitalInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutHospitalInput, ReviewUncheckedCreateWithoutHospitalInput>
  }

  export type ReviewCreateManyHospitalInputEnvelope = {
    data: ReviewCreateManyHospitalInput | ReviewCreateManyHospitalInput[]
    skipDuplicates?: boolean
  }

  export type CampaignCreateWithoutHospitalInput = {
    date: Date | string
    hour: Date | string
    description: string
    image: string
  }

  export type CampaignUncheckedCreateWithoutHospitalInput = {
    id?: number
    date: Date | string
    hour: Date | string
    description: string
    image: string
  }

  export type CampaignCreateOrConnectWithoutHospitalInput = {
    where: CampaignWhereUniqueInput
    create: XOR<CampaignCreateWithoutHospitalInput, CampaignUncheckedCreateWithoutHospitalInput>
  }

  export type CampaignCreateManyHospitalInputEnvelope = {
    data: CampaignCreateManyHospitalInput | CampaignCreateManyHospitalInput[]
    skipDuplicates?: boolean
  }

  export type DonationBankCreateWithoutHospitalInput = {
    year: number
    bloodMl: Decimal | DecimalJsLike | number | string
    BloodType: BloodTypeCreateNestedOneWithoutDonationBankInput
  }

  export type DonationBankUncheckedCreateWithoutHospitalInput = {
    id?: number
    year: number
    bloodMl: Decimal | DecimalJsLike | number | string
    idBloodType: number
  }

  export type DonationBankCreateOrConnectWithoutHospitalInput = {
    where: DonationBankWhereUniqueInput
    create: XOR<DonationBankCreateWithoutHospitalInput, DonationBankUncheckedCreateWithoutHospitalInput>
  }

  export type DonationBankCreateManyHospitalInputEnvelope = {
    data: DonationBankCreateManyHospitalInput | DonationBankCreateManyHospitalInput[]
    skipDuplicates?: boolean
  }

  export type AddressUpsertWithoutHospitalInput = {
    update: XOR<AddressUpdateWithoutHospitalInput, AddressUncheckedUpdateWithoutHospitalInput>
    create: XOR<AddressCreateWithoutHospitalInput, AddressUncheckedCreateWithoutHospitalInput>
    where?: AddressWhereInput
  }

  export type AddressUpdateToOneWithWhereWithoutHospitalInput = {
    where?: AddressWhereInput
    data: XOR<AddressUpdateWithoutHospitalInput, AddressUncheckedUpdateWithoutHospitalInput>
  }

  export type AddressUpdateWithoutHospitalInput = {
    cep?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    User?: UserUpdateManyWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateWithoutHospitalInput = {
    id?: IntFieldUpdateOperationsInput | number
    cep?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    User?: UserUncheckedUpdateManyWithoutAddressNestedInput
  }

  export type HospitalSiteUpsertWithWhereUniqueWithoutHospitalInput = {
    where: HospitalSiteWhereUniqueInput
    update: XOR<HospitalSiteUpdateWithoutHospitalInput, HospitalSiteUncheckedUpdateWithoutHospitalInput>
    create: XOR<HospitalSiteCreateWithoutHospitalInput, HospitalSiteUncheckedCreateWithoutHospitalInput>
  }

  export type HospitalSiteUpdateWithWhereUniqueWithoutHospitalInput = {
    where: HospitalSiteWhereUniqueInput
    data: XOR<HospitalSiteUpdateWithoutHospitalInput, HospitalSiteUncheckedUpdateWithoutHospitalInput>
  }

  export type HospitalSiteUpdateManyWithWhereWithoutHospitalInput = {
    where: HospitalSiteScalarWhereInput
    data: XOR<HospitalSiteUpdateManyMutationInput, HospitalSiteUncheckedUpdateManyWithoutHospitalInput>
  }

  export type HospitalSiteScalarWhereInput = {
    AND?: HospitalSiteScalarWhereInput | HospitalSiteScalarWhereInput[]
    OR?: HospitalSiteScalarWhereInput[]
    NOT?: HospitalSiteScalarWhereInput | HospitalSiteScalarWhereInput[]
    id?: IntFilter<"HospitalSite"> | number
    idHospital?: IntFilter<"HospitalSite"> | number
    idSite?: IntFilter<"HospitalSite"> | number
  }

  export type PhoneUpsertWithWhereUniqueWithoutHospitalInput = {
    where: PhoneWhereUniqueInput
    update: XOR<PhoneUpdateWithoutHospitalInput, PhoneUncheckedUpdateWithoutHospitalInput>
    create: XOR<PhoneCreateWithoutHospitalInput, PhoneUncheckedCreateWithoutHospitalInput>
  }

  export type PhoneUpdateWithWhereUniqueWithoutHospitalInput = {
    where: PhoneWhereUniqueInput
    data: XOR<PhoneUpdateWithoutHospitalInput, PhoneUncheckedUpdateWithoutHospitalInput>
  }

  export type PhoneUpdateManyWithWhereWithoutHospitalInput = {
    where: PhoneScalarWhereInput
    data: XOR<PhoneUpdateManyMutationInput, PhoneUncheckedUpdateManyWithoutHospitalInput>
  }

  export type PhoneScalarWhereInput = {
    AND?: PhoneScalarWhereInput | PhoneScalarWhereInput[]
    OR?: PhoneScalarWhereInput[]
    NOT?: PhoneScalarWhereInput | PhoneScalarWhereInput[]
    id?: IntFilter<"Phone"> | number
    phone?: StringFilter<"Phone"> | string
    idHospital?: IntFilter<"Phone"> | number
  }

  export type PhotoUpsertWithWhereUniqueWithoutHospitalInput = {
    where: PhotoWhereUniqueInput
    update: XOR<PhotoUpdateWithoutHospitalInput, PhotoUncheckedUpdateWithoutHospitalInput>
    create: XOR<PhotoCreateWithoutHospitalInput, PhotoUncheckedCreateWithoutHospitalInput>
  }

  export type PhotoUpdateWithWhereUniqueWithoutHospitalInput = {
    where: PhotoWhereUniqueInput
    data: XOR<PhotoUpdateWithoutHospitalInput, PhotoUncheckedUpdateWithoutHospitalInput>
  }

  export type PhotoUpdateManyWithWhereWithoutHospitalInput = {
    where: PhotoScalarWhereInput
    data: XOR<PhotoUpdateManyMutationInput, PhotoUncheckedUpdateManyWithoutHospitalInput>
  }

  export type PhotoScalarWhereInput = {
    AND?: PhotoScalarWhereInput | PhotoScalarWhereInput[]
    OR?: PhotoScalarWhereInput[]
    NOT?: PhotoScalarWhereInput | PhotoScalarWhereInput[]
    id?: IntFilter<"Photo"> | number
    url?: StringFilter<"Photo"> | string
    idHospital?: IntFilter<"Photo"> | number
  }

  export type ReviewUpsertWithWhereUniqueWithoutHospitalInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutHospitalInput, ReviewUncheckedUpdateWithoutHospitalInput>
    create: XOR<ReviewCreateWithoutHospitalInput, ReviewUncheckedCreateWithoutHospitalInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutHospitalInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutHospitalInput, ReviewUncheckedUpdateWithoutHospitalInput>
  }

  export type ReviewUpdateManyWithWhereWithoutHospitalInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutHospitalInput>
  }

  export type CampaignUpsertWithWhereUniqueWithoutHospitalInput = {
    where: CampaignWhereUniqueInput
    update: XOR<CampaignUpdateWithoutHospitalInput, CampaignUncheckedUpdateWithoutHospitalInput>
    create: XOR<CampaignCreateWithoutHospitalInput, CampaignUncheckedCreateWithoutHospitalInput>
  }

  export type CampaignUpdateWithWhereUniqueWithoutHospitalInput = {
    where: CampaignWhereUniqueInput
    data: XOR<CampaignUpdateWithoutHospitalInput, CampaignUncheckedUpdateWithoutHospitalInput>
  }

  export type CampaignUpdateManyWithWhereWithoutHospitalInput = {
    where: CampaignScalarWhereInput
    data: XOR<CampaignUpdateManyMutationInput, CampaignUncheckedUpdateManyWithoutHospitalInput>
  }

  export type CampaignScalarWhereInput = {
    AND?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
    OR?: CampaignScalarWhereInput[]
    NOT?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
    id?: IntFilter<"Campaign"> | number
    date?: DateTimeFilter<"Campaign"> | Date | string
    hour?: DateTimeFilter<"Campaign"> | Date | string
    description?: StringFilter<"Campaign"> | string
    image?: StringFilter<"Campaign"> | string
    idHospital?: IntFilter<"Campaign"> | number
  }

  export type DonationBankUpsertWithWhereUniqueWithoutHospitalInput = {
    where: DonationBankWhereUniqueInput
    update: XOR<DonationBankUpdateWithoutHospitalInput, DonationBankUncheckedUpdateWithoutHospitalInput>
    create: XOR<DonationBankCreateWithoutHospitalInput, DonationBankUncheckedCreateWithoutHospitalInput>
  }

  export type DonationBankUpdateWithWhereUniqueWithoutHospitalInput = {
    where: DonationBankWhereUniqueInput
    data: XOR<DonationBankUpdateWithoutHospitalInput, DonationBankUncheckedUpdateWithoutHospitalInput>
  }

  export type DonationBankUpdateManyWithWhereWithoutHospitalInput = {
    where: DonationBankScalarWhereInput
    data: XOR<DonationBankUpdateManyMutationInput, DonationBankUncheckedUpdateManyWithoutHospitalInput>
  }

  export type HospitalCreateWithoutCampaignInput = {
    name: string
    cnpj: string
    email: string
    websiteUrl?: string | null
    password: string
    Address: AddressCreateNestedOneWithoutHospitalInput
    HospitalSite?: HospitalSiteCreateNestedManyWithoutHospitalInput
    Phone?: PhoneCreateNestedManyWithoutHospitalInput
    Photo?: PhotoCreateNestedManyWithoutHospitalInput
    Review?: ReviewCreateNestedManyWithoutHospitalInput
    DonationBank?: DonationBankCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutCampaignInput = {
    id?: number
    name: string
    cnpj: string
    email: string
    websiteUrl?: string | null
    password: string
    idAddress: number
    HospitalSite?: HospitalSiteUncheckedCreateNestedManyWithoutHospitalInput
    Phone?: PhoneUncheckedCreateNestedManyWithoutHospitalInput
    Photo?: PhotoUncheckedCreateNestedManyWithoutHospitalInput
    Review?: ReviewUncheckedCreateNestedManyWithoutHospitalInput
    DonationBank?: DonationBankUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutCampaignInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutCampaignInput, HospitalUncheckedCreateWithoutCampaignInput>
  }

  export type HospitalUpsertWithoutCampaignInput = {
    update: XOR<HospitalUpdateWithoutCampaignInput, HospitalUncheckedUpdateWithoutCampaignInput>
    create: XOR<HospitalCreateWithoutCampaignInput, HospitalUncheckedCreateWithoutCampaignInput>
    where?: HospitalWhereInput
  }

  export type HospitalUpdateToOneWithWhereWithoutCampaignInput = {
    where?: HospitalWhereInput
    data: XOR<HospitalUpdateWithoutCampaignInput, HospitalUncheckedUpdateWithoutCampaignInput>
  }

  export type HospitalUpdateWithoutCampaignInput = {
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    Address?: AddressUpdateOneRequiredWithoutHospitalNestedInput
    HospitalSite?: HospitalSiteUpdateManyWithoutHospitalNestedInput
    Phone?: PhoneUpdateManyWithoutHospitalNestedInput
    Photo?: PhotoUpdateManyWithoutHospitalNestedInput
    Review?: ReviewUpdateManyWithoutHospitalNestedInput
    DonationBank?: DonationBankUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutCampaignInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    idAddress?: IntFieldUpdateOperationsInput | number
    HospitalSite?: HospitalSiteUncheckedUpdateManyWithoutHospitalNestedInput
    Phone?: PhoneUncheckedUpdateManyWithoutHospitalNestedInput
    Photo?: PhotoUncheckedUpdateManyWithoutHospitalNestedInput
    Review?: ReviewUncheckedUpdateManyWithoutHospitalNestedInput
    DonationBank?: DonationBankUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalCreateWithoutDonationBankInput = {
    name: string
    cnpj: string
    email: string
    websiteUrl?: string | null
    password: string
    Address: AddressCreateNestedOneWithoutHospitalInput
    HospitalSite?: HospitalSiteCreateNestedManyWithoutHospitalInput
    Phone?: PhoneCreateNestedManyWithoutHospitalInput
    Photo?: PhotoCreateNestedManyWithoutHospitalInput
    Review?: ReviewCreateNestedManyWithoutHospitalInput
    Campaign?: CampaignCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutDonationBankInput = {
    id?: number
    name: string
    cnpj: string
    email: string
    websiteUrl?: string | null
    password: string
    idAddress: number
    HospitalSite?: HospitalSiteUncheckedCreateNestedManyWithoutHospitalInput
    Phone?: PhoneUncheckedCreateNestedManyWithoutHospitalInput
    Photo?: PhotoUncheckedCreateNestedManyWithoutHospitalInput
    Review?: ReviewUncheckedCreateNestedManyWithoutHospitalInput
    Campaign?: CampaignUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutDonationBankInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutDonationBankInput, HospitalUncheckedCreateWithoutDonationBankInput>
  }

  export type BloodTypeCreateWithoutDonationBankInput = {
    type: string
    User?: UserCreateNestedManyWithoutBloodTypeInput
  }

  export type BloodTypeUncheckedCreateWithoutDonationBankInput = {
    id?: number
    type: string
    User?: UserUncheckedCreateNestedManyWithoutBloodTypeInput
  }

  export type BloodTypeCreateOrConnectWithoutDonationBankInput = {
    where: BloodTypeWhereUniqueInput
    create: XOR<BloodTypeCreateWithoutDonationBankInput, BloodTypeUncheckedCreateWithoutDonationBankInput>
  }

  export type HospitalUpsertWithoutDonationBankInput = {
    update: XOR<HospitalUpdateWithoutDonationBankInput, HospitalUncheckedUpdateWithoutDonationBankInput>
    create: XOR<HospitalCreateWithoutDonationBankInput, HospitalUncheckedCreateWithoutDonationBankInput>
    where?: HospitalWhereInput
  }

  export type HospitalUpdateToOneWithWhereWithoutDonationBankInput = {
    where?: HospitalWhereInput
    data: XOR<HospitalUpdateWithoutDonationBankInput, HospitalUncheckedUpdateWithoutDonationBankInput>
  }

  export type HospitalUpdateWithoutDonationBankInput = {
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    Address?: AddressUpdateOneRequiredWithoutHospitalNestedInput
    HospitalSite?: HospitalSiteUpdateManyWithoutHospitalNestedInput
    Phone?: PhoneUpdateManyWithoutHospitalNestedInput
    Photo?: PhotoUpdateManyWithoutHospitalNestedInput
    Review?: ReviewUpdateManyWithoutHospitalNestedInput
    Campaign?: CampaignUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutDonationBankInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    idAddress?: IntFieldUpdateOperationsInput | number
    HospitalSite?: HospitalSiteUncheckedUpdateManyWithoutHospitalNestedInput
    Phone?: PhoneUncheckedUpdateManyWithoutHospitalNestedInput
    Photo?: PhotoUncheckedUpdateManyWithoutHospitalNestedInput
    Review?: ReviewUncheckedUpdateManyWithoutHospitalNestedInput
    Campaign?: CampaignUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type BloodTypeUpsertWithoutDonationBankInput = {
    update: XOR<BloodTypeUpdateWithoutDonationBankInput, BloodTypeUncheckedUpdateWithoutDonationBankInput>
    create: XOR<BloodTypeCreateWithoutDonationBankInput, BloodTypeUncheckedCreateWithoutDonationBankInput>
    where?: BloodTypeWhereInput
  }

  export type BloodTypeUpdateToOneWithWhereWithoutDonationBankInput = {
    where?: BloodTypeWhereInput
    data: XOR<BloodTypeUpdateWithoutDonationBankInput, BloodTypeUncheckedUpdateWithoutDonationBankInput>
  }

  export type BloodTypeUpdateWithoutDonationBankInput = {
    type?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateManyWithoutBloodTypeNestedInput
  }

  export type BloodTypeUncheckedUpdateWithoutDonationBankInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    User?: UserUncheckedUpdateManyWithoutBloodTypeNestedInput
  }

  export type HospitalSiteCreateWithoutSiteInput = {
    Hospital: HospitalCreateNestedOneWithoutHospitalSiteInput
    BookSchedule?: BookScheduleCreateNestedManyWithoutHospitalSiteInput
  }

  export type HospitalSiteUncheckedCreateWithoutSiteInput = {
    id?: number
    idHospital: number
    BookSchedule?: BookScheduleUncheckedCreateNestedManyWithoutHospitalSiteInput
  }

  export type HospitalSiteCreateOrConnectWithoutSiteInput = {
    where: HospitalSiteWhereUniqueInput
    create: XOR<HospitalSiteCreateWithoutSiteInput, HospitalSiteUncheckedCreateWithoutSiteInput>
  }

  export type HospitalSiteCreateManySiteInputEnvelope = {
    data: HospitalSiteCreateManySiteInput | HospitalSiteCreateManySiteInput[]
    skipDuplicates?: boolean
  }

  export type HospitalSiteUpsertWithWhereUniqueWithoutSiteInput = {
    where: HospitalSiteWhereUniqueInput
    update: XOR<HospitalSiteUpdateWithoutSiteInput, HospitalSiteUncheckedUpdateWithoutSiteInput>
    create: XOR<HospitalSiteCreateWithoutSiteInput, HospitalSiteUncheckedCreateWithoutSiteInput>
  }

  export type HospitalSiteUpdateWithWhereUniqueWithoutSiteInput = {
    where: HospitalSiteWhereUniqueInput
    data: XOR<HospitalSiteUpdateWithoutSiteInput, HospitalSiteUncheckedUpdateWithoutSiteInput>
  }

  export type HospitalSiteUpdateManyWithWhereWithoutSiteInput = {
    where: HospitalSiteScalarWhereInput
    data: XOR<HospitalSiteUpdateManyMutationInput, HospitalSiteUncheckedUpdateManyWithoutSiteInput>
  }

  export type HospitalCreateWithoutHospitalSiteInput = {
    name: string
    cnpj: string
    email: string
    websiteUrl?: string | null
    password: string
    Address: AddressCreateNestedOneWithoutHospitalInput
    Phone?: PhoneCreateNestedManyWithoutHospitalInput
    Photo?: PhotoCreateNestedManyWithoutHospitalInput
    Review?: ReviewCreateNestedManyWithoutHospitalInput
    Campaign?: CampaignCreateNestedManyWithoutHospitalInput
    DonationBank?: DonationBankCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutHospitalSiteInput = {
    id?: number
    name: string
    cnpj: string
    email: string
    websiteUrl?: string | null
    password: string
    idAddress: number
    Phone?: PhoneUncheckedCreateNestedManyWithoutHospitalInput
    Photo?: PhotoUncheckedCreateNestedManyWithoutHospitalInput
    Review?: ReviewUncheckedCreateNestedManyWithoutHospitalInput
    Campaign?: CampaignUncheckedCreateNestedManyWithoutHospitalInput
    DonationBank?: DonationBankUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutHospitalSiteInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutHospitalSiteInput, HospitalUncheckedCreateWithoutHospitalSiteInput>
  }

  export type SiteCreateWithoutHospitalSiteInput = {
    site?: string | null
  }

  export type SiteUncheckedCreateWithoutHospitalSiteInput = {
    id?: number
    site?: string | null
  }

  export type SiteCreateOrConnectWithoutHospitalSiteInput = {
    where: SiteWhereUniqueInput
    create: XOR<SiteCreateWithoutHospitalSiteInput, SiteUncheckedCreateWithoutHospitalSiteInput>
  }

  export type BookScheduleCreateWithoutHospitalSiteInput = {
    date: Date | string
    hour: Date | string
    Schedule?: ScheduleCreateNestedManyWithoutBookScheduleInput
  }

  export type BookScheduleUncheckedCreateWithoutHospitalSiteInput = {
    id?: number
    date: Date | string
    hour: Date | string
    Schedule?: ScheduleUncheckedCreateNestedManyWithoutBookScheduleInput
  }

  export type BookScheduleCreateOrConnectWithoutHospitalSiteInput = {
    where: BookScheduleWhereUniqueInput
    create: XOR<BookScheduleCreateWithoutHospitalSiteInput, BookScheduleUncheckedCreateWithoutHospitalSiteInput>
  }

  export type BookScheduleCreateManyHospitalSiteInputEnvelope = {
    data: BookScheduleCreateManyHospitalSiteInput | BookScheduleCreateManyHospitalSiteInput[]
    skipDuplicates?: boolean
  }

  export type HospitalUpsertWithoutHospitalSiteInput = {
    update: XOR<HospitalUpdateWithoutHospitalSiteInput, HospitalUncheckedUpdateWithoutHospitalSiteInput>
    create: XOR<HospitalCreateWithoutHospitalSiteInput, HospitalUncheckedCreateWithoutHospitalSiteInput>
    where?: HospitalWhereInput
  }

  export type HospitalUpdateToOneWithWhereWithoutHospitalSiteInput = {
    where?: HospitalWhereInput
    data: XOR<HospitalUpdateWithoutHospitalSiteInput, HospitalUncheckedUpdateWithoutHospitalSiteInput>
  }

  export type HospitalUpdateWithoutHospitalSiteInput = {
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    Address?: AddressUpdateOneRequiredWithoutHospitalNestedInput
    Phone?: PhoneUpdateManyWithoutHospitalNestedInput
    Photo?: PhotoUpdateManyWithoutHospitalNestedInput
    Review?: ReviewUpdateManyWithoutHospitalNestedInput
    Campaign?: CampaignUpdateManyWithoutHospitalNestedInput
    DonationBank?: DonationBankUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutHospitalSiteInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    idAddress?: IntFieldUpdateOperationsInput | number
    Phone?: PhoneUncheckedUpdateManyWithoutHospitalNestedInput
    Photo?: PhotoUncheckedUpdateManyWithoutHospitalNestedInput
    Review?: ReviewUncheckedUpdateManyWithoutHospitalNestedInput
    Campaign?: CampaignUncheckedUpdateManyWithoutHospitalNestedInput
    DonationBank?: DonationBankUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type SiteUpsertWithoutHospitalSiteInput = {
    update: XOR<SiteUpdateWithoutHospitalSiteInput, SiteUncheckedUpdateWithoutHospitalSiteInput>
    create: XOR<SiteCreateWithoutHospitalSiteInput, SiteUncheckedCreateWithoutHospitalSiteInput>
    where?: SiteWhereInput
  }

  export type SiteUpdateToOneWithWhereWithoutHospitalSiteInput = {
    where?: SiteWhereInput
    data: XOR<SiteUpdateWithoutHospitalSiteInput, SiteUncheckedUpdateWithoutHospitalSiteInput>
  }

  export type SiteUpdateWithoutHospitalSiteInput = {
    site?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SiteUncheckedUpdateWithoutHospitalSiteInput = {
    id?: IntFieldUpdateOperationsInput | number
    site?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BookScheduleUpsertWithWhereUniqueWithoutHospitalSiteInput = {
    where: BookScheduleWhereUniqueInput
    update: XOR<BookScheduleUpdateWithoutHospitalSiteInput, BookScheduleUncheckedUpdateWithoutHospitalSiteInput>
    create: XOR<BookScheduleCreateWithoutHospitalSiteInput, BookScheduleUncheckedCreateWithoutHospitalSiteInput>
  }

  export type BookScheduleUpdateWithWhereUniqueWithoutHospitalSiteInput = {
    where: BookScheduleWhereUniqueInput
    data: XOR<BookScheduleUpdateWithoutHospitalSiteInput, BookScheduleUncheckedUpdateWithoutHospitalSiteInput>
  }

  export type BookScheduleUpdateManyWithWhereWithoutHospitalSiteInput = {
    where: BookScheduleScalarWhereInput
    data: XOR<BookScheduleUpdateManyMutationInput, BookScheduleUncheckedUpdateManyWithoutHospitalSiteInput>
  }

  export type BookScheduleScalarWhereInput = {
    AND?: BookScheduleScalarWhereInput | BookScheduleScalarWhereInput[]
    OR?: BookScheduleScalarWhereInput[]
    NOT?: BookScheduleScalarWhereInput | BookScheduleScalarWhereInput[]
    id?: IntFilter<"BookSchedule"> | number
    date?: DateTimeFilter<"BookSchedule"> | Date | string
    hour?: DateTimeFilter<"BookSchedule"> | Date | string
    idHospitalSite?: IntFilter<"BookSchedule"> | number
  }

  export type HospitalCreateWithoutPhoneInput = {
    name: string
    cnpj: string
    email: string
    websiteUrl?: string | null
    password: string
    Address: AddressCreateNestedOneWithoutHospitalInput
    HospitalSite?: HospitalSiteCreateNestedManyWithoutHospitalInput
    Photo?: PhotoCreateNestedManyWithoutHospitalInput
    Review?: ReviewCreateNestedManyWithoutHospitalInput
    Campaign?: CampaignCreateNestedManyWithoutHospitalInput
    DonationBank?: DonationBankCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutPhoneInput = {
    id?: number
    name: string
    cnpj: string
    email: string
    websiteUrl?: string | null
    password: string
    idAddress: number
    HospitalSite?: HospitalSiteUncheckedCreateNestedManyWithoutHospitalInput
    Photo?: PhotoUncheckedCreateNestedManyWithoutHospitalInput
    Review?: ReviewUncheckedCreateNestedManyWithoutHospitalInput
    Campaign?: CampaignUncheckedCreateNestedManyWithoutHospitalInput
    DonationBank?: DonationBankUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutPhoneInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutPhoneInput, HospitalUncheckedCreateWithoutPhoneInput>
  }

  export type HospitalUpsertWithoutPhoneInput = {
    update: XOR<HospitalUpdateWithoutPhoneInput, HospitalUncheckedUpdateWithoutPhoneInput>
    create: XOR<HospitalCreateWithoutPhoneInput, HospitalUncheckedCreateWithoutPhoneInput>
    where?: HospitalWhereInput
  }

  export type HospitalUpdateToOneWithWhereWithoutPhoneInput = {
    where?: HospitalWhereInput
    data: XOR<HospitalUpdateWithoutPhoneInput, HospitalUncheckedUpdateWithoutPhoneInput>
  }

  export type HospitalUpdateWithoutPhoneInput = {
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    Address?: AddressUpdateOneRequiredWithoutHospitalNestedInput
    HospitalSite?: HospitalSiteUpdateManyWithoutHospitalNestedInput
    Photo?: PhotoUpdateManyWithoutHospitalNestedInput
    Review?: ReviewUpdateManyWithoutHospitalNestedInput
    Campaign?: CampaignUpdateManyWithoutHospitalNestedInput
    DonationBank?: DonationBankUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutPhoneInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    idAddress?: IntFieldUpdateOperationsInput | number
    HospitalSite?: HospitalSiteUncheckedUpdateManyWithoutHospitalNestedInput
    Photo?: PhotoUncheckedUpdateManyWithoutHospitalNestedInput
    Review?: ReviewUncheckedUpdateManyWithoutHospitalNestedInput
    Campaign?: CampaignUncheckedUpdateManyWithoutHospitalNestedInput
    DonationBank?: DonationBankUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalCreateWithoutPhotoInput = {
    name: string
    cnpj: string
    email: string
    websiteUrl?: string | null
    password: string
    Address: AddressCreateNestedOneWithoutHospitalInput
    HospitalSite?: HospitalSiteCreateNestedManyWithoutHospitalInput
    Phone?: PhoneCreateNestedManyWithoutHospitalInput
    Review?: ReviewCreateNestedManyWithoutHospitalInput
    Campaign?: CampaignCreateNestedManyWithoutHospitalInput
    DonationBank?: DonationBankCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutPhotoInput = {
    id?: number
    name: string
    cnpj: string
    email: string
    websiteUrl?: string | null
    password: string
    idAddress: number
    HospitalSite?: HospitalSiteUncheckedCreateNestedManyWithoutHospitalInput
    Phone?: PhoneUncheckedCreateNestedManyWithoutHospitalInput
    Review?: ReviewUncheckedCreateNestedManyWithoutHospitalInput
    Campaign?: CampaignUncheckedCreateNestedManyWithoutHospitalInput
    DonationBank?: DonationBankUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutPhotoInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutPhotoInput, HospitalUncheckedCreateWithoutPhotoInput>
  }

  export type HospitalUpsertWithoutPhotoInput = {
    update: XOR<HospitalUpdateWithoutPhotoInput, HospitalUncheckedUpdateWithoutPhotoInput>
    create: XOR<HospitalCreateWithoutPhotoInput, HospitalUncheckedCreateWithoutPhotoInput>
    where?: HospitalWhereInput
  }

  export type HospitalUpdateToOneWithWhereWithoutPhotoInput = {
    where?: HospitalWhereInput
    data: XOR<HospitalUpdateWithoutPhotoInput, HospitalUncheckedUpdateWithoutPhotoInput>
  }

  export type HospitalUpdateWithoutPhotoInput = {
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    Address?: AddressUpdateOneRequiredWithoutHospitalNestedInput
    HospitalSite?: HospitalSiteUpdateManyWithoutHospitalNestedInput
    Phone?: PhoneUpdateManyWithoutHospitalNestedInput
    Review?: ReviewUpdateManyWithoutHospitalNestedInput
    Campaign?: CampaignUpdateManyWithoutHospitalNestedInput
    DonationBank?: DonationBankUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutPhotoInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    idAddress?: IntFieldUpdateOperationsInput | number
    HospitalSite?: HospitalSiteUncheckedUpdateManyWithoutHospitalNestedInput
    Phone?: PhoneUncheckedUpdateManyWithoutHospitalNestedInput
    Review?: ReviewUncheckedUpdateManyWithoutHospitalNestedInput
    Campaign?: CampaignUncheckedUpdateManyWithoutHospitalNestedInput
    DonationBank?: DonationBankUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type ReviewCreateWithoutStarInput = {
    opinion: string
    date?: Date | string
    User: UserCreateNestedOneWithoutReviewInput
    Hospital: HospitalCreateNestedOneWithoutReviewInput
  }

  export type ReviewUncheckedCreateWithoutStarInput = {
    id?: number
    opinion: string
    date?: Date | string
    idUser: number
    idHospital: number
  }

  export type ReviewCreateOrConnectWithoutStarInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutStarInput, ReviewUncheckedCreateWithoutStarInput>
  }

  export type ReviewCreateManyStarInputEnvelope = {
    data: ReviewCreateManyStarInput | ReviewCreateManyStarInput[]
    skipDuplicates?: boolean
  }

  export type ReviewUpsertWithWhereUniqueWithoutStarInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutStarInput, ReviewUncheckedUpdateWithoutStarInput>
    create: XOR<ReviewCreateWithoutStarInput, ReviewUncheckedCreateWithoutStarInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutStarInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutStarInput, ReviewUncheckedUpdateWithoutStarInput>
  }

  export type ReviewUpdateManyWithWhereWithoutStarInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutStarInput>
  }

  export type UserCreateWithoutReviewInput = {
    name: string
    cpf: string
    dateOfBirth: Date | string
    password: string
    weight: Decimal | DecimalJsLike | number | string
    email: string
    photoUrl?: string | null
    phone: string
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    Address: AddressCreateNestedOneWithoutUserInput
    Sex: SexCreateNestedOneWithoutUserInput
    BloodType?: BloodTypeCreateNestedOneWithoutUserInput
    Schedule?: ScheduleCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReviewInput = {
    id?: number
    name: string
    cpf: string
    dateOfBirth: Date | string
    password: string
    weight: Decimal | DecimalJsLike | number | string
    email: string
    photoUrl?: string | null
    phone: string
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    idAddress: number
    idSex: number
    idBloodType?: number
    Schedule?: ScheduleUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReviewInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReviewInput, UserUncheckedCreateWithoutReviewInput>
  }

  export type HospitalCreateWithoutReviewInput = {
    name: string
    cnpj: string
    email: string
    websiteUrl?: string | null
    password: string
    Address: AddressCreateNestedOneWithoutHospitalInput
    HospitalSite?: HospitalSiteCreateNestedManyWithoutHospitalInput
    Phone?: PhoneCreateNestedManyWithoutHospitalInput
    Photo?: PhotoCreateNestedManyWithoutHospitalInput
    Campaign?: CampaignCreateNestedManyWithoutHospitalInput
    DonationBank?: DonationBankCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutReviewInput = {
    id?: number
    name: string
    cnpj: string
    email: string
    websiteUrl?: string | null
    password: string
    idAddress: number
    HospitalSite?: HospitalSiteUncheckedCreateNestedManyWithoutHospitalInput
    Phone?: PhoneUncheckedCreateNestedManyWithoutHospitalInput
    Photo?: PhotoUncheckedCreateNestedManyWithoutHospitalInput
    Campaign?: CampaignUncheckedCreateNestedManyWithoutHospitalInput
    DonationBank?: DonationBankUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutReviewInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutReviewInput, HospitalUncheckedCreateWithoutReviewInput>
  }

  export type StarCreateWithoutReviewInput = {
    starNumber: number
  }

  export type StarUncheckedCreateWithoutReviewInput = {
    id?: number
    starNumber: number
  }

  export type StarCreateOrConnectWithoutReviewInput = {
    where: StarWhereUniqueInput
    create: XOR<StarCreateWithoutReviewInput, StarUncheckedCreateWithoutReviewInput>
  }

  export type UserUpsertWithoutReviewInput = {
    update: XOR<UserUpdateWithoutReviewInput, UserUncheckedUpdateWithoutReviewInput>
    create: XOR<UserCreateWithoutReviewInput, UserUncheckedCreateWithoutReviewInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReviewInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReviewInput, UserUncheckedUpdateWithoutReviewInput>
  }

  export type UserUpdateWithoutReviewInput = {
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    weight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    email?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Address?: AddressUpdateOneRequiredWithoutUserNestedInput
    Sex?: SexUpdateOneRequiredWithoutUserNestedInput
    BloodType?: BloodTypeUpdateOneRequiredWithoutUserNestedInput
    Schedule?: ScheduleUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    weight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    email?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idAddress?: IntFieldUpdateOperationsInput | number
    idSex?: IntFieldUpdateOperationsInput | number
    idBloodType?: IntFieldUpdateOperationsInput | number
    Schedule?: ScheduleUncheckedUpdateManyWithoutUserNestedInput
  }

  export type HospitalUpsertWithoutReviewInput = {
    update: XOR<HospitalUpdateWithoutReviewInput, HospitalUncheckedUpdateWithoutReviewInput>
    create: XOR<HospitalCreateWithoutReviewInput, HospitalUncheckedCreateWithoutReviewInput>
    where?: HospitalWhereInput
  }

  export type HospitalUpdateToOneWithWhereWithoutReviewInput = {
    where?: HospitalWhereInput
    data: XOR<HospitalUpdateWithoutReviewInput, HospitalUncheckedUpdateWithoutReviewInput>
  }

  export type HospitalUpdateWithoutReviewInput = {
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    Address?: AddressUpdateOneRequiredWithoutHospitalNestedInput
    HospitalSite?: HospitalSiteUpdateManyWithoutHospitalNestedInput
    Phone?: PhoneUpdateManyWithoutHospitalNestedInput
    Photo?: PhotoUpdateManyWithoutHospitalNestedInput
    Campaign?: CampaignUpdateManyWithoutHospitalNestedInput
    DonationBank?: DonationBankUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutReviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    idAddress?: IntFieldUpdateOperationsInput | number
    HospitalSite?: HospitalSiteUncheckedUpdateManyWithoutHospitalNestedInput
    Phone?: PhoneUncheckedUpdateManyWithoutHospitalNestedInput
    Photo?: PhotoUncheckedUpdateManyWithoutHospitalNestedInput
    Campaign?: CampaignUncheckedUpdateManyWithoutHospitalNestedInput
    DonationBank?: DonationBankUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type StarUpsertWithoutReviewInput = {
    update: XOR<StarUpdateWithoutReviewInput, StarUncheckedUpdateWithoutReviewInput>
    create: XOR<StarCreateWithoutReviewInput, StarUncheckedCreateWithoutReviewInput>
    where?: StarWhereInput
  }

  export type StarUpdateToOneWithWhereWithoutReviewInput = {
    where?: StarWhereInput
    data: XOR<StarUpdateWithoutReviewInput, StarUncheckedUpdateWithoutReviewInput>
  }

  export type StarUpdateWithoutReviewInput = {
    starNumber?: IntFieldUpdateOperationsInput | number
  }

  export type StarUncheckedUpdateWithoutReviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    starNumber?: IntFieldUpdateOperationsInput | number
  }

  export type ScheduleStatusCreateWithoutStatusInput = {
    observation?: string | null
    Schedule: ScheduleCreateNestedOneWithoutScheduleStatusInput
  }

  export type ScheduleStatusUncheckedCreateWithoutStatusInput = {
    id?: number
    observation?: string | null
    idSchedule: number
  }

  export type ScheduleStatusCreateOrConnectWithoutStatusInput = {
    where: ScheduleStatusWhereUniqueInput
    create: XOR<ScheduleStatusCreateWithoutStatusInput, ScheduleStatusUncheckedCreateWithoutStatusInput>
  }

  export type ScheduleStatusCreateManyStatusInputEnvelope = {
    data: ScheduleStatusCreateManyStatusInput | ScheduleStatusCreateManyStatusInput[]
    skipDuplicates?: boolean
  }

  export type ScheduleStatusUpsertWithWhereUniqueWithoutStatusInput = {
    where: ScheduleStatusWhereUniqueInput
    update: XOR<ScheduleStatusUpdateWithoutStatusInput, ScheduleStatusUncheckedUpdateWithoutStatusInput>
    create: XOR<ScheduleStatusCreateWithoutStatusInput, ScheduleStatusUncheckedCreateWithoutStatusInput>
  }

  export type ScheduleStatusUpdateWithWhereUniqueWithoutStatusInput = {
    where: ScheduleStatusWhereUniqueInput
    data: XOR<ScheduleStatusUpdateWithoutStatusInput, ScheduleStatusUncheckedUpdateWithoutStatusInput>
  }

  export type ScheduleStatusUpdateManyWithWhereWithoutStatusInput = {
    where: ScheduleStatusScalarWhereInput
    data: XOR<ScheduleStatusUpdateManyMutationInput, ScheduleStatusUncheckedUpdateManyWithoutStatusInput>
  }

  export type ScheduleStatusScalarWhereInput = {
    AND?: ScheduleStatusScalarWhereInput | ScheduleStatusScalarWhereInput[]
    OR?: ScheduleStatusScalarWhereInput[]
    NOT?: ScheduleStatusScalarWhereInput | ScheduleStatusScalarWhereInput[]
    id?: IntFilter<"ScheduleStatus"> | number
    observation?: StringNullableFilter<"ScheduleStatus"> | string | null
    idSchedule?: IntFilter<"ScheduleStatus"> | number
    idStatus?: IntFilter<"ScheduleStatus"> | number
  }

  export type HospitalSiteCreateWithoutBookScheduleInput = {
    Hospital: HospitalCreateNestedOneWithoutHospitalSiteInput
    Site: SiteCreateNestedOneWithoutHospitalSiteInput
  }

  export type HospitalSiteUncheckedCreateWithoutBookScheduleInput = {
    id?: number
    idHospital: number
    idSite: number
  }

  export type HospitalSiteCreateOrConnectWithoutBookScheduleInput = {
    where: HospitalSiteWhereUniqueInput
    create: XOR<HospitalSiteCreateWithoutBookScheduleInput, HospitalSiteUncheckedCreateWithoutBookScheduleInput>
  }

  export type ScheduleCreateWithoutBookScheduleInput = {
    User: UserCreateNestedOneWithoutScheduleInput
    ScheduleStatus?: ScheduleStatusCreateNestedManyWithoutScheduleInput
  }

  export type ScheduleUncheckedCreateWithoutBookScheduleInput = {
    id?: number
    idUser: number
    ScheduleStatus?: ScheduleStatusUncheckedCreateNestedManyWithoutScheduleInput
  }

  export type ScheduleCreateOrConnectWithoutBookScheduleInput = {
    where: ScheduleWhereUniqueInput
    create: XOR<ScheduleCreateWithoutBookScheduleInput, ScheduleUncheckedCreateWithoutBookScheduleInput>
  }

  export type ScheduleCreateManyBookScheduleInputEnvelope = {
    data: ScheduleCreateManyBookScheduleInput | ScheduleCreateManyBookScheduleInput[]
    skipDuplicates?: boolean
  }

  export type HospitalSiteUpsertWithoutBookScheduleInput = {
    update: XOR<HospitalSiteUpdateWithoutBookScheduleInput, HospitalSiteUncheckedUpdateWithoutBookScheduleInput>
    create: XOR<HospitalSiteCreateWithoutBookScheduleInput, HospitalSiteUncheckedCreateWithoutBookScheduleInput>
    where?: HospitalSiteWhereInput
  }

  export type HospitalSiteUpdateToOneWithWhereWithoutBookScheduleInput = {
    where?: HospitalSiteWhereInput
    data: XOR<HospitalSiteUpdateWithoutBookScheduleInput, HospitalSiteUncheckedUpdateWithoutBookScheduleInput>
  }

  export type HospitalSiteUpdateWithoutBookScheduleInput = {
    Hospital?: HospitalUpdateOneRequiredWithoutHospitalSiteNestedInput
    Site?: SiteUpdateOneRequiredWithoutHospitalSiteNestedInput
  }

  export type HospitalSiteUncheckedUpdateWithoutBookScheduleInput = {
    id?: IntFieldUpdateOperationsInput | number
    idHospital?: IntFieldUpdateOperationsInput | number
    idSite?: IntFieldUpdateOperationsInput | number
  }

  export type ScheduleUpsertWithWhereUniqueWithoutBookScheduleInput = {
    where: ScheduleWhereUniqueInput
    update: XOR<ScheduleUpdateWithoutBookScheduleInput, ScheduleUncheckedUpdateWithoutBookScheduleInput>
    create: XOR<ScheduleCreateWithoutBookScheduleInput, ScheduleUncheckedCreateWithoutBookScheduleInput>
  }

  export type ScheduleUpdateWithWhereUniqueWithoutBookScheduleInput = {
    where: ScheduleWhereUniqueInput
    data: XOR<ScheduleUpdateWithoutBookScheduleInput, ScheduleUncheckedUpdateWithoutBookScheduleInput>
  }

  export type ScheduleUpdateManyWithWhereWithoutBookScheduleInput = {
    where: ScheduleScalarWhereInput
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyWithoutBookScheduleInput>
  }

  export type UserCreateWithoutScheduleInput = {
    name: string
    cpf: string
    dateOfBirth: Date | string
    password: string
    weight: Decimal | DecimalJsLike | number | string
    email: string
    photoUrl?: string | null
    phone: string
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    Address: AddressCreateNestedOneWithoutUserInput
    Sex: SexCreateNestedOneWithoutUserInput
    BloodType?: BloodTypeCreateNestedOneWithoutUserInput
    Review?: ReviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutScheduleInput = {
    id?: number
    name: string
    cpf: string
    dateOfBirth: Date | string
    password: string
    weight: Decimal | DecimalJsLike | number | string
    email: string
    photoUrl?: string | null
    phone: string
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    idAddress: number
    idSex: number
    idBloodType?: number
    Review?: ReviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutScheduleInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutScheduleInput, UserUncheckedCreateWithoutScheduleInput>
  }

  export type BookScheduleCreateWithoutScheduleInput = {
    date: Date | string
    hour: Date | string
    HospitalSite: HospitalSiteCreateNestedOneWithoutBookScheduleInput
  }

  export type BookScheduleUncheckedCreateWithoutScheduleInput = {
    id?: number
    date: Date | string
    hour: Date | string
    idHospitalSite: number
  }

  export type BookScheduleCreateOrConnectWithoutScheduleInput = {
    where: BookScheduleWhereUniqueInput
    create: XOR<BookScheduleCreateWithoutScheduleInput, BookScheduleUncheckedCreateWithoutScheduleInput>
  }

  export type ScheduleStatusCreateWithoutScheduleInput = {
    observation?: string | null
    Status: StatusCreateNestedOneWithoutScheduleStatusInput
  }

  export type ScheduleStatusUncheckedCreateWithoutScheduleInput = {
    id?: number
    observation?: string | null
    idStatus: number
  }

  export type ScheduleStatusCreateOrConnectWithoutScheduleInput = {
    where: ScheduleStatusWhereUniqueInput
    create: XOR<ScheduleStatusCreateWithoutScheduleInput, ScheduleStatusUncheckedCreateWithoutScheduleInput>
  }

  export type ScheduleStatusCreateManyScheduleInputEnvelope = {
    data: ScheduleStatusCreateManyScheduleInput | ScheduleStatusCreateManyScheduleInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutScheduleInput = {
    update: XOR<UserUpdateWithoutScheduleInput, UserUncheckedUpdateWithoutScheduleInput>
    create: XOR<UserCreateWithoutScheduleInput, UserUncheckedCreateWithoutScheduleInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutScheduleInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutScheduleInput, UserUncheckedUpdateWithoutScheduleInput>
  }

  export type UserUpdateWithoutScheduleInput = {
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    weight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    email?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Address?: AddressUpdateOneRequiredWithoutUserNestedInput
    Sex?: SexUpdateOneRequiredWithoutUserNestedInput
    BloodType?: BloodTypeUpdateOneRequiredWithoutUserNestedInput
    Review?: ReviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutScheduleInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    weight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    email?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idAddress?: IntFieldUpdateOperationsInput | number
    idSex?: IntFieldUpdateOperationsInput | number
    idBloodType?: IntFieldUpdateOperationsInput | number
    Review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BookScheduleUpsertWithoutScheduleInput = {
    update: XOR<BookScheduleUpdateWithoutScheduleInput, BookScheduleUncheckedUpdateWithoutScheduleInput>
    create: XOR<BookScheduleCreateWithoutScheduleInput, BookScheduleUncheckedCreateWithoutScheduleInput>
    where?: BookScheduleWhereInput
  }

  export type BookScheduleUpdateToOneWithWhereWithoutScheduleInput = {
    where?: BookScheduleWhereInput
    data: XOR<BookScheduleUpdateWithoutScheduleInput, BookScheduleUncheckedUpdateWithoutScheduleInput>
  }

  export type BookScheduleUpdateWithoutScheduleInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hour?: DateTimeFieldUpdateOperationsInput | Date | string
    HospitalSite?: HospitalSiteUpdateOneRequiredWithoutBookScheduleNestedInput
  }

  export type BookScheduleUncheckedUpdateWithoutScheduleInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hour?: DateTimeFieldUpdateOperationsInput | Date | string
    idHospitalSite?: IntFieldUpdateOperationsInput | number
  }

  export type ScheduleStatusUpsertWithWhereUniqueWithoutScheduleInput = {
    where: ScheduleStatusWhereUniqueInput
    update: XOR<ScheduleStatusUpdateWithoutScheduleInput, ScheduleStatusUncheckedUpdateWithoutScheduleInput>
    create: XOR<ScheduleStatusCreateWithoutScheduleInput, ScheduleStatusUncheckedCreateWithoutScheduleInput>
  }

  export type ScheduleStatusUpdateWithWhereUniqueWithoutScheduleInput = {
    where: ScheduleStatusWhereUniqueInput
    data: XOR<ScheduleStatusUpdateWithoutScheduleInput, ScheduleStatusUncheckedUpdateWithoutScheduleInput>
  }

  export type ScheduleStatusUpdateManyWithWhereWithoutScheduleInput = {
    where: ScheduleStatusScalarWhereInput
    data: XOR<ScheduleStatusUpdateManyMutationInput, ScheduleStatusUncheckedUpdateManyWithoutScheduleInput>
  }

  export type ScheduleCreateWithoutScheduleStatusInput = {
    User: UserCreateNestedOneWithoutScheduleInput
    BookSchedule: BookScheduleCreateNestedOneWithoutScheduleInput
  }

  export type ScheduleUncheckedCreateWithoutScheduleStatusInput = {
    id?: number
    idUser: number
    idBookSchedule: number
  }

  export type ScheduleCreateOrConnectWithoutScheduleStatusInput = {
    where: ScheduleWhereUniqueInput
    create: XOR<ScheduleCreateWithoutScheduleStatusInput, ScheduleUncheckedCreateWithoutScheduleStatusInput>
  }

  export type StatusCreateWithoutScheduleStatusInput = {
    status: $Enums.STATUS
  }

  export type StatusUncheckedCreateWithoutScheduleStatusInput = {
    id?: number
    status: $Enums.STATUS
  }

  export type StatusCreateOrConnectWithoutScheduleStatusInput = {
    where: StatusWhereUniqueInput
    create: XOR<StatusCreateWithoutScheduleStatusInput, StatusUncheckedCreateWithoutScheduleStatusInput>
  }

  export type ScheduleUpsertWithoutScheduleStatusInput = {
    update: XOR<ScheduleUpdateWithoutScheduleStatusInput, ScheduleUncheckedUpdateWithoutScheduleStatusInput>
    create: XOR<ScheduleCreateWithoutScheduleStatusInput, ScheduleUncheckedCreateWithoutScheduleStatusInput>
    where?: ScheduleWhereInput
  }

  export type ScheduleUpdateToOneWithWhereWithoutScheduleStatusInput = {
    where?: ScheduleWhereInput
    data: XOR<ScheduleUpdateWithoutScheduleStatusInput, ScheduleUncheckedUpdateWithoutScheduleStatusInput>
  }

  export type ScheduleUpdateWithoutScheduleStatusInput = {
    User?: UserUpdateOneRequiredWithoutScheduleNestedInput
    BookSchedule?: BookScheduleUpdateOneRequiredWithoutScheduleNestedInput
  }

  export type ScheduleUncheckedUpdateWithoutScheduleStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    idUser?: IntFieldUpdateOperationsInput | number
    idBookSchedule?: IntFieldUpdateOperationsInput | number
  }

  export type StatusUpsertWithoutScheduleStatusInput = {
    update: XOR<StatusUpdateWithoutScheduleStatusInput, StatusUncheckedUpdateWithoutScheduleStatusInput>
    create: XOR<StatusCreateWithoutScheduleStatusInput, StatusUncheckedCreateWithoutScheduleStatusInput>
    where?: StatusWhereInput
  }

  export type StatusUpdateToOneWithWhereWithoutScheduleStatusInput = {
    where?: StatusWhereInput
    data: XOR<StatusUpdateWithoutScheduleStatusInput, StatusUncheckedUpdateWithoutScheduleStatusInput>
  }

  export type StatusUpdateWithoutScheduleStatusInput = {
    status?: EnumSTATUSFieldUpdateOperationsInput | $Enums.STATUS
  }

  export type StatusUncheckedUpdateWithoutScheduleStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: EnumSTATUSFieldUpdateOperationsInput | $Enums.STATUS
  }

  export type UserCreateManyBloodTypeInput = {
    id?: number
    name: string
    cpf: string
    dateOfBirth: Date | string
    password: string
    weight: Decimal | DecimalJsLike | number | string
    email: string
    photoUrl?: string | null
    phone: string
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    idAddress: number
    idSex: number
  }

  export type DonationBankCreateManyBloodTypeInput = {
    id?: number
    year: number
    bloodMl: Decimal | DecimalJsLike | number | string
    idHospital: number
  }

  export type UserUpdateWithoutBloodTypeInput = {
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    weight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    email?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Address?: AddressUpdateOneRequiredWithoutUserNestedInput
    Sex?: SexUpdateOneRequiredWithoutUserNestedInput
    Review?: ReviewUpdateManyWithoutUserNestedInput
    Schedule?: ScheduleUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBloodTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    weight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    email?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idAddress?: IntFieldUpdateOperationsInput | number
    idSex?: IntFieldUpdateOperationsInput | number
    Review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    Schedule?: ScheduleUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutBloodTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    weight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    email?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idAddress?: IntFieldUpdateOperationsInput | number
    idSex?: IntFieldUpdateOperationsInput | number
  }

  export type DonationBankUpdateWithoutBloodTypeInput = {
    year?: IntFieldUpdateOperationsInput | number
    bloodMl?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Hospital?: HospitalUpdateOneRequiredWithoutDonationBankNestedInput
  }

  export type DonationBankUncheckedUpdateWithoutBloodTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    bloodMl?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    idHospital?: IntFieldUpdateOperationsInput | number
  }

  export type DonationBankUncheckedUpdateManyWithoutBloodTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    bloodMl?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    idHospital?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateManySexInput = {
    id?: number
    name: string
    cpf: string
    dateOfBirth: Date | string
    password: string
    weight: Decimal | DecimalJsLike | number | string
    email: string
    photoUrl?: string | null
    phone: string
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    idAddress: number
    idBloodType?: number
  }

  export type UserUpdateWithoutSexInput = {
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    weight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    email?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Address?: AddressUpdateOneRequiredWithoutUserNestedInput
    BloodType?: BloodTypeUpdateOneRequiredWithoutUserNestedInput
    Review?: ReviewUpdateManyWithoutUserNestedInput
    Schedule?: ScheduleUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSexInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    weight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    email?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idAddress?: IntFieldUpdateOperationsInput | number
    idBloodType?: IntFieldUpdateOperationsInput | number
    Review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    Schedule?: ScheduleUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutSexInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    weight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    email?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idAddress?: IntFieldUpdateOperationsInput | number
    idBloodType?: IntFieldUpdateOperationsInput | number
  }

  export type HospitalCreateManyAddressInput = {
    id?: number
    name: string
    cnpj: string
    email: string
    websiteUrl?: string | null
    password: string
  }

  export type UserCreateManyAddressInput = {
    id?: number
    name: string
    cpf: string
    dateOfBirth: Date | string
    password: string
    weight: Decimal | DecimalJsLike | number | string
    email: string
    photoUrl?: string | null
    phone: string
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    idSex: number
    idBloodType?: number
  }

  export type HospitalUpdateWithoutAddressInput = {
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    HospitalSite?: HospitalSiteUpdateManyWithoutHospitalNestedInput
    Phone?: PhoneUpdateManyWithoutHospitalNestedInput
    Photo?: PhotoUpdateManyWithoutHospitalNestedInput
    Review?: ReviewUpdateManyWithoutHospitalNestedInput
    Campaign?: CampaignUpdateManyWithoutHospitalNestedInput
    DonationBank?: DonationBankUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutAddressInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    HospitalSite?: HospitalSiteUncheckedUpdateManyWithoutHospitalNestedInput
    Phone?: PhoneUncheckedUpdateManyWithoutHospitalNestedInput
    Photo?: PhotoUncheckedUpdateManyWithoutHospitalNestedInput
    Review?: ReviewUncheckedUpdateManyWithoutHospitalNestedInput
    Campaign?: CampaignUncheckedUpdateManyWithoutHospitalNestedInput
    DonationBank?: DonationBankUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateManyWithoutAddressInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpdateWithoutAddressInput = {
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    weight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    email?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Sex?: SexUpdateOneRequiredWithoutUserNestedInput
    BloodType?: BloodTypeUpdateOneRequiredWithoutUserNestedInput
    Review?: ReviewUpdateManyWithoutUserNestedInput
    Schedule?: ScheduleUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAddressInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    weight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    email?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idSex?: IntFieldUpdateOperationsInput | number
    idBloodType?: IntFieldUpdateOperationsInput | number
    Review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    Schedule?: ScheduleUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutAddressInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    weight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    email?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idSex?: IntFieldUpdateOperationsInput | number
    idBloodType?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewCreateManyUserInput = {
    id?: number
    opinion: string
    date?: Date | string
    idHospital: number
    idStar: number
  }

  export type ScheduleCreateManyUserInput = {
    id?: number
    idBookSchedule: number
  }

  export type ReviewUpdateWithoutUserInput = {
    opinion?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    Hospital?: HospitalUpdateOneRequiredWithoutReviewNestedInput
    Star?: StarUpdateOneRequiredWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    opinion?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    idHospital?: IntFieldUpdateOperationsInput | number
    idStar?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    opinion?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    idHospital?: IntFieldUpdateOperationsInput | number
    idStar?: IntFieldUpdateOperationsInput | number
  }

  export type ScheduleUpdateWithoutUserInput = {
    BookSchedule?: BookScheduleUpdateOneRequiredWithoutScheduleNestedInput
    ScheduleStatus?: ScheduleStatusUpdateManyWithoutScheduleNestedInput
  }

  export type ScheduleUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    idBookSchedule?: IntFieldUpdateOperationsInput | number
    ScheduleStatus?: ScheduleStatusUncheckedUpdateManyWithoutScheduleNestedInput
  }

  export type ScheduleUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    idBookSchedule?: IntFieldUpdateOperationsInput | number
  }

  export type HospitalSiteCreateManyHospitalInput = {
    id?: number
    idSite: number
  }

  export type PhoneCreateManyHospitalInput = {
    id?: number
    phone: string
  }

  export type PhotoCreateManyHospitalInput = {
    id?: number
    url: string
  }

  export type ReviewCreateManyHospitalInput = {
    id?: number
    opinion: string
    date?: Date | string
    idUser: number
    idStar: number
  }

  export type CampaignCreateManyHospitalInput = {
    id?: number
    date: Date | string
    hour: Date | string
    description: string
    image: string
  }

  export type DonationBankCreateManyHospitalInput = {
    id?: number
    year: number
    bloodMl: Decimal | DecimalJsLike | number | string
    idBloodType: number
  }

  export type HospitalSiteUpdateWithoutHospitalInput = {
    Site?: SiteUpdateOneRequiredWithoutHospitalSiteNestedInput
    BookSchedule?: BookScheduleUpdateManyWithoutHospitalSiteNestedInput
  }

  export type HospitalSiteUncheckedUpdateWithoutHospitalInput = {
    id?: IntFieldUpdateOperationsInput | number
    idSite?: IntFieldUpdateOperationsInput | number
    BookSchedule?: BookScheduleUncheckedUpdateManyWithoutHospitalSiteNestedInput
  }

  export type HospitalSiteUncheckedUpdateManyWithoutHospitalInput = {
    id?: IntFieldUpdateOperationsInput | number
    idSite?: IntFieldUpdateOperationsInput | number
  }

  export type PhoneUpdateWithoutHospitalInput = {
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type PhoneUncheckedUpdateWithoutHospitalInput = {
    id?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type PhoneUncheckedUpdateManyWithoutHospitalInput = {
    id?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type PhotoUpdateWithoutHospitalInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type PhotoUncheckedUpdateWithoutHospitalInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type PhotoUncheckedUpdateManyWithoutHospitalInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type ReviewUpdateWithoutHospitalInput = {
    opinion?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutReviewNestedInput
    Star?: StarUpdateOneRequiredWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateWithoutHospitalInput = {
    id?: IntFieldUpdateOperationsInput | number
    opinion?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    idUser?: IntFieldUpdateOperationsInput | number
    idStar?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewUncheckedUpdateManyWithoutHospitalInput = {
    id?: IntFieldUpdateOperationsInput | number
    opinion?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    idUser?: IntFieldUpdateOperationsInput | number
    idStar?: IntFieldUpdateOperationsInput | number
  }

  export type CampaignUpdateWithoutHospitalInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hour?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type CampaignUncheckedUpdateWithoutHospitalInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hour?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type CampaignUncheckedUpdateManyWithoutHospitalInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hour?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type DonationBankUpdateWithoutHospitalInput = {
    year?: IntFieldUpdateOperationsInput | number
    bloodMl?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    BloodType?: BloodTypeUpdateOneRequiredWithoutDonationBankNestedInput
  }

  export type DonationBankUncheckedUpdateWithoutHospitalInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    bloodMl?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    idBloodType?: IntFieldUpdateOperationsInput | number
  }

  export type DonationBankUncheckedUpdateManyWithoutHospitalInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    bloodMl?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    idBloodType?: IntFieldUpdateOperationsInput | number
  }

  export type HospitalSiteCreateManySiteInput = {
    id?: number
    idHospital: number
  }

  export type HospitalSiteUpdateWithoutSiteInput = {
    Hospital?: HospitalUpdateOneRequiredWithoutHospitalSiteNestedInput
    BookSchedule?: BookScheduleUpdateManyWithoutHospitalSiteNestedInput
  }

  export type HospitalSiteUncheckedUpdateWithoutSiteInput = {
    id?: IntFieldUpdateOperationsInput | number
    idHospital?: IntFieldUpdateOperationsInput | number
    BookSchedule?: BookScheduleUncheckedUpdateManyWithoutHospitalSiteNestedInput
  }

  export type HospitalSiteUncheckedUpdateManyWithoutSiteInput = {
    id?: IntFieldUpdateOperationsInput | number
    idHospital?: IntFieldUpdateOperationsInput | number
  }

  export type BookScheduleCreateManyHospitalSiteInput = {
    id?: number
    date: Date | string
    hour: Date | string
  }

  export type BookScheduleUpdateWithoutHospitalSiteInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hour?: DateTimeFieldUpdateOperationsInput | Date | string
    Schedule?: ScheduleUpdateManyWithoutBookScheduleNestedInput
  }

  export type BookScheduleUncheckedUpdateWithoutHospitalSiteInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hour?: DateTimeFieldUpdateOperationsInput | Date | string
    Schedule?: ScheduleUncheckedUpdateManyWithoutBookScheduleNestedInput
  }

  export type BookScheduleUncheckedUpdateManyWithoutHospitalSiteInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hour?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewCreateManyStarInput = {
    id?: number
    opinion: string
    date?: Date | string
    idUser: number
    idHospital: number
  }

  export type ReviewUpdateWithoutStarInput = {
    opinion?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutReviewNestedInput
    Hospital?: HospitalUpdateOneRequiredWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateWithoutStarInput = {
    id?: IntFieldUpdateOperationsInput | number
    opinion?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    idUser?: IntFieldUpdateOperationsInput | number
    idHospital?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewUncheckedUpdateManyWithoutStarInput = {
    id?: IntFieldUpdateOperationsInput | number
    opinion?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    idUser?: IntFieldUpdateOperationsInput | number
    idHospital?: IntFieldUpdateOperationsInput | number
  }

  export type ScheduleStatusCreateManyStatusInput = {
    id?: number
    observation?: string | null
    idSchedule: number
  }

  export type ScheduleStatusUpdateWithoutStatusInput = {
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    Schedule?: ScheduleUpdateOneRequiredWithoutScheduleStatusNestedInput
  }

  export type ScheduleStatusUncheckedUpdateWithoutStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    idSchedule?: IntFieldUpdateOperationsInput | number
  }

  export type ScheduleStatusUncheckedUpdateManyWithoutStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    idSchedule?: IntFieldUpdateOperationsInput | number
  }

  export type ScheduleCreateManyBookScheduleInput = {
    id?: number
    idUser: number
  }

  export type ScheduleUpdateWithoutBookScheduleInput = {
    User?: UserUpdateOneRequiredWithoutScheduleNestedInput
    ScheduleStatus?: ScheduleStatusUpdateManyWithoutScheduleNestedInput
  }

  export type ScheduleUncheckedUpdateWithoutBookScheduleInput = {
    id?: IntFieldUpdateOperationsInput | number
    idUser?: IntFieldUpdateOperationsInput | number
    ScheduleStatus?: ScheduleStatusUncheckedUpdateManyWithoutScheduleNestedInput
  }

  export type ScheduleUncheckedUpdateManyWithoutBookScheduleInput = {
    id?: IntFieldUpdateOperationsInput | number
    idUser?: IntFieldUpdateOperationsInput | number
  }

  export type ScheduleStatusCreateManyScheduleInput = {
    id?: number
    observation?: string | null
    idStatus: number
  }

  export type ScheduleStatusUpdateWithoutScheduleInput = {
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    Status?: StatusUpdateOneRequiredWithoutScheduleStatusNestedInput
  }

  export type ScheduleStatusUncheckedUpdateWithoutScheduleInput = {
    id?: IntFieldUpdateOperationsInput | number
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    idStatus?: IntFieldUpdateOperationsInput | number
  }

  export type ScheduleStatusUncheckedUpdateManyWithoutScheduleInput = {
    id?: IntFieldUpdateOperationsInput | number
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    idStatus?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use BloodTypeCountOutputTypeDefaultArgs instead
     */
    export type BloodTypeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BloodTypeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SexCountOutputTypeDefaultArgs instead
     */
    export type SexCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SexCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AddressCountOutputTypeDefaultArgs instead
     */
    export type AddressCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AddressCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HospitalCountOutputTypeDefaultArgs instead
     */
    export type HospitalCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HospitalCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SiteCountOutputTypeDefaultArgs instead
     */
    export type SiteCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SiteCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HospitalSiteCountOutputTypeDefaultArgs instead
     */
    export type HospitalSiteCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HospitalSiteCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StarCountOutputTypeDefaultArgs instead
     */
    export type StarCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StarCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StatusCountOutputTypeDefaultArgs instead
     */
    export type StatusCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StatusCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BookScheduleCountOutputTypeDefaultArgs instead
     */
    export type BookScheduleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BookScheduleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScheduleCountOutputTypeDefaultArgs instead
     */
    export type ScheduleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScheduleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BloodTypeDefaultArgs instead
     */
    export type BloodTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BloodTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SexDefaultArgs instead
     */
    export type SexArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SexDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AddressDefaultArgs instead
     */
    export type AddressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AddressDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HospitalDefaultArgs instead
     */
    export type HospitalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HospitalDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CampaignDefaultArgs instead
     */
    export type CampaignArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CampaignDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DonationBankDefaultArgs instead
     */
    export type DonationBankArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DonationBankDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SiteDefaultArgs instead
     */
    export type SiteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SiteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HospitalSiteDefaultArgs instead
     */
    export type HospitalSiteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HospitalSiteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PhoneDefaultArgs instead
     */
    export type PhoneArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PhoneDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PhotoDefaultArgs instead
     */
    export type PhotoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PhotoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StarDefaultArgs instead
     */
    export type StarArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StarDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReviewDefaultArgs instead
     */
    export type ReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReviewDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StatusDefaultArgs instead
     */
    export type StatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StatusDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BookScheduleDefaultArgs instead
     */
    export type BookScheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BookScheduleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScheduleDefaultArgs instead
     */
    export type ScheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScheduleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScheduleStatusDefaultArgs instead
     */
    export type ScheduleStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScheduleStatusDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}