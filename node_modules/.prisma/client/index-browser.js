
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.6.0
 * Query Engine version: 2804dc98259d2ea960602aca6b8e7fdc03c1758f
 */
Prisma.prismaVersion = {
  client: "5.6.0",
  engine: "2804dc98259d2ea960602aca6b8e7fdc03c1758f"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.BloodTypeScalarFieldEnum = {
  id: 'id',
  type: 'type'
};

exports.Prisma.SexScalarFieldEnum = {
  id: 'id',
  sex: 'sex'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  cep: 'cep',
  uf: 'uf',
  city: 'city',
  neighborhood: 'neighborhood',
  street: 'street',
  number: 'number',
  complement: 'complement'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  cpf: 'cpf',
  dateOfBirth: 'dateOfBirth',
  password: 'password',
  weight: 'weight',
  email: 'email',
  photoUrl: 'photoUrl',
  phone: 'phone',
  passwordResetToken: 'passwordResetToken',
  passwordResetExpires: 'passwordResetExpires',
  idAddress: 'idAddress',
  idSex: 'idSex',
  idBloodType: 'idBloodType'
};

exports.Prisma.HospitalScalarFieldEnum = {
  id: 'id',
  name: 'name',
  cnpj: 'cnpj',
  email: 'email',
  websiteUrl: 'websiteUrl',
  password: 'password',
  idAddress: 'idAddress'
};

exports.Prisma.CampaignScalarFieldEnum = {
  id: 'id',
  date: 'date',
  hour: 'hour',
  description: 'description',
  image: 'image',
  idHospital: 'idHospital'
};

exports.Prisma.DonationBankScalarFieldEnum = {
  id: 'id',
  year: 'year',
  bloodMl: 'bloodMl',
  idHospital: 'idHospital',
  idBloodType: 'idBloodType'
};

exports.Prisma.SiteScalarFieldEnum = {
  id: 'id',
  site: 'site'
};

exports.Prisma.HospitalSiteScalarFieldEnum = {
  id: 'id',
  idHospital: 'idHospital',
  idSite: 'idSite'
};

exports.Prisma.PhoneScalarFieldEnum = {
  id: 'id',
  phone: 'phone',
  idHospital: 'idHospital'
};

exports.Prisma.PhotoScalarFieldEnum = {
  id: 'id',
  url: 'url',
  idHospital: 'idHospital'
};

exports.Prisma.StarScalarFieldEnum = {
  id: 'id',
  starNumber: 'starNumber'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  opinion: 'opinion',
  date: 'date',
  idUser: 'idUser',
  idHospital: 'idHospital',
  idStar: 'idStar'
};

exports.Prisma.StatusScalarFieldEnum = {
  id: 'id',
  status: 'status'
};

exports.Prisma.BookScheduleScalarFieldEnum = {
  id: 'id',
  date: 'date',
  hour: 'hour',
  idHospitalSite: 'idHospitalSite'
};

exports.Prisma.ScheduleScalarFieldEnum = {
  id: 'id',
  idUser: 'idUser',
  idBookSchedule: 'idBookSchedule'
};

exports.Prisma.ScheduleStatusScalarFieldEnum = {
  id: 'id',
  observation: 'observation',
  idSchedule: 'idSchedule',
  idStatus: 'idStatus'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.STATUS = exports.$Enums.STATUS = {
  CONCLUDED: 'CONCLUDED',
  SCHEDULED: 'SCHEDULED',
  RESCHEDULED: 'RESCHEDULED',
  PENDING: 'PENDING'
};

exports.Prisma.ModelName = {
  BloodType: 'BloodType',
  Sex: 'Sex',
  Address: 'Address',
  User: 'User',
  Hospital: 'Hospital',
  Campaign: 'Campaign',
  DonationBank: 'DonationBank',
  Site: 'Site',
  HospitalSite: 'HospitalSite',
  Phone: 'Phone',
  Photo: 'Photo',
  Star: 'Star',
  Review: 'Review',
  Status: 'Status',
  BookSchedule: 'BookSchedule',
  Schedule: 'Schedule',
  ScheduleStatus: 'ScheduleStatus'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
